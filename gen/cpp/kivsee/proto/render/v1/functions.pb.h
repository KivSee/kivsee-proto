// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kivsee/proto/render/v1/functions.proto
// Protobuf C++ Version: 6.31.0

#ifndef kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto_2epb_2eh
#define kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto;
}  // extern "C"
namespace kivsee {
namespace proto {
namespace render {
namespace v1 {
class Comb2FloatFunctionConfig;
struct Comb2FloatFunctionConfigDefaultTypeInternal;
extern Comb2FloatFunctionConfigDefaultTypeInternal _Comb2FloatFunctionConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Comb2FloatFunctionConfig_class_data_;
class ConstValueFloatFunctionConfig;
struct ConstValueFloatFunctionConfigDefaultTypeInternal;
extern ConstValueFloatFunctionConfigDefaultTypeInternal _ConstValueFloatFunctionConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConstValueFloatFunctionConfig_class_data_;
class FloatFunction;
struct FloatFunctionDefaultTypeInternal;
extern FloatFunctionDefaultTypeInternal _FloatFunction_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull FloatFunction_class_data_;
class HalfFloatFunctionConfig;
struct HalfFloatFunctionConfigDefaultTypeInternal;
extern HalfFloatFunctionConfigDefaultTypeInternal _HalfFloatFunctionConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HalfFloatFunctionConfig_class_data_;
class LinearFloatFunctionConfig;
struct LinearFloatFunctionConfigDefaultTypeInternal;
extern LinearFloatFunctionConfigDefaultTypeInternal _LinearFloatFunctionConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull LinearFloatFunctionConfig_class_data_;
class RepeatFloatFunctionConfig;
struct RepeatFloatFunctionConfigDefaultTypeInternal;
extern RepeatFloatFunctionConfigDefaultTypeInternal _RepeatFloatFunctionConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RepeatFloatFunctionConfig_class_data_;
class SinFloatFunctionConfig;
struct SinFloatFunctionConfigDefaultTypeInternal;
extern SinFloatFunctionConfigDefaultTypeInternal _SinFloatFunctionConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SinFloatFunctionConfig_class_data_;
class StepsFloatFunctionConfig;
struct StepsFloatFunctionConfigDefaultTypeInternal;
extern StepsFloatFunctionConfigDefaultTypeInternal _StepsFloatFunctionConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull StepsFloatFunctionConfig_class_data_;
}  // namespace v1
}  // namespace render
}  // namespace proto
}  // namespace kivsee
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kivsee {
namespace proto {
namespace render {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class StepsFloatFunctionConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kivsee.proto.render.v1.StepsFloatFunctionConfig) */ {
 public:
  inline StepsFloatFunctionConfig() : StepsFloatFunctionConfig(nullptr) {}
  ~StepsFloatFunctionConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StepsFloatFunctionConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StepsFloatFunctionConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StepsFloatFunctionConfig(::google::protobuf::internal::ConstantInitialized);

  inline StepsFloatFunctionConfig(const StepsFloatFunctionConfig& from) : StepsFloatFunctionConfig(nullptr, from) {}
  inline StepsFloatFunctionConfig(StepsFloatFunctionConfig&& from) noexcept
      : StepsFloatFunctionConfig(nullptr, ::std::move(from)) {}
  inline StepsFloatFunctionConfig& operator=(const StepsFloatFunctionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepsFloatFunctionConfig& operator=(StepsFloatFunctionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepsFloatFunctionConfig& default_instance() {
    return *reinterpret_cast<const StepsFloatFunctionConfig*>(
        &_StepsFloatFunctionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(StepsFloatFunctionConfig& a, StepsFloatFunctionConfig& b) { a.Swap(&b); }
  inline void Swap(StepsFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepsFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StepsFloatFunctionConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StepsFloatFunctionConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StepsFloatFunctionConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StepsFloatFunctionConfig& from) { StepsFloatFunctionConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StepsFloatFunctionConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kivsee.proto.render.v1.StepsFloatFunctionConfig"; }

 protected:
  explicit StepsFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  StepsFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const StepsFloatFunctionConfig& from);
  StepsFloatFunctionConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, StepsFloatFunctionConfig&& from) noexcept
      : StepsFloatFunctionConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNumStepsFieldNumber = 1,
    kDiffPerStepFieldNumber = 2,
    kFirstStepValueFieldNumber = 3,
  };
  // float num_steps = 1 [json_name = "numSteps"];
  void clear_num_steps() ;
  float num_steps() const;
  void set_num_steps(float value);

  private:
  float _internal_num_steps() const;
  void _internal_set_num_steps(float value);

  public:
  // float diff_per_step = 2 [json_name = "diffPerStep"];
  void clear_diff_per_step() ;
  float diff_per_step() const;
  void set_diff_per_step(float value);

  private:
  float _internal_diff_per_step() const;
  void _internal_set_diff_per_step(float value);

  public:
  // float first_step_value = 3 [json_name = "firstStepValue"];
  void clear_first_step_value() ;
  float first_step_value() const;
  void set_first_step_value(float value);

  private:
  float _internal_first_step_value() const;
  void _internal_set_first_step_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:kivsee.proto.render.v1.StepsFloatFunctionConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const StepsFloatFunctionConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float num_steps_;
    float diff_per_step_;
    float first_step_value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull StepsFloatFunctionConfig_class_data_;
// -------------------------------------------------------------------

class SinFloatFunctionConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kivsee.proto.render.v1.SinFloatFunctionConfig) */ {
 public:
  inline SinFloatFunctionConfig() : SinFloatFunctionConfig(nullptr) {}
  ~SinFloatFunctionConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SinFloatFunctionConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SinFloatFunctionConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SinFloatFunctionConfig(::google::protobuf::internal::ConstantInitialized);

  inline SinFloatFunctionConfig(const SinFloatFunctionConfig& from) : SinFloatFunctionConfig(nullptr, from) {}
  inline SinFloatFunctionConfig(SinFloatFunctionConfig&& from) noexcept
      : SinFloatFunctionConfig(nullptr, ::std::move(from)) {}
  inline SinFloatFunctionConfig& operator=(const SinFloatFunctionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SinFloatFunctionConfig& operator=(SinFloatFunctionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SinFloatFunctionConfig& default_instance() {
    return *reinterpret_cast<const SinFloatFunctionConfig*>(
        &_SinFloatFunctionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SinFloatFunctionConfig& a, SinFloatFunctionConfig& b) { a.Swap(&b); }
  inline void Swap(SinFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SinFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SinFloatFunctionConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SinFloatFunctionConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SinFloatFunctionConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SinFloatFunctionConfig& from) { SinFloatFunctionConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SinFloatFunctionConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kivsee.proto.render.v1.SinFloatFunctionConfig"; }

 protected:
  explicit SinFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SinFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SinFloatFunctionConfig& from);
  SinFloatFunctionConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SinFloatFunctionConfig&& from) noexcept
      : SinFloatFunctionConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kPhaseFieldNumber = 3,
    kRepeatsFieldNumber = 4,
  };
  // float min = 1 [json_name = "min"];
  void clear_min() ;
  float min() const;
  void set_min(float value);

  private:
  float _internal_min() const;
  void _internal_set_min(float value);

  public:
  // float max = 2 [json_name = "max"];
  void clear_max() ;
  float max() const;
  void set_max(float value);

  private:
  float _internal_max() const;
  void _internal_set_max(float value);

  public:
  // float phase = 3 [json_name = "phase"];
  void clear_phase() ;
  float phase() const;
  void set_phase(float value);

  private:
  float _internal_phase() const;
  void _internal_set_phase(float value);

  public:
  // float repeats = 4 [json_name = "repeats"];
  void clear_repeats() ;
  float repeats() const;
  void set_repeats(float value);

  private:
  float _internal_repeats() const;
  void _internal_set_repeats(float value);

  public:
  // @@protoc_insertion_point(class_scope:kivsee.proto.render.v1.SinFloatFunctionConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SinFloatFunctionConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float min_;
    float max_;
    float phase_;
    float repeats_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SinFloatFunctionConfig_class_data_;
// -------------------------------------------------------------------

class LinearFloatFunctionConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kivsee.proto.render.v1.LinearFloatFunctionConfig) */ {
 public:
  inline LinearFloatFunctionConfig() : LinearFloatFunctionConfig(nullptr) {}
  ~LinearFloatFunctionConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LinearFloatFunctionConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LinearFloatFunctionConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LinearFloatFunctionConfig(::google::protobuf::internal::ConstantInitialized);

  inline LinearFloatFunctionConfig(const LinearFloatFunctionConfig& from) : LinearFloatFunctionConfig(nullptr, from) {}
  inline LinearFloatFunctionConfig(LinearFloatFunctionConfig&& from) noexcept
      : LinearFloatFunctionConfig(nullptr, ::std::move(from)) {}
  inline LinearFloatFunctionConfig& operator=(const LinearFloatFunctionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearFloatFunctionConfig& operator=(LinearFloatFunctionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinearFloatFunctionConfig& default_instance() {
    return *reinterpret_cast<const LinearFloatFunctionConfig*>(
        &_LinearFloatFunctionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LinearFloatFunctionConfig& a, LinearFloatFunctionConfig& b) { a.Swap(&b); }
  inline void Swap(LinearFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinearFloatFunctionConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LinearFloatFunctionConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LinearFloatFunctionConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LinearFloatFunctionConfig& from) { LinearFloatFunctionConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LinearFloatFunctionConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kivsee.proto.render.v1.LinearFloatFunctionConfig"; }

 protected:
  explicit LinearFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  LinearFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const LinearFloatFunctionConfig& from);
  LinearFloatFunctionConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, LinearFloatFunctionConfig&& from) noexcept
      : LinearFloatFunctionConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // float start = 1 [json_name = "start"];
  void clear_start() ;
  float start() const;
  void set_start(float value);

  private:
  float _internal_start() const;
  void _internal_set_start(float value);

  public:
  // float end = 2 [json_name = "end"];
  void clear_end() ;
  float end() const;
  void set_end(float value);

  private:
  float _internal_end() const;
  void _internal_set_end(float value);

  public:
  // @@protoc_insertion_point(class_scope:kivsee.proto.render.v1.LinearFloatFunctionConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const LinearFloatFunctionConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float start_;
    float end_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull LinearFloatFunctionConfig_class_data_;
// -------------------------------------------------------------------

class ConstValueFloatFunctionConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kivsee.proto.render.v1.ConstValueFloatFunctionConfig) */ {
 public:
  inline ConstValueFloatFunctionConfig() : ConstValueFloatFunctionConfig(nullptr) {}
  ~ConstValueFloatFunctionConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConstValueFloatFunctionConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConstValueFloatFunctionConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConstValueFloatFunctionConfig(::google::protobuf::internal::ConstantInitialized);

  inline ConstValueFloatFunctionConfig(const ConstValueFloatFunctionConfig& from) : ConstValueFloatFunctionConfig(nullptr, from) {}
  inline ConstValueFloatFunctionConfig(ConstValueFloatFunctionConfig&& from) noexcept
      : ConstValueFloatFunctionConfig(nullptr, ::std::move(from)) {}
  inline ConstValueFloatFunctionConfig& operator=(const ConstValueFloatFunctionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstValueFloatFunctionConfig& operator=(ConstValueFloatFunctionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConstValueFloatFunctionConfig& default_instance() {
    return *reinterpret_cast<const ConstValueFloatFunctionConfig*>(
        &_ConstValueFloatFunctionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ConstValueFloatFunctionConfig& a, ConstValueFloatFunctionConfig& b) { a.Swap(&b); }
  inline void Swap(ConstValueFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConstValueFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConstValueFloatFunctionConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConstValueFloatFunctionConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConstValueFloatFunctionConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConstValueFloatFunctionConfig& from) { ConstValueFloatFunctionConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConstValueFloatFunctionConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kivsee.proto.render.v1.ConstValueFloatFunctionConfig"; }

 protected:
  explicit ConstValueFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConstValueFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConstValueFloatFunctionConfig& from);
  ConstValueFloatFunctionConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConstValueFloatFunctionConfig&& from) noexcept
      : ConstValueFloatFunctionConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // float value = 1 [json_name = "value"];
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:kivsee.proto.render.v1.ConstValueFloatFunctionConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConstValueFloatFunctionConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConstValueFloatFunctionConfig_class_data_;
// -------------------------------------------------------------------

class Comb2FloatFunctionConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kivsee.proto.render.v1.Comb2FloatFunctionConfig) */ {
 public:
  inline Comb2FloatFunctionConfig() : Comb2FloatFunctionConfig(nullptr) {}
  ~Comb2FloatFunctionConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Comb2FloatFunctionConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Comb2FloatFunctionConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Comb2FloatFunctionConfig(::google::protobuf::internal::ConstantInitialized);

  inline Comb2FloatFunctionConfig(const Comb2FloatFunctionConfig& from) : Comb2FloatFunctionConfig(nullptr, from) {}
  inline Comb2FloatFunctionConfig(Comb2FloatFunctionConfig&& from) noexcept
      : Comb2FloatFunctionConfig(nullptr, ::std::move(from)) {}
  inline Comb2FloatFunctionConfig& operator=(const Comb2FloatFunctionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Comb2FloatFunctionConfig& operator=(Comb2FloatFunctionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Comb2FloatFunctionConfig& default_instance() {
    return *reinterpret_cast<const Comb2FloatFunctionConfig*>(
        &_Comb2FloatFunctionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Comb2FloatFunctionConfig& a, Comb2FloatFunctionConfig& b) { a.Swap(&b); }
  inline void Swap(Comb2FloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Comb2FloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Comb2FloatFunctionConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Comb2FloatFunctionConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Comb2FloatFunctionConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Comb2FloatFunctionConfig& from) { Comb2FloatFunctionConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Comb2FloatFunctionConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kivsee.proto.render.v1.Comb2FloatFunctionConfig"; }

 protected:
  explicit Comb2FloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Comb2FloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Comb2FloatFunctionConfig& from);
  Comb2FloatFunctionConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Comb2FloatFunctionConfig&& from) noexcept
      : Comb2FloatFunctionConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
    kAmount1FieldNumber = 2,
    kAmount2FieldNumber = 4,
  };
  // .kivsee.proto.render.v1.FloatFunction f1 = 1 [json_name = "f1"];
  bool has_f1() const;
  void clear_f1() ;
  const ::kivsee::proto::render::v1::FloatFunction& f1() const;
  [[nodiscard]] ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE release_f1();
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL mutable_f1();
  void set_allocated_f1(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_f1(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE unsafe_arena_release_f1();

  private:
  const ::kivsee::proto::render::v1::FloatFunction& _internal_f1() const;
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL _internal_mutable_f1();

  public:
  // .kivsee.proto.render.v1.FloatFunction f2 = 3 [json_name = "f2"];
  bool has_f2() const;
  void clear_f2() ;
  const ::kivsee::proto::render::v1::FloatFunction& f2() const;
  [[nodiscard]] ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE release_f2();
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL mutable_f2();
  void set_allocated_f2(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_f2(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE unsafe_arena_release_f2();

  private:
  const ::kivsee::proto::render::v1::FloatFunction& _internal_f2() const;
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL _internal_mutable_f2();

  public:
  // float amount1 = 2 [json_name = "amount1"];
  void clear_amount1() ;
  float amount1() const;
  void set_amount1(float value);

  private:
  float _internal_amount1() const;
  void _internal_set_amount1(float value);

  public:
  // float amount2 = 4 [json_name = "amount2"];
  void clear_amount2() ;
  float amount2() const;
  void set_amount2(float value);

  private:
  float _internal_amount2() const;
  void _internal_set_amount2(float value);

  public:
  // @@protoc_insertion_point(class_scope:kivsee.proto.render.v1.Comb2FloatFunctionConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Comb2FloatFunctionConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE f1_;
    ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE f2_;
    float amount1_;
    float amount2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Comb2FloatFunctionConfig_class_data_;
// -------------------------------------------------------------------

class FloatFunction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kivsee.proto.render.v1.FloatFunction) */ {
 public:
  inline FloatFunction() : FloatFunction(nullptr) {}
  ~FloatFunction() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FloatFunction* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FloatFunction));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FloatFunction(::google::protobuf::internal::ConstantInitialized);

  inline FloatFunction(const FloatFunction& from) : FloatFunction(nullptr, from) {}
  inline FloatFunction(FloatFunction&& from) noexcept
      : FloatFunction(nullptr, ::std::move(from)) {}
  inline FloatFunction& operator=(const FloatFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatFunction& operator=(FloatFunction&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatFunction& default_instance() {
    return *reinterpret_cast<const FloatFunction*>(
        &_FloatFunction_default_instance_);
  }
  enum FunctionCase {
    kConstValue = 1,
    kLinear = 2,
    kSin = 3,
    kSteps = 4,
    kRepeat = 5,
    kHalf = 6,
    kComb2 = 7,
    FUNCTION_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(FloatFunction& a, FloatFunction& b) { a.Swap(&b); }
  inline void Swap(FloatFunction* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatFunction* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatFunction* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FloatFunction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FloatFunction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FloatFunction& from) { FloatFunction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FloatFunction* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kivsee.proto.render.v1.FloatFunction"; }

 protected:
  explicit FloatFunction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FloatFunction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FloatFunction& from);
  FloatFunction(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FloatFunction&& from) noexcept
      : FloatFunction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConstValueFieldNumber = 1,
    kLinearFieldNumber = 2,
    kSinFieldNumber = 3,
    kStepsFieldNumber = 4,
    kRepeatFieldNumber = 5,
    kHalfFieldNumber = 6,
    kComb2FieldNumber = 7,
  };
  // .kivsee.proto.render.v1.ConstValueFloatFunctionConfig const_value = 1 [json_name = "constValue"];
  bool has_const_value() const;
  private:
  bool _internal_has_const_value() const;

  public:
  void clear_const_value() ;
  const ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig& const_value() const;
  [[nodiscard]] ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NULLABLE release_const_value();
  ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NONNULL mutable_const_value();
  void set_allocated_const_value(::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_const_value(::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NULLABLE unsafe_arena_release_const_value();

  private:
  const ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig& _internal_const_value() const;
  ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NONNULL _internal_mutable_const_value();

  public:
  // .kivsee.proto.render.v1.LinearFloatFunctionConfig linear = 2 [json_name = "linear"];
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;

  public:
  void clear_linear() ;
  const ::kivsee::proto::render::v1::LinearFloatFunctionConfig& linear() const;
  [[nodiscard]] ::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NULLABLE release_linear();
  ::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NONNULL mutable_linear();
  void set_allocated_linear(::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_linear(::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NULLABLE unsafe_arena_release_linear();

  private:
  const ::kivsee::proto::render::v1::LinearFloatFunctionConfig& _internal_linear() const;
  ::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NONNULL _internal_mutable_linear();

  public:
  // .kivsee.proto.render.v1.SinFloatFunctionConfig sin = 3 [json_name = "sin"];
  bool has_sin() const;
  private:
  bool _internal_has_sin() const;

  public:
  void clear_sin() ;
  const ::kivsee::proto::render::v1::SinFloatFunctionConfig& sin() const;
  [[nodiscard]] ::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NULLABLE release_sin();
  ::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NONNULL mutable_sin();
  void set_allocated_sin(::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sin(::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NULLABLE unsafe_arena_release_sin();

  private:
  const ::kivsee::proto::render::v1::SinFloatFunctionConfig& _internal_sin() const;
  ::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NONNULL _internal_mutable_sin();

  public:
  // .kivsee.proto.render.v1.StepsFloatFunctionConfig steps = 4 [json_name = "steps"];
  bool has_steps() const;
  private:
  bool _internal_has_steps() const;

  public:
  void clear_steps() ;
  const ::kivsee::proto::render::v1::StepsFloatFunctionConfig& steps() const;
  [[nodiscard]] ::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NULLABLE release_steps();
  ::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NONNULL mutable_steps();
  void set_allocated_steps(::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_steps(::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NULLABLE unsafe_arena_release_steps();

  private:
  const ::kivsee::proto::render::v1::StepsFloatFunctionConfig& _internal_steps() const;
  ::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NONNULL _internal_mutable_steps();

  public:
  // .kivsee.proto.render.v1.RepeatFloatFunctionConfig repeat = 5 [json_name = "repeat"];
  bool has_repeat() const;
  private:
  bool _internal_has_repeat() const;

  public:
  void clear_repeat() ;
  const ::kivsee::proto::render::v1::RepeatFloatFunctionConfig& repeat() const;
  [[nodiscard]] ::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NULLABLE release_repeat();
  ::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NONNULL mutable_repeat();
  void set_allocated_repeat(::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_repeat(::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NULLABLE unsafe_arena_release_repeat();

  private:
  const ::kivsee::proto::render::v1::RepeatFloatFunctionConfig& _internal_repeat() const;
  ::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NONNULL _internal_mutable_repeat();

  public:
  // .kivsee.proto.render.v1.HalfFloatFunctionConfig half = 6 [json_name = "half"];
  bool has_half() const;
  private:
  bool _internal_has_half() const;

  public:
  void clear_half() ;
  const ::kivsee::proto::render::v1::HalfFloatFunctionConfig& half() const;
  [[nodiscard]] ::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NULLABLE release_half();
  ::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NONNULL mutable_half();
  void set_allocated_half(::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_half(::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NULLABLE unsafe_arena_release_half();

  private:
  const ::kivsee::proto::render::v1::HalfFloatFunctionConfig& _internal_half() const;
  ::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NONNULL _internal_mutable_half();

  public:
  // .kivsee.proto.render.v1.Comb2FloatFunctionConfig comb2 = 7 [json_name = "comb2"];
  bool has_comb2() const;
  private:
  bool _internal_has_comb2() const;

  public:
  void clear_comb2() ;
  const ::kivsee::proto::render::v1::Comb2FloatFunctionConfig& comb2() const;
  [[nodiscard]] ::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NULLABLE release_comb2();
  ::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NONNULL mutable_comb2();
  void set_allocated_comb2(::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_comb2(::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NULLABLE unsafe_arena_release_comb2();

  private:
  const ::kivsee::proto::render::v1::Comb2FloatFunctionConfig& _internal_comb2() const;
  ::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NONNULL _internal_mutable_comb2();

  public:
  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:kivsee.proto.render.v1.FloatFunction)
 private:
  class _Internal;
  void set_has_const_value();
  void set_has_linear();
  void set_has_sin();
  void set_has_steps();
  void set_has_repeat();
  void set_has_half();
  void set_has_comb2();
  inline bool has_function() const;
  inline void clear_has_function();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 7,
                                   7, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FloatFunction& from_msg);
    union FunctionUnion {
      constexpr FunctionUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE const_value_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE linear_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE sin_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE steps_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE repeat_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE half_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE comb2_;
    } function_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull FloatFunction_class_data_;
// -------------------------------------------------------------------

class HalfFloatFunctionConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kivsee.proto.render.v1.HalfFloatFunctionConfig) */ {
 public:
  inline HalfFloatFunctionConfig() : HalfFloatFunctionConfig(nullptr) {}
  ~HalfFloatFunctionConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HalfFloatFunctionConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HalfFloatFunctionConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HalfFloatFunctionConfig(::google::protobuf::internal::ConstantInitialized);

  inline HalfFloatFunctionConfig(const HalfFloatFunctionConfig& from) : HalfFloatFunctionConfig(nullptr, from) {}
  inline HalfFloatFunctionConfig(HalfFloatFunctionConfig&& from) noexcept
      : HalfFloatFunctionConfig(nullptr, ::std::move(from)) {}
  inline HalfFloatFunctionConfig& operator=(const HalfFloatFunctionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HalfFloatFunctionConfig& operator=(HalfFloatFunctionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HalfFloatFunctionConfig& default_instance() {
    return *reinterpret_cast<const HalfFloatFunctionConfig*>(
        &_HalfFloatFunctionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(HalfFloatFunctionConfig& a, HalfFloatFunctionConfig& b) { a.Swap(&b); }
  inline void Swap(HalfFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HalfFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HalfFloatFunctionConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HalfFloatFunctionConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HalfFloatFunctionConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HalfFloatFunctionConfig& from) { HalfFloatFunctionConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HalfFloatFunctionConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kivsee.proto.render.v1.HalfFloatFunctionConfig"; }

 protected:
  explicit HalfFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HalfFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HalfFloatFunctionConfig& from);
  HalfFloatFunctionConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HalfFloatFunctionConfig&& from) noexcept
      : HalfFloatFunctionConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // .kivsee.proto.render.v1.FloatFunction f1 = 1 [json_name = "f1"];
  bool has_f1() const;
  void clear_f1() ;
  const ::kivsee::proto::render::v1::FloatFunction& f1() const;
  [[nodiscard]] ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE release_f1();
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL mutable_f1();
  void set_allocated_f1(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_f1(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE unsafe_arena_release_f1();

  private:
  const ::kivsee::proto::render::v1::FloatFunction& _internal_f1() const;
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL _internal_mutable_f1();

  public:
  // .kivsee.proto.render.v1.FloatFunction f2 = 2 [json_name = "f2"];
  bool has_f2() const;
  void clear_f2() ;
  const ::kivsee::proto::render::v1::FloatFunction& f2() const;
  [[nodiscard]] ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE release_f2();
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL mutable_f2();
  void set_allocated_f2(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_f2(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE unsafe_arena_release_f2();

  private:
  const ::kivsee::proto::render::v1::FloatFunction& _internal_f2() const;
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL _internal_mutable_f2();

  public:
  // @@protoc_insertion_point(class_scope:kivsee.proto.render.v1.HalfFloatFunctionConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HalfFloatFunctionConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE f1_;
    ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE f2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HalfFloatFunctionConfig_class_data_;
// -------------------------------------------------------------------

class RepeatFloatFunctionConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kivsee.proto.render.v1.RepeatFloatFunctionConfig) */ {
 public:
  inline RepeatFloatFunctionConfig() : RepeatFloatFunctionConfig(nullptr) {}
  ~RepeatFloatFunctionConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RepeatFloatFunctionConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RepeatFloatFunctionConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RepeatFloatFunctionConfig(::google::protobuf::internal::ConstantInitialized);

  inline RepeatFloatFunctionConfig(const RepeatFloatFunctionConfig& from) : RepeatFloatFunctionConfig(nullptr, from) {}
  inline RepeatFloatFunctionConfig(RepeatFloatFunctionConfig&& from) noexcept
      : RepeatFloatFunctionConfig(nullptr, ::std::move(from)) {}
  inline RepeatFloatFunctionConfig& operator=(const RepeatFloatFunctionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatFloatFunctionConfig& operator=(RepeatFloatFunctionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatFloatFunctionConfig& default_instance() {
    return *reinterpret_cast<const RepeatFloatFunctionConfig*>(
        &_RepeatFloatFunctionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RepeatFloatFunctionConfig& a, RepeatFloatFunctionConfig& b) { a.Swap(&b); }
  inline void Swap(RepeatFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatFloatFunctionConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepeatFloatFunctionConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RepeatFloatFunctionConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RepeatFloatFunctionConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RepeatFloatFunctionConfig& from) { RepeatFloatFunctionConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RepeatFloatFunctionConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kivsee.proto.render.v1.RepeatFloatFunctionConfig"; }

 protected:
  explicit RepeatFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RepeatFloatFunctionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RepeatFloatFunctionConfig& from);
  RepeatFloatFunctionConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RepeatFloatFunctionConfig&& from) noexcept
      : RepeatFloatFunctionConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFuncToRepeatFieldNumber = 2,
    kNumberOfTimesFieldNumber = 1,
  };
  // .kivsee.proto.render.v1.FloatFunction funcToRepeat = 2 [json_name = "funcToRepeat"];
  bool has_functorepeat() const;
  void clear_functorepeat() ;
  const ::kivsee::proto::render::v1::FloatFunction& functorepeat() const;
  [[nodiscard]] ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE release_functorepeat();
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL mutable_functorepeat();
  void set_allocated_functorepeat(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_functorepeat(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value);
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE unsafe_arena_release_functorepeat();

  private:
  const ::kivsee::proto::render::v1::FloatFunction& _internal_functorepeat() const;
  ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL _internal_mutable_functorepeat();

  public:
  // float numberOfTimes = 1 [json_name = "numberOfTimes"];
  void clear_numberoftimes() ;
  float numberoftimes() const;
  void set_numberoftimes(float value);

  private:
  float _internal_numberoftimes() const;
  void _internal_set_numberoftimes(float value);

  public:
  // @@protoc_insertion_point(class_scope:kivsee.proto.render.v1.RepeatFloatFunctionConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RepeatFloatFunctionConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE functorepeat_;
    float numberoftimes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RepeatFloatFunctionConfig_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ConstValueFloatFunctionConfig

// float value = 1 [json_name = "value"];
inline void ConstValueFloatFunctionConfig::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ConstValueFloatFunctionConfig::value() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.ConstValueFloatFunctionConfig.value)
  return _internal_value();
}
inline void ConstValueFloatFunctionConfig::set_value(float value) {
  _internal_set_value(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.ConstValueFloatFunctionConfig.value)
}
inline float ConstValueFloatFunctionConfig::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void ConstValueFloatFunctionConfig::_internal_set_value(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// LinearFloatFunctionConfig

// float start = 1 [json_name = "start"];
inline void LinearFloatFunctionConfig::clear_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float LinearFloatFunctionConfig::start() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.LinearFloatFunctionConfig.start)
  return _internal_start();
}
inline void LinearFloatFunctionConfig::set_start(float value) {
  _internal_set_start(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.LinearFloatFunctionConfig.start)
}
inline float LinearFloatFunctionConfig::_internal_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_;
}
inline void LinearFloatFunctionConfig::_internal_set_start(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_ = value;
}

// float end = 2 [json_name = "end"];
inline void LinearFloatFunctionConfig::clear_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float LinearFloatFunctionConfig::end() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.LinearFloatFunctionConfig.end)
  return _internal_end();
}
inline void LinearFloatFunctionConfig::set_end(float value) {
  _internal_set_end(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.LinearFloatFunctionConfig.end)
}
inline float LinearFloatFunctionConfig::_internal_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_;
}
inline void LinearFloatFunctionConfig::_internal_set_end(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_ = value;
}

// -------------------------------------------------------------------

// SinFloatFunctionConfig

// float min = 1 [json_name = "min"];
inline void SinFloatFunctionConfig::clear_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float SinFloatFunctionConfig::min() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.SinFloatFunctionConfig.min)
  return _internal_min();
}
inline void SinFloatFunctionConfig::set_min(float value) {
  _internal_set_min(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.SinFloatFunctionConfig.min)
}
inline float SinFloatFunctionConfig::_internal_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_;
}
inline void SinFloatFunctionConfig::_internal_set_min(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_ = value;
}

// float max = 2 [json_name = "max"];
inline void SinFloatFunctionConfig::clear_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float SinFloatFunctionConfig::max() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.SinFloatFunctionConfig.max)
  return _internal_max();
}
inline void SinFloatFunctionConfig::set_max(float value) {
  _internal_set_max(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.SinFloatFunctionConfig.max)
}
inline float SinFloatFunctionConfig::_internal_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_;
}
inline void SinFloatFunctionConfig::_internal_set_max(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ = value;
}

// float phase = 3 [json_name = "phase"];
inline void SinFloatFunctionConfig::clear_phase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phase_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float SinFloatFunctionConfig::phase() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.SinFloatFunctionConfig.phase)
  return _internal_phase();
}
inline void SinFloatFunctionConfig::set_phase(float value) {
  _internal_set_phase(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.SinFloatFunctionConfig.phase)
}
inline float SinFloatFunctionConfig::_internal_phase() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.phase_;
}
inline void SinFloatFunctionConfig::_internal_set_phase(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phase_ = value;
}

// float repeats = 4 [json_name = "repeats"];
inline void SinFloatFunctionConfig::clear_repeats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.repeats_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SinFloatFunctionConfig::repeats() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.SinFloatFunctionConfig.repeats)
  return _internal_repeats();
}
inline void SinFloatFunctionConfig::set_repeats(float value) {
  _internal_set_repeats(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.SinFloatFunctionConfig.repeats)
}
inline float SinFloatFunctionConfig::_internal_repeats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.repeats_;
}
inline void SinFloatFunctionConfig::_internal_set_repeats(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.repeats_ = value;
}

// -------------------------------------------------------------------

// StepsFloatFunctionConfig

// float num_steps = 1 [json_name = "numSteps"];
inline void StepsFloatFunctionConfig::clear_num_steps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_steps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float StepsFloatFunctionConfig::num_steps() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.StepsFloatFunctionConfig.num_steps)
  return _internal_num_steps();
}
inline void StepsFloatFunctionConfig::set_num_steps(float value) {
  _internal_set_num_steps(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.StepsFloatFunctionConfig.num_steps)
}
inline float StepsFloatFunctionConfig::_internal_num_steps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_steps_;
}
inline void StepsFloatFunctionConfig::_internal_set_num_steps(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_steps_ = value;
}

// float diff_per_step = 2 [json_name = "diffPerStep"];
inline void StepsFloatFunctionConfig::clear_diff_per_step() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diff_per_step_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float StepsFloatFunctionConfig::diff_per_step() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.StepsFloatFunctionConfig.diff_per_step)
  return _internal_diff_per_step();
}
inline void StepsFloatFunctionConfig::set_diff_per_step(float value) {
  _internal_set_diff_per_step(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.StepsFloatFunctionConfig.diff_per_step)
}
inline float StepsFloatFunctionConfig::_internal_diff_per_step() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.diff_per_step_;
}
inline void StepsFloatFunctionConfig::_internal_set_diff_per_step(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diff_per_step_ = value;
}

// float first_step_value = 3 [json_name = "firstStepValue"];
inline void StepsFloatFunctionConfig::clear_first_step_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_step_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float StepsFloatFunctionConfig::first_step_value() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.StepsFloatFunctionConfig.first_step_value)
  return _internal_first_step_value();
}
inline void StepsFloatFunctionConfig::set_first_step_value(float value) {
  _internal_set_first_step_value(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.StepsFloatFunctionConfig.first_step_value)
}
inline float StepsFloatFunctionConfig::_internal_first_step_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.first_step_value_;
}
inline void StepsFloatFunctionConfig::_internal_set_first_step_value(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_step_value_ = value;
}

// -------------------------------------------------------------------

// RepeatFloatFunctionConfig

// float numberOfTimes = 1 [json_name = "numberOfTimes"];
inline void RepeatFloatFunctionConfig::clear_numberoftimes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.numberoftimes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float RepeatFloatFunctionConfig::numberoftimes() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.RepeatFloatFunctionConfig.numberOfTimes)
  return _internal_numberoftimes();
}
inline void RepeatFloatFunctionConfig::set_numberoftimes(float value) {
  _internal_set_numberoftimes(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.RepeatFloatFunctionConfig.numberOfTimes)
}
inline float RepeatFloatFunctionConfig::_internal_numberoftimes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.numberoftimes_;
}
inline void RepeatFloatFunctionConfig::_internal_set_numberoftimes(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.numberoftimes_ = value;
}

// .kivsee.proto.render.v1.FloatFunction funcToRepeat = 2 [json_name = "funcToRepeat"];
inline bool RepeatFloatFunctionConfig::has_functorepeat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.functorepeat_ != nullptr);
  return value;
}
inline void RepeatFloatFunctionConfig::clear_functorepeat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.functorepeat_ != nullptr) _impl_.functorepeat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kivsee::proto::render::v1::FloatFunction& RepeatFloatFunctionConfig::_internal_functorepeat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kivsee::proto::render::v1::FloatFunction* p = _impl_.functorepeat_;
  return p != nullptr ? *p : reinterpret_cast<const ::kivsee::proto::render::v1::FloatFunction&>(::kivsee::proto::render::v1::_FloatFunction_default_instance_);
}
inline const ::kivsee::proto::render::v1::FloatFunction& RepeatFloatFunctionConfig::functorepeat() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.RepeatFloatFunctionConfig.funcToRepeat)
  return _internal_functorepeat();
}
inline void RepeatFloatFunctionConfig::unsafe_arena_set_allocated_functorepeat(
    ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.functorepeat_);
  }
  _impl_.functorepeat_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.RepeatFloatFunctionConfig.funcToRepeat)
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE RepeatFloatFunctionConfig::release_functorepeat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kivsee::proto::render::v1::FloatFunction* released = _impl_.functorepeat_;
  _impl_.functorepeat_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE RepeatFloatFunctionConfig::unsafe_arena_release_functorepeat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.RepeatFloatFunctionConfig.funcToRepeat)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kivsee::proto::render::v1::FloatFunction* temp = _impl_.functorepeat_;
  _impl_.functorepeat_ = nullptr;
  return temp;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL RepeatFloatFunctionConfig::_internal_mutable_functorepeat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.functorepeat_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::FloatFunction>(GetArena());
    _impl_.functorepeat_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(p);
  }
  return _impl_.functorepeat_;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL RepeatFloatFunctionConfig::mutable_functorepeat()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kivsee::proto::render::v1::FloatFunction* _msg = _internal_mutable_functorepeat();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.RepeatFloatFunctionConfig.funcToRepeat)
  return _msg;
}
inline void RepeatFloatFunctionConfig::set_allocated_functorepeat(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.functorepeat_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.functorepeat_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(value);
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.RepeatFloatFunctionConfig.funcToRepeat)
}

// -------------------------------------------------------------------

// HalfFloatFunctionConfig

// .kivsee.proto.render.v1.FloatFunction f1 = 1 [json_name = "f1"];
inline bool HalfFloatFunctionConfig::has_f1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f1_ != nullptr);
  return value;
}
inline void HalfFloatFunctionConfig::clear_f1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f1_ != nullptr) _impl_.f1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kivsee::proto::render::v1::FloatFunction& HalfFloatFunctionConfig::_internal_f1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kivsee::proto::render::v1::FloatFunction* p = _impl_.f1_;
  return p != nullptr ? *p : reinterpret_cast<const ::kivsee::proto::render::v1::FloatFunction&>(::kivsee::proto::render::v1::_FloatFunction_default_instance_);
}
inline const ::kivsee::proto::render::v1::FloatFunction& HalfFloatFunctionConfig::f1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.HalfFloatFunctionConfig.f1)
  return _internal_f1();
}
inline void HalfFloatFunctionConfig::unsafe_arena_set_allocated_f1(
    ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f1_);
  }
  _impl_.f1_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.HalfFloatFunctionConfig.f1)
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE HalfFloatFunctionConfig::release_f1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kivsee::proto::render::v1::FloatFunction* released = _impl_.f1_;
  _impl_.f1_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE HalfFloatFunctionConfig::unsafe_arena_release_f1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.HalfFloatFunctionConfig.f1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kivsee::proto::render::v1::FloatFunction* temp = _impl_.f1_;
  _impl_.f1_ = nullptr;
  return temp;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL HalfFloatFunctionConfig::_internal_mutable_f1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::FloatFunction>(GetArena());
    _impl_.f1_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(p);
  }
  return _impl_.f1_;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL HalfFloatFunctionConfig::mutable_f1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kivsee::proto::render::v1::FloatFunction* _msg = _internal_mutable_f1();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.HalfFloatFunctionConfig.f1)
  return _msg;
}
inline void HalfFloatFunctionConfig::set_allocated_f1(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f1_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(value);
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.HalfFloatFunctionConfig.f1)
}

// .kivsee.proto.render.v1.FloatFunction f2 = 2 [json_name = "f2"];
inline bool HalfFloatFunctionConfig::has_f2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f2_ != nullptr);
  return value;
}
inline void HalfFloatFunctionConfig::clear_f2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f2_ != nullptr) _impl_.f2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::kivsee::proto::render::v1::FloatFunction& HalfFloatFunctionConfig::_internal_f2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kivsee::proto::render::v1::FloatFunction* p = _impl_.f2_;
  return p != nullptr ? *p : reinterpret_cast<const ::kivsee::proto::render::v1::FloatFunction&>(::kivsee::proto::render::v1::_FloatFunction_default_instance_);
}
inline const ::kivsee::proto::render::v1::FloatFunction& HalfFloatFunctionConfig::f2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.HalfFloatFunctionConfig.f2)
  return _internal_f2();
}
inline void HalfFloatFunctionConfig::unsafe_arena_set_allocated_f2(
    ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f2_);
  }
  _impl_.f2_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.HalfFloatFunctionConfig.f2)
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE HalfFloatFunctionConfig::release_f2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kivsee::proto::render::v1::FloatFunction* released = _impl_.f2_;
  _impl_.f2_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE HalfFloatFunctionConfig::unsafe_arena_release_f2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.HalfFloatFunctionConfig.f2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kivsee::proto::render::v1::FloatFunction* temp = _impl_.f2_;
  _impl_.f2_ = nullptr;
  return temp;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL HalfFloatFunctionConfig::_internal_mutable_f2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::FloatFunction>(GetArena());
    _impl_.f2_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(p);
  }
  return _impl_.f2_;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL HalfFloatFunctionConfig::mutable_f2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kivsee::proto::render::v1::FloatFunction* _msg = _internal_mutable_f2();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.HalfFloatFunctionConfig.f2)
  return _msg;
}
inline void HalfFloatFunctionConfig::set_allocated_f2(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f2_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(value);
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.HalfFloatFunctionConfig.f2)
}

// -------------------------------------------------------------------

// Comb2FloatFunctionConfig

// .kivsee.proto.render.v1.FloatFunction f1 = 1 [json_name = "f1"];
inline bool Comb2FloatFunctionConfig::has_f1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f1_ != nullptr);
  return value;
}
inline void Comb2FloatFunctionConfig::clear_f1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f1_ != nullptr) _impl_.f1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kivsee::proto::render::v1::FloatFunction& Comb2FloatFunctionConfig::_internal_f1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kivsee::proto::render::v1::FloatFunction* p = _impl_.f1_;
  return p != nullptr ? *p : reinterpret_cast<const ::kivsee::proto::render::v1::FloatFunction&>(::kivsee::proto::render::v1::_FloatFunction_default_instance_);
}
inline const ::kivsee::proto::render::v1::FloatFunction& Comb2FloatFunctionConfig::f1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.Comb2FloatFunctionConfig.f1)
  return _internal_f1();
}
inline void Comb2FloatFunctionConfig::unsafe_arena_set_allocated_f1(
    ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f1_);
  }
  _impl_.f1_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.Comb2FloatFunctionConfig.f1)
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE Comb2FloatFunctionConfig::release_f1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kivsee::proto::render::v1::FloatFunction* released = _impl_.f1_;
  _impl_.f1_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE Comb2FloatFunctionConfig::unsafe_arena_release_f1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.Comb2FloatFunctionConfig.f1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kivsee::proto::render::v1::FloatFunction* temp = _impl_.f1_;
  _impl_.f1_ = nullptr;
  return temp;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL Comb2FloatFunctionConfig::_internal_mutable_f1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::FloatFunction>(GetArena());
    _impl_.f1_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(p);
  }
  return _impl_.f1_;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL Comb2FloatFunctionConfig::mutable_f1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kivsee::proto::render::v1::FloatFunction* _msg = _internal_mutable_f1();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.Comb2FloatFunctionConfig.f1)
  return _msg;
}
inline void Comb2FloatFunctionConfig::set_allocated_f1(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f1_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(value);
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.Comb2FloatFunctionConfig.f1)
}

// float amount1 = 2 [json_name = "amount1"];
inline void Comb2FloatFunctionConfig::clear_amount1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Comb2FloatFunctionConfig::amount1() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.Comb2FloatFunctionConfig.amount1)
  return _internal_amount1();
}
inline void Comb2FloatFunctionConfig::set_amount1(float value) {
  _internal_set_amount1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.Comb2FloatFunctionConfig.amount1)
}
inline float Comb2FloatFunctionConfig::_internal_amount1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount1_;
}
inline void Comb2FloatFunctionConfig::_internal_set_amount1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount1_ = value;
}

// .kivsee.proto.render.v1.FloatFunction f2 = 3 [json_name = "f2"];
inline bool Comb2FloatFunctionConfig::has_f2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f2_ != nullptr);
  return value;
}
inline void Comb2FloatFunctionConfig::clear_f2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f2_ != nullptr) _impl_.f2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::kivsee::proto::render::v1::FloatFunction& Comb2FloatFunctionConfig::_internal_f2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kivsee::proto::render::v1::FloatFunction* p = _impl_.f2_;
  return p != nullptr ? *p : reinterpret_cast<const ::kivsee::proto::render::v1::FloatFunction&>(::kivsee::proto::render::v1::_FloatFunction_default_instance_);
}
inline const ::kivsee::proto::render::v1::FloatFunction& Comb2FloatFunctionConfig::f2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.Comb2FloatFunctionConfig.f2)
  return _internal_f2();
}
inline void Comb2FloatFunctionConfig::unsafe_arena_set_allocated_f2(
    ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f2_);
  }
  _impl_.f2_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.Comb2FloatFunctionConfig.f2)
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE Comb2FloatFunctionConfig::release_f2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kivsee::proto::render::v1::FloatFunction* released = _impl_.f2_;
  _impl_.f2_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE Comb2FloatFunctionConfig::unsafe_arena_release_f2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.Comb2FloatFunctionConfig.f2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kivsee::proto::render::v1::FloatFunction* temp = _impl_.f2_;
  _impl_.f2_ = nullptr;
  return temp;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL Comb2FloatFunctionConfig::_internal_mutable_f2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::FloatFunction>(GetArena());
    _impl_.f2_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(p);
  }
  return _impl_.f2_;
}
inline ::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NONNULL Comb2FloatFunctionConfig::mutable_f2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kivsee::proto::render::v1::FloatFunction* _msg = _internal_mutable_f2();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.Comb2FloatFunctionConfig.f2)
  return _msg;
}
inline void Comb2FloatFunctionConfig::set_allocated_f2(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f2_ = reinterpret_cast<::kivsee::proto::render::v1::FloatFunction*>(value);
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.Comb2FloatFunctionConfig.f2)
}

// float amount2 = 4 [json_name = "amount2"];
inline void Comb2FloatFunctionConfig::clear_amount2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Comb2FloatFunctionConfig::amount2() const {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.Comb2FloatFunctionConfig.amount2)
  return _internal_amount2();
}
inline void Comb2FloatFunctionConfig::set_amount2(float value) {
  _internal_set_amount2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:kivsee.proto.render.v1.Comb2FloatFunctionConfig.amount2)
}
inline float Comb2FloatFunctionConfig::_internal_amount2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount2_;
}
inline void Comb2FloatFunctionConfig::_internal_set_amount2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount2_ = value;
}

// -------------------------------------------------------------------

// FloatFunction

// .kivsee.proto.render.v1.ConstValueFloatFunctionConfig const_value = 1 [json_name = "constValue"];
inline bool FloatFunction::has_const_value() const {
  return function_case() == kConstValue;
}
inline bool FloatFunction::_internal_has_const_value() const {
  return function_case() == kConstValue;
}
inline void FloatFunction::set_has_const_value() {
  _impl_._oneof_case_[0] = kConstValue;
}
inline void FloatFunction::clear_const_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (function_case() == kConstValue) {
    if (GetArena() == nullptr) {
      delete _impl_.function_.const_value_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.function_.const_value_);
    }
    clear_has_function();
  }
}
inline ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::release_const_value() {
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.FloatFunction.const_value)
  if (function_case() == kConstValue) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::ConstValueFloatFunctionConfig*>(_impl_.function_.const_value_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.function_.const_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig& FloatFunction::_internal_const_value() const {
  return function_case() == kConstValue ? *reinterpret_cast<::kivsee::proto::render::v1::ConstValueFloatFunctionConfig*>(_impl_.function_.const_value_) : reinterpret_cast<::kivsee::proto::render::v1::ConstValueFloatFunctionConfig&>(::kivsee::proto::render::v1::_ConstValueFloatFunctionConfig_default_instance_);
}
inline const ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig& FloatFunction::const_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.FloatFunction.const_value)
  return _internal_const_value();
}
inline ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::unsafe_arena_release_const_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kivsee.proto.render.v1.FloatFunction.const_value)
  if (function_case() == kConstValue) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::ConstValueFloatFunctionConfig*>(_impl_.function_.const_value_);
    _impl_.function_.const_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FloatFunction::unsafe_arena_set_allocated_const_value(
    ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_function();
  if (value) {
    set_has_const_value();
    _impl_.function_.const_value_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.FloatFunction.const_value)
}
inline ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::_internal_mutable_const_value() {
  if (function_case() != kConstValue) {
    clear_function();
    set_has_const_value();
    _impl_.function_.const_value_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::ConstValueFloatFunctionConfig>(GetArena()));
  }
  return reinterpret_cast<::kivsee::proto::render::v1::ConstValueFloatFunctionConfig*>(_impl_.function_.const_value_);
}
inline ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::mutable_const_value()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kivsee::proto::render::v1::ConstValueFloatFunctionConfig* _msg = _internal_mutable_const_value();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.FloatFunction.const_value)
  return _msg;
}

// .kivsee.proto.render.v1.LinearFloatFunctionConfig linear = 2 [json_name = "linear"];
inline bool FloatFunction::has_linear() const {
  return function_case() == kLinear;
}
inline bool FloatFunction::_internal_has_linear() const {
  return function_case() == kLinear;
}
inline void FloatFunction::set_has_linear() {
  _impl_._oneof_case_[0] = kLinear;
}
inline void FloatFunction::clear_linear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (function_case() == kLinear) {
    if (GetArena() == nullptr) {
      delete _impl_.function_.linear_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.function_.linear_);
    }
    clear_has_function();
  }
}
inline ::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::release_linear() {
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.FloatFunction.linear)
  if (function_case() == kLinear) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::LinearFloatFunctionConfig*>(_impl_.function_.linear_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.function_.linear_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kivsee::proto::render::v1::LinearFloatFunctionConfig& FloatFunction::_internal_linear() const {
  return function_case() == kLinear ? *reinterpret_cast<::kivsee::proto::render::v1::LinearFloatFunctionConfig*>(_impl_.function_.linear_) : reinterpret_cast<::kivsee::proto::render::v1::LinearFloatFunctionConfig&>(::kivsee::proto::render::v1::_LinearFloatFunctionConfig_default_instance_);
}
inline const ::kivsee::proto::render::v1::LinearFloatFunctionConfig& FloatFunction::linear() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.FloatFunction.linear)
  return _internal_linear();
}
inline ::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::unsafe_arena_release_linear() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kivsee.proto.render.v1.FloatFunction.linear)
  if (function_case() == kLinear) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::LinearFloatFunctionConfig*>(_impl_.function_.linear_);
    _impl_.function_.linear_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FloatFunction::unsafe_arena_set_allocated_linear(
    ::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_function();
  if (value) {
    set_has_linear();
    _impl_.function_.linear_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.FloatFunction.linear)
}
inline ::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::_internal_mutable_linear() {
  if (function_case() != kLinear) {
    clear_function();
    set_has_linear();
    _impl_.function_.linear_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::LinearFloatFunctionConfig>(GetArena()));
  }
  return reinterpret_cast<::kivsee::proto::render::v1::LinearFloatFunctionConfig*>(_impl_.function_.linear_);
}
inline ::kivsee::proto::render::v1::LinearFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::mutable_linear()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kivsee::proto::render::v1::LinearFloatFunctionConfig* _msg = _internal_mutable_linear();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.FloatFunction.linear)
  return _msg;
}

// .kivsee.proto.render.v1.SinFloatFunctionConfig sin = 3 [json_name = "sin"];
inline bool FloatFunction::has_sin() const {
  return function_case() == kSin;
}
inline bool FloatFunction::_internal_has_sin() const {
  return function_case() == kSin;
}
inline void FloatFunction::set_has_sin() {
  _impl_._oneof_case_[0] = kSin;
}
inline void FloatFunction::clear_sin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (function_case() == kSin) {
    if (GetArena() == nullptr) {
      delete _impl_.function_.sin_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.function_.sin_);
    }
    clear_has_function();
  }
}
inline ::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::release_sin() {
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.FloatFunction.sin)
  if (function_case() == kSin) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::SinFloatFunctionConfig*>(_impl_.function_.sin_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.function_.sin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kivsee::proto::render::v1::SinFloatFunctionConfig& FloatFunction::_internal_sin() const {
  return function_case() == kSin ? *reinterpret_cast<::kivsee::proto::render::v1::SinFloatFunctionConfig*>(_impl_.function_.sin_) : reinterpret_cast<::kivsee::proto::render::v1::SinFloatFunctionConfig&>(::kivsee::proto::render::v1::_SinFloatFunctionConfig_default_instance_);
}
inline const ::kivsee::proto::render::v1::SinFloatFunctionConfig& FloatFunction::sin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.FloatFunction.sin)
  return _internal_sin();
}
inline ::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::unsafe_arena_release_sin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kivsee.proto.render.v1.FloatFunction.sin)
  if (function_case() == kSin) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::SinFloatFunctionConfig*>(_impl_.function_.sin_);
    _impl_.function_.sin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FloatFunction::unsafe_arena_set_allocated_sin(
    ::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_function();
  if (value) {
    set_has_sin();
    _impl_.function_.sin_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.FloatFunction.sin)
}
inline ::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::_internal_mutable_sin() {
  if (function_case() != kSin) {
    clear_function();
    set_has_sin();
    _impl_.function_.sin_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::SinFloatFunctionConfig>(GetArena()));
  }
  return reinterpret_cast<::kivsee::proto::render::v1::SinFloatFunctionConfig*>(_impl_.function_.sin_);
}
inline ::kivsee::proto::render::v1::SinFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::mutable_sin()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kivsee::proto::render::v1::SinFloatFunctionConfig* _msg = _internal_mutable_sin();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.FloatFunction.sin)
  return _msg;
}

// .kivsee.proto.render.v1.StepsFloatFunctionConfig steps = 4 [json_name = "steps"];
inline bool FloatFunction::has_steps() const {
  return function_case() == kSteps;
}
inline bool FloatFunction::_internal_has_steps() const {
  return function_case() == kSteps;
}
inline void FloatFunction::set_has_steps() {
  _impl_._oneof_case_[0] = kSteps;
}
inline void FloatFunction::clear_steps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (function_case() == kSteps) {
    if (GetArena() == nullptr) {
      delete _impl_.function_.steps_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.function_.steps_);
    }
    clear_has_function();
  }
}
inline ::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::release_steps() {
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.FloatFunction.steps)
  if (function_case() == kSteps) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::StepsFloatFunctionConfig*>(_impl_.function_.steps_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.function_.steps_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kivsee::proto::render::v1::StepsFloatFunctionConfig& FloatFunction::_internal_steps() const {
  return function_case() == kSteps ? *reinterpret_cast<::kivsee::proto::render::v1::StepsFloatFunctionConfig*>(_impl_.function_.steps_) : reinterpret_cast<::kivsee::proto::render::v1::StepsFloatFunctionConfig&>(::kivsee::proto::render::v1::_StepsFloatFunctionConfig_default_instance_);
}
inline const ::kivsee::proto::render::v1::StepsFloatFunctionConfig& FloatFunction::steps() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.FloatFunction.steps)
  return _internal_steps();
}
inline ::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::unsafe_arena_release_steps() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kivsee.proto.render.v1.FloatFunction.steps)
  if (function_case() == kSteps) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::StepsFloatFunctionConfig*>(_impl_.function_.steps_);
    _impl_.function_.steps_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FloatFunction::unsafe_arena_set_allocated_steps(
    ::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_function();
  if (value) {
    set_has_steps();
    _impl_.function_.steps_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.FloatFunction.steps)
}
inline ::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::_internal_mutable_steps() {
  if (function_case() != kSteps) {
    clear_function();
    set_has_steps();
    _impl_.function_.steps_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::StepsFloatFunctionConfig>(GetArena()));
  }
  return reinterpret_cast<::kivsee::proto::render::v1::StepsFloatFunctionConfig*>(_impl_.function_.steps_);
}
inline ::kivsee::proto::render::v1::StepsFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::mutable_steps()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kivsee::proto::render::v1::StepsFloatFunctionConfig* _msg = _internal_mutable_steps();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.FloatFunction.steps)
  return _msg;
}

// .kivsee.proto.render.v1.RepeatFloatFunctionConfig repeat = 5 [json_name = "repeat"];
inline bool FloatFunction::has_repeat() const {
  return function_case() == kRepeat;
}
inline bool FloatFunction::_internal_has_repeat() const {
  return function_case() == kRepeat;
}
inline void FloatFunction::set_has_repeat() {
  _impl_._oneof_case_[0] = kRepeat;
}
inline void FloatFunction::clear_repeat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (function_case() == kRepeat) {
    if (GetArena() == nullptr) {
      delete _impl_.function_.repeat_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.function_.repeat_);
    }
    clear_has_function();
  }
}
inline ::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::release_repeat() {
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.FloatFunction.repeat)
  if (function_case() == kRepeat) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::RepeatFloatFunctionConfig*>(_impl_.function_.repeat_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.function_.repeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kivsee::proto::render::v1::RepeatFloatFunctionConfig& FloatFunction::_internal_repeat() const {
  return function_case() == kRepeat ? *reinterpret_cast<::kivsee::proto::render::v1::RepeatFloatFunctionConfig*>(_impl_.function_.repeat_) : reinterpret_cast<::kivsee::proto::render::v1::RepeatFloatFunctionConfig&>(::kivsee::proto::render::v1::_RepeatFloatFunctionConfig_default_instance_);
}
inline const ::kivsee::proto::render::v1::RepeatFloatFunctionConfig& FloatFunction::repeat() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.FloatFunction.repeat)
  return _internal_repeat();
}
inline ::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::unsafe_arena_release_repeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kivsee.proto.render.v1.FloatFunction.repeat)
  if (function_case() == kRepeat) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::RepeatFloatFunctionConfig*>(_impl_.function_.repeat_);
    _impl_.function_.repeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FloatFunction::unsafe_arena_set_allocated_repeat(
    ::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_function();
  if (value) {
    set_has_repeat();
    _impl_.function_.repeat_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.FloatFunction.repeat)
}
inline ::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::_internal_mutable_repeat() {
  if (function_case() != kRepeat) {
    clear_function();
    set_has_repeat();
    _impl_.function_.repeat_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::RepeatFloatFunctionConfig>(GetArena()));
  }
  return reinterpret_cast<::kivsee::proto::render::v1::RepeatFloatFunctionConfig*>(_impl_.function_.repeat_);
}
inline ::kivsee::proto::render::v1::RepeatFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::mutable_repeat()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kivsee::proto::render::v1::RepeatFloatFunctionConfig* _msg = _internal_mutable_repeat();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.FloatFunction.repeat)
  return _msg;
}

// .kivsee.proto.render.v1.HalfFloatFunctionConfig half = 6 [json_name = "half"];
inline bool FloatFunction::has_half() const {
  return function_case() == kHalf;
}
inline bool FloatFunction::_internal_has_half() const {
  return function_case() == kHalf;
}
inline void FloatFunction::set_has_half() {
  _impl_._oneof_case_[0] = kHalf;
}
inline void FloatFunction::clear_half() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (function_case() == kHalf) {
    if (GetArena() == nullptr) {
      delete _impl_.function_.half_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.function_.half_);
    }
    clear_has_function();
  }
}
inline ::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::release_half() {
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.FloatFunction.half)
  if (function_case() == kHalf) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::HalfFloatFunctionConfig*>(_impl_.function_.half_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.function_.half_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kivsee::proto::render::v1::HalfFloatFunctionConfig& FloatFunction::_internal_half() const {
  return function_case() == kHalf ? *reinterpret_cast<::kivsee::proto::render::v1::HalfFloatFunctionConfig*>(_impl_.function_.half_) : reinterpret_cast<::kivsee::proto::render::v1::HalfFloatFunctionConfig&>(::kivsee::proto::render::v1::_HalfFloatFunctionConfig_default_instance_);
}
inline const ::kivsee::proto::render::v1::HalfFloatFunctionConfig& FloatFunction::half() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.FloatFunction.half)
  return _internal_half();
}
inline ::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::unsafe_arena_release_half() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kivsee.proto.render.v1.FloatFunction.half)
  if (function_case() == kHalf) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::HalfFloatFunctionConfig*>(_impl_.function_.half_);
    _impl_.function_.half_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FloatFunction::unsafe_arena_set_allocated_half(
    ::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_function();
  if (value) {
    set_has_half();
    _impl_.function_.half_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.FloatFunction.half)
}
inline ::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::_internal_mutable_half() {
  if (function_case() != kHalf) {
    clear_function();
    set_has_half();
    _impl_.function_.half_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::HalfFloatFunctionConfig>(GetArena()));
  }
  return reinterpret_cast<::kivsee::proto::render::v1::HalfFloatFunctionConfig*>(_impl_.function_.half_);
}
inline ::kivsee::proto::render::v1::HalfFloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::mutable_half()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kivsee::proto::render::v1::HalfFloatFunctionConfig* _msg = _internal_mutable_half();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.FloatFunction.half)
  return _msg;
}

// .kivsee.proto.render.v1.Comb2FloatFunctionConfig comb2 = 7 [json_name = "comb2"];
inline bool FloatFunction::has_comb2() const {
  return function_case() == kComb2;
}
inline bool FloatFunction::_internal_has_comb2() const {
  return function_case() == kComb2;
}
inline void FloatFunction::set_has_comb2() {
  _impl_._oneof_case_[0] = kComb2;
}
inline void FloatFunction::clear_comb2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (function_case() == kComb2) {
    if (GetArena() == nullptr) {
      delete _impl_.function_.comb2_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.function_.comb2_);
    }
    clear_has_function();
  }
}
inline ::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::release_comb2() {
  // @@protoc_insertion_point(field_release:kivsee.proto.render.v1.FloatFunction.comb2)
  if (function_case() == kComb2) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::Comb2FloatFunctionConfig*>(_impl_.function_.comb2_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.function_.comb2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kivsee::proto::render::v1::Comb2FloatFunctionConfig& FloatFunction::_internal_comb2() const {
  return function_case() == kComb2 ? *reinterpret_cast<::kivsee::proto::render::v1::Comb2FloatFunctionConfig*>(_impl_.function_.comb2_) : reinterpret_cast<::kivsee::proto::render::v1::Comb2FloatFunctionConfig&>(::kivsee::proto::render::v1::_Comb2FloatFunctionConfig_default_instance_);
}
inline const ::kivsee::proto::render::v1::Comb2FloatFunctionConfig& FloatFunction::comb2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kivsee.proto.render.v1.FloatFunction.comb2)
  return _internal_comb2();
}
inline ::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NULLABLE FloatFunction::unsafe_arena_release_comb2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kivsee.proto.render.v1.FloatFunction.comb2)
  if (function_case() == kComb2) {
    clear_has_function();
    auto* temp = reinterpret_cast<::kivsee::proto::render::v1::Comb2FloatFunctionConfig*>(_impl_.function_.comb2_);
    _impl_.function_.comb2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FloatFunction::unsafe_arena_set_allocated_comb2(
    ::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_function();
  if (value) {
    set_has_comb2();
    _impl_.function_.comb2_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kivsee.proto.render.v1.FloatFunction.comb2)
}
inline ::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::_internal_mutable_comb2() {
  if (function_case() != kComb2) {
    clear_function();
    set_has_comb2();
    _impl_.function_.comb2_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::kivsee::proto::render::v1::Comb2FloatFunctionConfig>(GetArena()));
  }
  return reinterpret_cast<::kivsee::proto::render::v1::Comb2FloatFunctionConfig*>(_impl_.function_.comb2_);
}
inline ::kivsee::proto::render::v1::Comb2FloatFunctionConfig* PROTOBUF_NONNULL FloatFunction::mutable_comb2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kivsee::proto::render::v1::Comb2FloatFunctionConfig* _msg = _internal_mutable_comb2();
  // @@protoc_insertion_point(field_mutable:kivsee.proto.render.v1.FloatFunction.comb2)
  return _msg;
}

inline bool FloatFunction::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void FloatFunction::clear_has_function() {
  _impl_._oneof_case_[0] = FUNCTION_NOT_SET;
}
inline FloatFunction::FunctionCase FloatFunction::function_case() const {
  return FloatFunction::FunctionCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace render
}  // namespace proto
}  // namespace kivsee


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto_2epb_2eh
