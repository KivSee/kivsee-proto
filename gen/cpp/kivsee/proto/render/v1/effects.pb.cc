// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kivsee/proto/render/v1/effects.proto
// Protobuf C++ Version: 6.31.0

#include "kivsee/proto/render/v1/effects.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kivsee {
namespace proto {
namespace render {
namespace v1 {

inline constexpr HSV::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hue_{0},
        sat_{0},
        val_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HSV::HSV(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(HSV_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HSVDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HSVDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HSVDefaultTypeInternal() {}
  union {
    HSV _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HSVDefaultTypeInternal _HSV_default_instance_;

inline constexpr EffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        segments_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_time_{0u},
        end_time_{0u},
        repeat_num_{0},
        repeat_start_{0},
        repeat_end_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EffectConfig::EffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EffectConfigDefaultTypeInternal() {}
  union {
    EffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EffectConfigDefaultTypeInternal _EffectConfig_default_instance_;

inline constexpr ConstColorEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ConstColorEffectConfig::ConstColorEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConstColorEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConstColorEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConstColorEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConstColorEffectConfigDefaultTypeInternal() {}
  union {
    ConstColorEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConstColorEffectConfigDefaultTypeInternal _ConstColorEffectConfig_default_instance_;

inline constexpr TimedSaturationEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TimedSaturationEffectConfig::TimedSaturationEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TimedSaturationEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TimedSaturationEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimedSaturationEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimedSaturationEffectConfigDefaultTypeInternal() {}
  union {
    TimedSaturationEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimedSaturationEffectConfigDefaultTypeInternal _TimedSaturationEffectConfig_default_instance_;

inline constexpr TimedHueEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        offset_factor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TimedHueEffectConfig::TimedHueEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TimedHueEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TimedHueEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimedHueEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimedHueEffectConfigDefaultTypeInternal() {}
  union {
    TimedHueEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimedHueEffectConfigDefaultTypeInternal _TimedHueEffectConfig_default_instance_;

inline constexpr TimedBrightnessEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TimedBrightnessEffectConfig::TimedBrightnessEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TimedBrightnessEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TimedBrightnessEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimedBrightnessEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimedBrightnessEffectConfigDefaultTypeInternal() {}
  union {
    TimedBrightnessEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimedBrightnessEffectConfigDefaultTypeInternal _TimedBrightnessEffectConfig_default_instance_;

inline constexpr SnakeSaturationEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        head_{nullptr},
        tail_length_{nullptr},
        cyclic_{false},
        repeat_num_{0},
        mult_factor_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR SnakeSaturationEffectConfig::SnakeSaturationEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SnakeSaturationEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SnakeSaturationEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnakeSaturationEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnakeSaturationEffectConfigDefaultTypeInternal() {}
  union {
    SnakeSaturationEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnakeSaturationEffectConfigDefaultTypeInternal _SnakeSaturationEffectConfig_default_instance_;

inline constexpr SnakeHueEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        head_{nullptr},
        tail_length_{nullptr},
        offset_factor_{nullptr},
        cyclic_{false},
        repeat_num_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SnakeHueEffectConfig::SnakeHueEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SnakeHueEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SnakeHueEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnakeHueEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnakeHueEffectConfigDefaultTypeInternal() {}
  union {
    SnakeHueEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnakeHueEffectConfigDefaultTypeInternal _SnakeHueEffectConfig_default_instance_;

inline constexpr SnakeEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        head_{nullptr},
        tail_length_{nullptr},
        cyclic_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SnakeEffectConfig::SnakeEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SnakeEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SnakeEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnakeEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnakeEffectConfigDefaultTypeInternal() {}
  union {
    SnakeEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnakeEffectConfigDefaultTypeInternal _SnakeEffectConfig_default_instance_;

inline constexpr SnakeBrightnessEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        head_{nullptr},
        tail_length_{nullptr},
        cyclic_{false},
        repeat_num_{0},
        mult_factor_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR SnakeBrightnessEffectConfig::SnakeBrightnessEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SnakeBrightnessEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SnakeBrightnessEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnakeBrightnessEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnakeBrightnessEffectConfigDefaultTypeInternal() {}
  union {
    SnakeBrightnessEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnakeBrightnessEffectConfigDefaultTypeInternal _SnakeBrightnessEffectConfig_default_instance_;

inline constexpr SaturationEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mult_factor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SaturationEffectConfig::SaturationEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SaturationEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SaturationEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaturationEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaturationEffectConfigDefaultTypeInternal() {}
  union {
    SaturationEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaturationEffectConfigDefaultTypeInternal _SaturationEffectConfig_default_instance_;

inline constexpr RainbowEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hue_start_{nullptr},
        hue_end_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RainbowEffectConfig::RainbowEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RainbowEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RainbowEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RainbowEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RainbowEffectConfigDefaultTypeInternal() {}
  union {
    RainbowEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RainbowEffectConfigDefaultTypeInternal _RainbowEffectConfig_default_instance_;

inline constexpr PositionSaturationEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR PositionSaturationEffectConfig::PositionSaturationEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PositionSaturationEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionSaturationEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionSaturationEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionSaturationEffectConfigDefaultTypeInternal() {}
  union {
    PositionSaturationEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionSaturationEffectConfigDefaultTypeInternal _PositionSaturationEffectConfig_default_instance_;

inline constexpr PositionHueEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        offset_factor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PositionHueEffectConfig::PositionHueEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PositionHueEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionHueEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionHueEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionHueEffectConfigDefaultTypeInternal() {}
  union {
    PositionHueEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionHueEffectConfigDefaultTypeInternal _PositionHueEffectConfig_default_instance_;

inline constexpr PositionBrightnessEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR PositionBrightnessEffectConfig::PositionBrightnessEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PositionBrightnessEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionBrightnessEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionBrightnessEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionBrightnessEffectConfigDefaultTypeInternal() {}
  union {
    PositionBrightnessEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionBrightnessEffectConfigDefaultTypeInternal _PositionBrightnessEffectConfig_default_instance_;

inline constexpr HueEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        offset_factor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HueEffectConfig::HueEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(HueEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HueEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HueEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HueEffectConfigDefaultTypeInternal() {}
  union {
    HueEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HueEffectConfigDefaultTypeInternal _HueEffectConfig_default_instance_;

inline constexpr BrightnessEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mult_factor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BrightnessEffectConfig::BrightnessEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(BrightnessEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BrightnessEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrightnessEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrightnessEffectConfigDefaultTypeInternal() {}
  union {
    BrightnessEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrightnessEffectConfigDefaultTypeInternal _BrightnessEffectConfig_default_instance_;

inline constexpr EffectProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        effect_config_{nullptr},
        effect_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR EffectProto::EffectProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EffectProto_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EffectProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EffectProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EffectProtoDefaultTypeInternal() {}
  union {
    EffectProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EffectProtoDefaultTypeInternal _EffectProto_default_instance_;

inline constexpr AnimationProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        effects_{},
        duration_ms_{0u},
        num_repeats_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR AnimationProto::AnimationProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AnimationProto_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AnimationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimationProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimationProtoDefaultTypeInternal() {}
  union {
    AnimationProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimationProtoDefaultTypeInternal _AnimationProto_default_instance_;
}  // namespace v1
}  // namespace render
}  // namespace proto
}  // namespace kivsee
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_kivsee_2fproto_2frender_2fv1_2feffects_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_kivsee_2fproto_2frender_2fv1_2feffects_2eproto = nullptr;
const ::uint32_t
    TableStruct_kivsee_2fproto_2frender_2fv1_2feffects_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HSV, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HSV, _impl_.hue_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HSV, _impl_.sat_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HSV, _impl_.val_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::ConstColorEffectConfig, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::ConstColorEffectConfig, _impl_.color_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::RainbowEffectConfig, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::RainbowEffectConfig, _impl_.hue_start_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::RainbowEffectConfig, _impl_.hue_end_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::BrightnessEffectConfig, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::BrightnessEffectConfig, _impl_.mult_factor_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HueEffectConfig, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HueEffectConfig, _impl_.offset_factor_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SaturationEffectConfig, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SaturationEffectConfig, _impl_.mult_factor_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeEffectConfig, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeEffectConfig, _impl_.head_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeEffectConfig, _impl_.tail_length_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeEffectConfig, _impl_.cyclic_),
        0,
        1,
        2,
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::TimedBrightnessEffectConfig, _impl_._oneof_case_[0]),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::TimedBrightnessEffectConfig, _impl_.mult_factor_),
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::TimedHueEffectConfig, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::TimedHueEffectConfig, _impl_.offset_factor_),
        0,
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::TimedSaturationEffectConfig, _impl_._oneof_case_[0]),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::TimedSaturationEffectConfig, _impl_.mult_factor_),
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::PositionBrightnessEffectConfig, _impl_._oneof_case_[0]),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::PositionBrightnessEffectConfig, _impl_.mult_factor_),
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::PositionHueEffectConfig, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::PositionHueEffectConfig, _impl_.offset_factor_),
        0,
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::PositionSaturationEffectConfig, _impl_._oneof_case_[0]),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::PositionSaturationEffectConfig, _impl_.mult_factor_),
        0x085, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeBrightnessEffectConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeBrightnessEffectConfig, _impl_._oneof_case_[0]),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeBrightnessEffectConfig, _impl_.head_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeBrightnessEffectConfig, _impl_.tail_length_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeBrightnessEffectConfig, _impl_.cyclic_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeBrightnessEffectConfig, _impl_.repeat_num_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeBrightnessEffectConfig, _impl_.mult_factor_),
        0,
        1,
        2,
        3,
        ~0u,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeHueEffectConfig, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeHueEffectConfig, _impl_.head_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeHueEffectConfig, _impl_.tail_length_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeHueEffectConfig, _impl_.cyclic_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeHueEffectConfig, _impl_.repeat_num_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeHueEffectConfig, _impl_.offset_factor_),
        0,
        1,
        3,
        4,
        2,
        0x085, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeSaturationEffectConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeSaturationEffectConfig, _impl_._oneof_case_[0]),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeSaturationEffectConfig, _impl_.head_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeSaturationEffectConfig, _impl_.tail_length_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeSaturationEffectConfig, _impl_.cyclic_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeSaturationEffectConfig, _impl_.repeat_num_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeSaturationEffectConfig, _impl_.mult_factor_),
        0,
        1,
        2,
        3,
        ~0u,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.end_time_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.segments_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.repeat_num_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.repeat_start_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.repeat_end_),
        1,
        2,
        0,
        3,
        4,
        5,
        0x085, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectProto, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectProto, _impl_._oneof_case_[0]),
        21, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectProto, _impl_.effect_config_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectProto, _impl_.effect_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AnimationProto, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AnimationProto, _impl_.effects_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AnimationProto, _impl_.duration_ms_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AnimationProto, _impl_.num_repeats_),
        ~0u,
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::kivsee::proto::render::v1::HSV)},
        {9, sizeof(::kivsee::proto::render::v1::ConstColorEffectConfig)},
        {14, sizeof(::kivsee::proto::render::v1::RainbowEffectConfig)},
        {21, sizeof(::kivsee::proto::render::v1::BrightnessEffectConfig)},
        {26, sizeof(::kivsee::proto::render::v1::HueEffectConfig)},
        {31, sizeof(::kivsee::proto::render::v1::SaturationEffectConfig)},
        {36, sizeof(::kivsee::proto::render::v1::SnakeEffectConfig)},
        {45, sizeof(::kivsee::proto::render::v1::TimedBrightnessEffectConfig)},
        {50, sizeof(::kivsee::proto::render::v1::TimedHueEffectConfig)},
        {55, sizeof(::kivsee::proto::render::v1::TimedSaturationEffectConfig)},
        {60, sizeof(::kivsee::proto::render::v1::PositionBrightnessEffectConfig)},
        {65, sizeof(::kivsee::proto::render::v1::PositionHueEffectConfig)},
        {70, sizeof(::kivsee::proto::render::v1::PositionSaturationEffectConfig)},
        {75, sizeof(::kivsee::proto::render::v1::SnakeBrightnessEffectConfig)},
        {92, sizeof(::kivsee::proto::render::v1::SnakeHueEffectConfig)},
        {105, sizeof(::kivsee::proto::render::v1::SnakeSaturationEffectConfig)},
        {122, sizeof(::kivsee::proto::render::v1::EffectConfig)},
        {137, sizeof(::kivsee::proto::render::v1::EffectProto)},
        {174, sizeof(::kivsee::proto::render::v1::AnimationProto)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::kivsee::proto::render::v1::_HSV_default_instance_._instance,
    &::kivsee::proto::render::v1::_ConstColorEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_RainbowEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_BrightnessEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_HueEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_SaturationEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_SnakeEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_TimedBrightnessEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_TimedHueEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_TimedSaturationEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_PositionBrightnessEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_PositionHueEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_PositionSaturationEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_SnakeBrightnessEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_SnakeHueEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_SnakeSaturationEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_EffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_EffectProto_default_instance_._instance,
    &::kivsee::proto::render::v1::_AnimationProto_default_instance_._instance,
};
const char descriptor_table_protodef_kivsee_2fproto_2frender_2fv1_2feffects_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n$kivsee/proto/render/v1/effects.proto\022\026"
    "kivsee.proto.render.v1\032&kivsee/proto/ren"
    "der/v1/functions.proto\";\n\003HSV\022\020\n\003hue\030\001 \001"
    "(\002R\003hue\022\020\n\003sat\030\002 \001(\002R\003sat\022\020\n\003val\030\003 \001(\002R\003"
    "val\"K\n\026ConstColorEffectConfig\0221\n\005color\030\001"
    " \001(\0132\033.kivsee.proto.render.v1.HSVR\005color"
    "\"\231\001\n\023RainbowEffectConfig\022B\n\thue_start\030\001 "
    "\001(\0132%.kivsee.proto.render.v1.FloatFuncti"
    "onR\010hueStart\022>\n\007hue_end\030\002 \001(\0132%.kivsee.p"
    "roto.render.v1.FloatFunctionR\006hueEnd\"`\n\026"
    "BrightnessEffectConfig\022F\n\013mult_factor\030\001 "
    "\001(\0132%.kivsee.proto.render.v1.FloatFuncti"
    "onR\nmultFactor\"]\n\017HueEffectConfig\022J\n\roff"
    "set_factor\030\001 \001(\0132%.kivsee.proto.render.v"
    "1.FloatFunctionR\014offsetFactor\"`\n\026Saturat"
    "ionEffectConfig\022F\n\013mult_factor\030\001 \001(\0132%.k"
    "ivsee.proto.render.v1.FloatFunctionR\nmul"
    "tFactor\"\256\001\n\021SnakeEffectConfig\0229\n\004head\030\001 "
    "\001(\0132%.kivsee.proto.render.v1.FloatFuncti"
    "onR\004head\022F\n\013tail_length\030\002 \001(\0132%.kivsee.p"
    "roto.render.v1.FloatFunctionR\ntailLength"
    "\022\026\n\006cyclic\030\003 \001(\010R\006cyclic\"\342\001\n\033TimedBright"
    "nessEffectConfig\022Y\n\024mult_factor_increase"
    "\030\001 \001(\0132%.kivsee.proto.render.v1.FloatFun"
    "ctionH\000R\022multFactorIncrease\022Y\n\024mult_fact"
    "or_decrease\030\002 \001(\0132%.kivsee.proto.render."
    "v1.FloatFunctionH\000R\022multFactorDecreaseB\r"
    "\n\013mult_factor\"b\n\024TimedHueEffectConfig\022J\n"
    "\roffset_factor\030\001 \001(\0132%.kivsee.proto.rend"
    "er.v1.FloatFunctionR\014offsetFactor\"\342\001\n\033Ti"
    "medSaturationEffectConfig\022Y\n\024mult_factor"
    "_increase\030\001 \001(\0132%.kivsee.proto.render.v1"
    ".FloatFunctionH\000R\022multFactorIncrease\022Y\n\024"
    "mult_factor_decrease\030\002 \001(\0132%.kivsee.prot"
    "o.render.v1.FloatFunctionH\000R\022multFactorD"
    "ecreaseB\r\n\013mult_factor\"\345\001\n\036PositionBrigh"
    "tnessEffectConfig\022Y\n\024mult_factor_increas"
    "e\030\001 \001(\0132%.kivsee.proto.render.v1.FloatFu"
    "nctionH\000R\022multFactorIncrease\022Y\n\024mult_fac"
    "tor_decrease\030\002 \001(\0132%.kivsee.proto.render"
    ".v1.FloatFunctionH\000R\022multFactorDecreaseB"
    "\r\n\013mult_factor\"e\n\027PositionHueEffectConfi"
    "g\022J\n\roffset_factor\030\001 \001(\0132%.kivsee.proto."
    "render.v1.FloatFunctionR\014offsetFactor\"\345\001"
    "\n\036PositionSaturationEffectConfig\022Y\n\024mult"
    "_factor_increase\030\001 \001(\0132%.kivsee.proto.re"
    "nder.v1.FloatFunctionH\000R\022multFactorIncre"
    "ase\022Y\n\024mult_factor_decrease\030\002 \001(\0132%.kivs"
    "ee.proto.render.v1.FloatFunctionH\000R\022mult"
    "FactorDecreaseB\r\n\013mult_factor\"\234\003\n\033SnakeB"
    "rightnessEffectConfig\0229\n\004head\030\001 \001(\0132%.ki"
    "vsee.proto.render.v1.FloatFunctionR\004head"
    "\022F\n\013tail_length\030\002 \001(\0132%.kivsee.proto.ren"
    "der.v1.FloatFunctionR\ntailLength\022\026\n\006cycl"
    "ic\030\003 \001(\010R\006cyclic\022\035\n\nrepeat_num\030\004 \001(\002R\tre"
    "peatNum\022Y\n\024mult_factor_increase\030\005 \001(\0132%."
    "kivsee.proto.render.v1.FloatFunctionH\000R\022"
    "multFactorIncrease\022Y\n\024mult_factor_decrea"
    "se\030\006 \001(\0132%.kivsee.proto.render.v1.FloatF"
    "unctionH\000R\022multFactorDecreaseB\r\n\013mult_fa"
    "ctor\"\234\002\n\024SnakeHueEffectConfig\0229\n\004head\030\001 "
    "\001(\0132%.kivsee.proto.render.v1.FloatFuncti"
    "onR\004head\022F\n\013tail_length\030\002 \001(\0132%.kivsee.p"
    "roto.render.v1.FloatFunctionR\ntailLength"
    "\022\026\n\006cyclic\030\003 \001(\010R\006cyclic\022\035\n\nrepeat_num\030\004"
    " \001(\002R\trepeatNum\022J\n\roffset_factor\030\005 \001(\0132%"
    ".kivsee.proto.render.v1.FloatFunctionR\014o"
    "ffsetFactor\"\234\003\n\033SnakeSaturationEffectCon"
    "fig\0229\n\004head\030\001 \001(\0132%.kivsee.proto.render."
    "v1.FloatFunctionR\004head\022F\n\013tail_length\030\002 "
    "\001(\0132%.kivsee.proto.render.v1.FloatFuncti"
    "onR\ntailLength\022\026\n\006cyclic\030\003 \001(\010R\006cyclic\022\035"
    "\n\nrepeat_num\030\004 \001(\002R\trepeatNum\022Y\n\024mult_fa"
    "ctor_increase\030\005 \001(\0132%.kivsee.proto.rende"
    "r.v1.FloatFunctionH\000R\022multFactorIncrease"
    "\022Y\n\024mult_factor_decrease\030\006 \001(\0132%.kivsee."
    "proto.render.v1.FloatFunctionH\000R\022multFac"
    "torDecreaseB\r\n\013mult_factor\"\305\001\n\014EffectCon"
    "fig\022\035\n\nstart_time\030\001 \001(\rR\tstartTime\022\031\n\010en"
    "d_time\030\002 \001(\rR\007endTime\022\032\n\010segments\030\003 \001(\tR"
    "\010segments\022\035\n\nrepeat_num\030\004 \001(\002R\trepeatNum"
    "\022!\n\014repeat_start\030\005 \001(\002R\013repeatStart\022\035\n\nr"
    "epeat_end\030\006 \001(\002R\trepeatEnd\"\360\n\n\013EffectPro"
    "to\022I\n\reffect_config\030\001 \001(\0132$.kivsee.proto"
    ".render.v1.EffectConfigR\014effectConfig\022Q\n"
    "\013const_color\030\002 \001(\0132..kivsee.proto.render"
    ".v1.ConstColorEffectConfigH\000R\nconstColor"
    "\022G\n\007rainbow\030\003 \001(\0132+.kivsee.proto.render."
    "v1.RainbowEffectConfigH\000R\007rainbow\022P\n\nbri"
    "ghtness\030\004 \001(\0132..kivsee.proto.render.v1.B"
    "rightnessEffectConfigH\000R\nbrightness\022;\n\003h"
    "ue\030\005 \001(\0132\'.kivsee.proto.render.v1.HueEff"
    "ectConfigH\000R\003hue\022P\n\nsaturation\030\006 \001(\0132..k"
    "ivsee.proto.render.v1.SaturationEffectCo"
    "nfigH\000R\nsaturation\022A\n\005snake\030\007 \001(\0132).kivs"
    "ee.proto.render.v1.SnakeEffectConfigH\000R\005"
    "snake\022`\n\020timed_brightness\030\010 \001(\01323.kivsee"
    ".proto.render.v1.TimedBrightnessEffectCo"
    "nfigH\000R\017timedBrightness\022K\n\ttimed_hue\030\t \001"
    "(\0132,.kivsee.proto.render.v1.TimedHueEffe"
    "ctConfigH\000R\010timedHue\022`\n\020timed_saturation"
    "\030\n \001(\01323.kivsee.proto.render.v1.TimedSat"
    "urationEffectConfigH\000R\017timedSaturation\022i"
    "\n\023position_brightness\030\013 \001(\01326.kivsee.pro"
    "to.render.v1.PositionBrightnessEffectCon"
    "figH\000R\022positionBrightness\022T\n\014position_hu"
    "e\030\014 \001(\0132/.kivsee.proto.render.v1.Positio"
    "nHueEffectConfigH\000R\013positionHue\022i\n\023posit"
    "ion_saturation\030\r \001(\01326.kivsee.proto.rend"
    "er.v1.PositionSaturationEffectConfigH\000R\022"
    "positionSaturation\022`\n\020snake_brightness\030\016"
    " \001(\01323.kivsee.proto.render.v1.SnakeBrigh"
    "tnessEffectConfigH\000R\017snakeBrightness\022K\n\t"
    "snake_hue\030\017 \001(\0132,.kivsee.proto.render.v1"
    ".SnakeHueEffectConfigH\000R\010snakeHue\022`\n\020sna"
    "ke_saturation\030\020 \001(\01323.kivsee.proto.rende"
    "r.v1.SnakeSaturationEffectConfigH\000R\017snak"
    "eSaturationB\010\n\006effect\"\221\001\n\016AnimationProto"
    "\022=\n\007effects\030\001 \003(\0132#.kivsee.proto.render."
    "v1.EffectProtoR\007effects\022\037\n\013duration_ms\030\002"
    " \001(\rR\ndurationMs\022\037\n\013num_repeats\030\003 \001(\rR\nn"
    "umRepeatsb\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto_deps[1] = {
        &::descriptor_table_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto,
};
static ::absl::once_flag descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto = {
    false,
    false,
    4857,
    descriptor_table_protodef_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
    "kivsee/proto/render/v1/effects.proto",
    &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto_once,
    descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto_deps,
    1,
    19,
    schemas,
    file_default_instances,
    TableStruct_kivsee_2fproto_2frender_2fv1_2feffects_2eproto::offsets,
    file_level_enum_descriptors_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
    file_level_service_descriptors_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
};
namespace kivsee {
namespace proto {
namespace render {
namespace v1 {
// ===================================================================

class HSV::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<HSV>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HSV, _impl_._has_bits_);
};

HSV::HSV(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HSV_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.HSV)
}
HSV::HSV(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HSV& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HSV_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE HSV::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void HSV::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, hue_),
           0,
           offsetof(Impl_, val_) -
               offsetof(Impl_, hue_) +
               sizeof(Impl_::val_));
}
HSV::~HSV() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.HSV)
  SharedDtor(*this);
}
inline void HSV::SharedDtor(MessageLite& self) {
  HSV& this_ = static_cast<HSV&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL HSV::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) HSV(arena);
}
constexpr auto HSV::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(HSV),
                                            alignof(HSV));
}
constexpr auto HSV::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_HSV_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &HSV::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<HSV>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &HSV::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<HSV>(), &HSV::ByteSizeLong,
              &HSV::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(HSV, _impl_._cached_size_),
          false,
      },
      &HSV::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull HSV_class_data_ =
        HSV::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
HSV::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&HSV_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(HSV_class_data_.tc_table);
  return HSV_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
HSV::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HSV, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    HSV_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::HSV>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float hue = 1 [json_name = "hue"];
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(HSV, _impl_.hue_)}},
    // float sat = 2 [json_name = "sat"];
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(HSV, _impl_.sat_)}},
    // float val = 3 [json_name = "val"];
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(HSV, _impl_.val_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float hue = 1 [json_name = "hue"];
    {PROTOBUF_FIELD_OFFSET(HSV, _impl_.hue_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float sat = 2 [json_name = "sat"];
    {PROTOBUF_FIELD_OFFSET(HSV, _impl_.sat_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float val = 3 [json_name = "val"];
    {PROTOBUF_FIELD_OFFSET(HSV, _impl_.val_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void HSV::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.HSV)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.hue_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.val_) -
        reinterpret_cast<char*>(&_impl_.hue_)) + sizeof(_impl_.val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL HSV::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const HSV& this_ = static_cast<const HSV&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL HSV::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const HSV& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.HSV)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float hue = 1 [json_name = "hue"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_hue()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          1, this_._internal_hue(), target);
    }
  }

  // float sat = 2 [json_name = "sat"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_sat()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          2, this_._internal_sat(), target);
    }
  }

  // float val = 3 [json_name = "val"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_val()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          3, this_._internal_val(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.HSV)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t HSV::ByteSizeLong(const MessageLite& base) {
  const HSV& this_ = static_cast<const HSV&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t HSV::ByteSizeLong() const {
  const HSV& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.HSV)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // float hue = 1 [json_name = "hue"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_hue()) != 0) {
        total_size += 5;
      }
    }
    // float sat = 2 [json_name = "sat"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_sat()) != 0) {
        total_size += 5;
      }
    }
    // float val = 3 [json_name = "val"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_val()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void HSV::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HSV*>(&to_msg);
  auto& from = static_cast<const HSV&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.HSV)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_hue()) != 0) {
        _this->_impl_.hue_ = from._impl_.hue_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_sat()) != 0) {
        _this->_impl_.sat_ = from._impl_.sat_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_val()) != 0) {
        _this->_impl_.val_ = from._impl_.val_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HSV::CopyFrom(const HSV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.HSV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HSV::InternalSwap(HSV* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HSV, _impl_.val_)
      + sizeof(HSV::_impl_.val_)
      - PROTOBUF_FIELD_OFFSET(HSV, _impl_.hue_)>(
          reinterpret_cast<char*>(&_impl_.hue_),
          reinterpret_cast<char*>(&other->_impl_.hue_));
}

::google::protobuf::Metadata HSV::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConstColorEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConstColorEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConstColorEffectConfig, _impl_._has_bits_);
};

ConstColorEffectConfig::ConstColorEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConstColorEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.ConstColorEffectConfig)
}
PROTOBUF_NDEBUG_INLINE ConstColorEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::ConstColorEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ConstColorEffectConfig::ConstColorEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConstColorEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConstColorEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConstColorEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.color_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.color_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.ConstColorEffectConfig)
}
PROTOBUF_NDEBUG_INLINE ConstColorEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void ConstColorEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.color_ = {};
}
ConstColorEffectConfig::~ConstColorEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.ConstColorEffectConfig)
  SharedDtor(*this);
}
inline void ConstColorEffectConfig::SharedDtor(MessageLite& self) {
  ConstColorEffectConfig& this_ = static_cast<ConstColorEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.color_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConstColorEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConstColorEffectConfig(arena);
}
constexpr auto ConstColorEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ConstColorEffectConfig),
                                            alignof(ConstColorEffectConfig));
}
constexpr auto ConstColorEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConstColorEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConstColorEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConstColorEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConstColorEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConstColorEffectConfig>(), &ConstColorEffectConfig::ByteSizeLong,
              &ConstColorEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConstColorEffectConfig, _impl_._cached_size_),
          false,
      },
      &ConstColorEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConstColorEffectConfig_class_data_ =
        ConstColorEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConstColorEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConstColorEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConstColorEffectConfig_class_data_.tc_table);
  return ConstColorEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ConstColorEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConstColorEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ConstColorEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::ConstColorEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.HSV color = 1 [json_name = "color"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConstColorEffectConfig, _impl_.color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.HSV color = 1 [json_name = "color"];
    {PROTOBUF_FIELD_OFFSET(ConstColorEffectConfig, _impl_.color_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::HSV>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ConstColorEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.ConstColorEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.color_ != nullptr);
    _impl_.color_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConstColorEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConstColorEffectConfig& this_ = static_cast<const ConstColorEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConstColorEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConstColorEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.ConstColorEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.HSV color = 1 [json_name = "color"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.color_, this_._impl_.color_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.ConstColorEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConstColorEffectConfig::ByteSizeLong(const MessageLite& base) {
  const ConstColorEffectConfig& this_ = static_cast<const ConstColorEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConstColorEffectConfig::ByteSizeLong() const {
  const ConstColorEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.ConstColorEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.HSV color = 1 [json_name = "color"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.color_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConstColorEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConstColorEffectConfig*>(&to_msg);
  auto& from = static_cast<const ConstColorEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.ConstColorEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.color_ != nullptr);
    if (_this->_impl_.color_ == nullptr) {
      _this->_impl_.color_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.color_);
    } else {
      _this->_impl_.color_->MergeFrom(*from._impl_.color_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConstColorEffectConfig::CopyFrom(const ConstColorEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.ConstColorEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConstColorEffectConfig::InternalSwap(ConstColorEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.color_, other->_impl_.color_);
}

::google::protobuf::Metadata ConstColorEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RainbowEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RainbowEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_._has_bits_);
};

void RainbowEffectConfig::clear_hue_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hue_start_ != nullptr) _impl_.hue_start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RainbowEffectConfig::clear_hue_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hue_end_ != nullptr) _impl_.hue_end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RainbowEffectConfig::RainbowEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RainbowEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.RainbowEffectConfig)
}
PROTOBUF_NDEBUG_INLINE RainbowEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::RainbowEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RainbowEffectConfig::RainbowEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RainbowEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RainbowEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RainbowEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.hue_start_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hue_start_)
                : nullptr;
  _impl_.hue_end_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hue_end_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.RainbowEffectConfig)
}
PROTOBUF_NDEBUG_INLINE RainbowEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RainbowEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, hue_start_),
           0,
           offsetof(Impl_, hue_end_) -
               offsetof(Impl_, hue_start_) +
               sizeof(Impl_::hue_end_));
}
RainbowEffectConfig::~RainbowEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.RainbowEffectConfig)
  SharedDtor(*this);
}
inline void RainbowEffectConfig::SharedDtor(MessageLite& self) {
  RainbowEffectConfig& this_ = static_cast<RainbowEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.hue_start_;
  delete this_._impl_.hue_end_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RainbowEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RainbowEffectConfig(arena);
}
constexpr auto RainbowEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RainbowEffectConfig),
                                            alignof(RainbowEffectConfig));
}
constexpr auto RainbowEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RainbowEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RainbowEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RainbowEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RainbowEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RainbowEffectConfig>(), &RainbowEffectConfig::ByteSizeLong,
              &RainbowEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_._cached_size_),
          false,
      },
      &RainbowEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RainbowEffectConfig_class_data_ =
        RainbowEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RainbowEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RainbowEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RainbowEffectConfig_class_data_.tc_table);
  return RainbowEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
RainbowEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RainbowEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::RainbowEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction hue_end = 2 [json_name = "hueEnd"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_end_)}},
    // .kivsee.proto.render.v1.FloatFunction hue_start = 1 [json_name = "hueStart"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_start_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction hue_start = 1 [json_name = "hueStart"];
    {PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_start_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction hue_end = 2 [json_name = "hueEnd"];
    {PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_end_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RainbowEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.RainbowEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.hue_start_ != nullptr);
      _impl_.hue_start_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.hue_end_ != nullptr);
      _impl_.hue_end_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RainbowEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RainbowEffectConfig& this_ = static_cast<const RainbowEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RainbowEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RainbowEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.RainbowEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction hue_start = 1 [json_name = "hueStart"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.hue_start_, this_._impl_.hue_start_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction hue_end = 2 [json_name = "hueEnd"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.hue_end_, this_._impl_.hue_end_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.RainbowEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RainbowEffectConfig::ByteSizeLong(const MessageLite& base) {
  const RainbowEffectConfig& this_ = static_cast<const RainbowEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RainbowEffectConfig::ByteSizeLong() const {
  const RainbowEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.RainbowEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .kivsee.proto.render.v1.FloatFunction hue_start = 1 [json_name = "hueStart"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hue_start_);
    }
    // .kivsee.proto.render.v1.FloatFunction hue_end = 2 [json_name = "hueEnd"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hue_end_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RainbowEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RainbowEffectConfig*>(&to_msg);
  auto& from = static_cast<const RainbowEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.RainbowEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.hue_start_ != nullptr);
      if (_this->_impl_.hue_start_ == nullptr) {
        _this->_impl_.hue_start_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hue_start_);
      } else {
        _this->_impl_.hue_start_->MergeFrom(*from._impl_.hue_start_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.hue_end_ != nullptr);
      if (_this->_impl_.hue_end_ == nullptr) {
        _this->_impl_.hue_end_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hue_end_);
      } else {
        _this->_impl_.hue_end_->MergeFrom(*from._impl_.hue_end_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RainbowEffectConfig::CopyFrom(const RainbowEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.RainbowEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RainbowEffectConfig::InternalSwap(RainbowEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_end_)
      + sizeof(RainbowEffectConfig::_impl_.hue_end_)
      - PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_start_)>(
          reinterpret_cast<char*>(&_impl_.hue_start_),
          reinterpret_cast<char*>(&other->_impl_.hue_start_));
}

::google::protobuf::Metadata RainbowEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BrightnessEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<BrightnessEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BrightnessEffectConfig, _impl_._has_bits_);
};

void BrightnessEffectConfig::clear_mult_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mult_factor_ != nullptr) _impl_.mult_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BrightnessEffectConfig::BrightnessEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BrightnessEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.BrightnessEffectConfig)
}
PROTOBUF_NDEBUG_INLINE BrightnessEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::BrightnessEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BrightnessEffectConfig::BrightnessEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const BrightnessEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BrightnessEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BrightnessEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.mult_factor_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.BrightnessEffectConfig)
}
PROTOBUF_NDEBUG_INLINE BrightnessEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void BrightnessEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mult_factor_ = {};
}
BrightnessEffectConfig::~BrightnessEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.BrightnessEffectConfig)
  SharedDtor(*this);
}
inline void BrightnessEffectConfig::SharedDtor(MessageLite& self) {
  BrightnessEffectConfig& this_ = static_cast<BrightnessEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.mult_factor_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL BrightnessEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) BrightnessEffectConfig(arena);
}
constexpr auto BrightnessEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(BrightnessEffectConfig),
                                            alignof(BrightnessEffectConfig));
}
constexpr auto BrightnessEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_BrightnessEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &BrightnessEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<BrightnessEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &BrightnessEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<BrightnessEffectConfig>(), &BrightnessEffectConfig::ByteSizeLong,
              &BrightnessEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(BrightnessEffectConfig, _impl_._cached_size_),
          false,
      },
      &BrightnessEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull BrightnessEffectConfig_class_data_ =
        BrightnessEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
BrightnessEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&BrightnessEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(BrightnessEffectConfig_class_data_.tc_table);
  return BrightnessEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
BrightnessEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BrightnessEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    BrightnessEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::BrightnessEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BrightnessEffectConfig, _impl_.mult_factor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    {PROTOBUF_FIELD_OFFSET(BrightnessEffectConfig, _impl_.mult_factor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void BrightnessEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.BrightnessEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.mult_factor_ != nullptr);
    _impl_.mult_factor_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL BrightnessEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const BrightnessEffectConfig& this_ = static_cast<const BrightnessEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL BrightnessEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const BrightnessEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.BrightnessEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.mult_factor_, this_._impl_.mult_factor_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.BrightnessEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t BrightnessEffectConfig::ByteSizeLong(const MessageLite& base) {
  const BrightnessEffectConfig& this_ = static_cast<const BrightnessEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t BrightnessEffectConfig::ByteSizeLong() const {
  const BrightnessEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.BrightnessEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void BrightnessEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BrightnessEffectConfig*>(&to_msg);
  auto& from = static_cast<const BrightnessEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.BrightnessEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.mult_factor_ != nullptr);
    if (_this->_impl_.mult_factor_ == nullptr) {
      _this->_impl_.mult_factor_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_);
    } else {
      _this->_impl_.mult_factor_->MergeFrom(*from._impl_.mult_factor_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BrightnessEffectConfig::CopyFrom(const BrightnessEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.BrightnessEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BrightnessEffectConfig::InternalSwap(BrightnessEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mult_factor_, other->_impl_.mult_factor_);
}

::google::protobuf::Metadata BrightnessEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HueEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<HueEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HueEffectConfig, _impl_._has_bits_);
};

void HueEffectConfig::clear_offset_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.offset_factor_ != nullptr) _impl_.offset_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HueEffectConfig::HueEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HueEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.HueEffectConfig)
}
PROTOBUF_NDEBUG_INLINE HueEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::HueEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HueEffectConfig::HueEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const HueEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HueEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HueEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.offset_factor_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_factor_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.HueEffectConfig)
}
PROTOBUF_NDEBUG_INLINE HueEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void HueEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.offset_factor_ = {};
}
HueEffectConfig::~HueEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.HueEffectConfig)
  SharedDtor(*this);
}
inline void HueEffectConfig::SharedDtor(MessageLite& self) {
  HueEffectConfig& this_ = static_cast<HueEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.offset_factor_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL HueEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) HueEffectConfig(arena);
}
constexpr auto HueEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(HueEffectConfig),
                                            alignof(HueEffectConfig));
}
constexpr auto HueEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_HueEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &HueEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<HueEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &HueEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<HueEffectConfig>(), &HueEffectConfig::ByteSizeLong,
              &HueEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(HueEffectConfig, _impl_._cached_size_),
          false,
      },
      &HueEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull HueEffectConfig_class_data_ =
        HueEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
HueEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&HueEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(HueEffectConfig_class_data_.tc_table);
  return HueEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
HueEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HueEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    HueEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::HueEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HueEffectConfig, _impl_.offset_factor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    {PROTOBUF_FIELD_OFFSET(HueEffectConfig, _impl_.offset_factor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void HueEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.HueEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.offset_factor_ != nullptr);
    _impl_.offset_factor_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL HueEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const HueEffectConfig& this_ = static_cast<const HueEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL HueEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const HueEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.HueEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.offset_factor_, this_._impl_.offset_factor_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.HueEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t HueEffectConfig::ByteSizeLong(const MessageLite& base) {
  const HueEffectConfig& this_ = static_cast<const HueEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t HueEffectConfig::ByteSizeLong() const {
  const HueEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.HueEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.offset_factor_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void HueEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HueEffectConfig*>(&to_msg);
  auto& from = static_cast<const HueEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.HueEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.offset_factor_ != nullptr);
    if (_this->_impl_.offset_factor_ == nullptr) {
      _this->_impl_.offset_factor_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_factor_);
    } else {
      _this->_impl_.offset_factor_->MergeFrom(*from._impl_.offset_factor_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HueEffectConfig::CopyFrom(const HueEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.HueEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HueEffectConfig::InternalSwap(HueEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.offset_factor_, other->_impl_.offset_factor_);
}

::google::protobuf::Metadata HueEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SaturationEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SaturationEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SaturationEffectConfig, _impl_._has_bits_);
};

void SaturationEffectConfig::clear_mult_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mult_factor_ != nullptr) _impl_.mult_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SaturationEffectConfig::SaturationEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SaturationEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.SaturationEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SaturationEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::SaturationEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SaturationEffectConfig::SaturationEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SaturationEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SaturationEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SaturationEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.mult_factor_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.SaturationEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SaturationEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SaturationEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mult_factor_ = {};
}
SaturationEffectConfig::~SaturationEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.SaturationEffectConfig)
  SharedDtor(*this);
}
inline void SaturationEffectConfig::SharedDtor(MessageLite& self) {
  SaturationEffectConfig& this_ = static_cast<SaturationEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.mult_factor_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SaturationEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SaturationEffectConfig(arena);
}
constexpr auto SaturationEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SaturationEffectConfig),
                                            alignof(SaturationEffectConfig));
}
constexpr auto SaturationEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SaturationEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SaturationEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SaturationEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SaturationEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SaturationEffectConfig>(), &SaturationEffectConfig::ByteSizeLong,
              &SaturationEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SaturationEffectConfig, _impl_._cached_size_),
          false,
      },
      &SaturationEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SaturationEffectConfig_class_data_ =
        SaturationEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SaturationEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SaturationEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SaturationEffectConfig_class_data_.tc_table);
  return SaturationEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
SaturationEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SaturationEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SaturationEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SaturationEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SaturationEffectConfig, _impl_.mult_factor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    {PROTOBUF_FIELD_OFFSET(SaturationEffectConfig, _impl_.mult_factor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SaturationEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.SaturationEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.mult_factor_ != nullptr);
    _impl_.mult_factor_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SaturationEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SaturationEffectConfig& this_ = static_cast<const SaturationEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SaturationEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SaturationEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.SaturationEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.mult_factor_, this_._impl_.mult_factor_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.SaturationEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SaturationEffectConfig::ByteSizeLong(const MessageLite& base) {
  const SaturationEffectConfig& this_ = static_cast<const SaturationEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SaturationEffectConfig::ByteSizeLong() const {
  const SaturationEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.SaturationEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SaturationEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SaturationEffectConfig*>(&to_msg);
  auto& from = static_cast<const SaturationEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.SaturationEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.mult_factor_ != nullptr);
    if (_this->_impl_.mult_factor_ == nullptr) {
      _this->_impl_.mult_factor_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_);
    } else {
      _this->_impl_.mult_factor_->MergeFrom(*from._impl_.mult_factor_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SaturationEffectConfig::CopyFrom(const SaturationEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.SaturationEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SaturationEffectConfig::InternalSwap(SaturationEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mult_factor_, other->_impl_.mult_factor_);
}

::google::protobuf::Metadata SaturationEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SnakeEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SnakeEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_._has_bits_);
};

void SnakeEffectConfig::clear_head() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.head_ != nullptr) _impl_.head_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SnakeEffectConfig::clear_tail_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tail_length_ != nullptr) _impl_.tail_length_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SnakeEffectConfig::SnakeEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SnakeEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.SnakeEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SnakeEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::SnakeEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SnakeEffectConfig::SnakeEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SnakeEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SnakeEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SnakeEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.head_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.head_)
                : nullptr;
  _impl_.tail_length_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tail_length_)
                : nullptr;
  _impl_.cyclic_ = from._impl_.cyclic_;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.SnakeEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SnakeEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SnakeEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, head_),
           0,
           offsetof(Impl_, cyclic_) -
               offsetof(Impl_, head_) +
               sizeof(Impl_::cyclic_));
}
SnakeEffectConfig::~SnakeEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.SnakeEffectConfig)
  SharedDtor(*this);
}
inline void SnakeEffectConfig::SharedDtor(MessageLite& self) {
  SnakeEffectConfig& this_ = static_cast<SnakeEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.head_;
  delete this_._impl_.tail_length_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SnakeEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SnakeEffectConfig(arena);
}
constexpr auto SnakeEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SnakeEffectConfig),
                                            alignof(SnakeEffectConfig));
}
constexpr auto SnakeEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SnakeEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SnakeEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SnakeEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SnakeEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SnakeEffectConfig>(), &SnakeEffectConfig::ByteSizeLong,
              &SnakeEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_._cached_size_),
          false,
      },
      &SnakeEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SnakeEffectConfig_class_data_ =
        SnakeEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SnakeEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SnakeEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SnakeEffectConfig_class_data_.tc_table);
  return SnakeEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2>
SnakeEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SnakeEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SnakeEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.head_)}},
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.tail_length_)}},
    // bool cyclic = 3 [json_name = "cyclic"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SnakeEffectConfig, _impl_.cyclic_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.cyclic_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    {PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.head_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    {PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.tail_length_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool cyclic = 3 [json_name = "cyclic"];
    {PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.cyclic_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SnakeEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.SnakeEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.head_ != nullptr);
      _impl_.head_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.tail_length_ != nullptr);
      _impl_.tail_length_->Clear();
    }
  }
  _impl_.cyclic_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SnakeEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SnakeEffectConfig& this_ = static_cast<const SnakeEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SnakeEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SnakeEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.SnakeEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.head_, this_._impl_.head_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.tail_length_, this_._impl_.tail_length_->GetCachedSize(), target,
        stream);
  }

  // bool cyclic = 3 [json_name = "cyclic"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (this_._internal_cyclic() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_cyclic(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.SnakeEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SnakeEffectConfig::ByteSizeLong(const MessageLite& base) {
  const SnakeEffectConfig& this_ = static_cast<const SnakeEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SnakeEffectConfig::ByteSizeLong() const {
  const SnakeEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.SnakeEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.head_);
    }
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tail_length_);
    }
    // bool cyclic = 3 [json_name = "cyclic"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_cyclic() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SnakeEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SnakeEffectConfig*>(&to_msg);
  auto& from = static_cast<const SnakeEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.SnakeEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.head_ != nullptr);
      if (_this->_impl_.head_ == nullptr) {
        _this->_impl_.head_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.head_);
      } else {
        _this->_impl_.head_->MergeFrom(*from._impl_.head_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.tail_length_ != nullptr);
      if (_this->_impl_.tail_length_ == nullptr) {
        _this->_impl_.tail_length_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tail_length_);
      } else {
        _this->_impl_.tail_length_->MergeFrom(*from._impl_.tail_length_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_cyclic() != 0) {
        _this->_impl_.cyclic_ = from._impl_.cyclic_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SnakeEffectConfig::CopyFrom(const SnakeEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.SnakeEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SnakeEffectConfig::InternalSwap(SnakeEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.cyclic_)
      + sizeof(SnakeEffectConfig::_impl_.cyclic_)
      - PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::google::protobuf::Metadata SnakeEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TimedBrightnessEffectConfig::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::TimedBrightnessEffectConfig, _impl_._oneof_case_);
};

void TimedBrightnessEffectConfig::set_allocated_mult_factor_increase(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_increase) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_increase) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_increase)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_increase = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_increase, submessage_arena);
    }
    set_has_mult_factor_increase();
    _impl_.mult_factor_.mult_factor_increase_ = mult_factor_increase;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.TimedBrightnessEffectConfig.mult_factor_increase)
}
void TimedBrightnessEffectConfig::clear_mult_factor_increase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorIncrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_increase_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
    }
    clear_has_mult_factor();
  }
}
void TimedBrightnessEffectConfig::set_allocated_mult_factor_decrease(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_decrease) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_decrease) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_decrease)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_decrease = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_decrease, submessage_arena);
    }
    set_has_mult_factor_decrease();
    _impl_.mult_factor_.mult_factor_decrease_ = mult_factor_decrease;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.TimedBrightnessEffectConfig.mult_factor_decrease)
}
void TimedBrightnessEffectConfig::clear_mult_factor_decrease() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorDecrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_decrease_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
    }
    clear_has_mult_factor();
  }
}
TimedBrightnessEffectConfig::TimedBrightnessEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TimedBrightnessEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.TimedBrightnessEffectConfig)
}
PROTOBUF_NDEBUG_INLINE TimedBrightnessEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::TimedBrightnessEffectConfig& from_msg)
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

TimedBrightnessEffectConfig::TimedBrightnessEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TimedBrightnessEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TimedBrightnessEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TimedBrightnessEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (mult_factor_case()) {
    case MULT_FACTOR_NOT_SET:
      break;
      case kMultFactorIncrease:
        _impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        break;
      case kMultFactorDecrease:
        _impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.TimedBrightnessEffectConfig)
}
PROTOBUF_NDEBUG_INLINE TimedBrightnessEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void TimedBrightnessEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TimedBrightnessEffectConfig::~TimedBrightnessEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.TimedBrightnessEffectConfig)
  SharedDtor(*this);
}
inline void TimedBrightnessEffectConfig::SharedDtor(MessageLite& self) {
  TimedBrightnessEffectConfig& this_ = static_cast<TimedBrightnessEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_mult_factor()) {
    this_.clear_mult_factor();
  }
  this_._impl_.~Impl_();
}

void TimedBrightnessEffectConfig::clear_mult_factor() {
// @@protoc_insertion_point(one_of_clear_start:kivsee.proto.render.v1.TimedBrightnessEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (mult_factor_case()) {
    case kMultFactorIncrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_increase_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
      }
      break;
    }
    case kMultFactorDecrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_decrease_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
      }
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MULT_FACTOR_NOT_SET;
}


inline void* PROTOBUF_NONNULL TimedBrightnessEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TimedBrightnessEffectConfig(arena);
}
constexpr auto TimedBrightnessEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TimedBrightnessEffectConfig),
                                            alignof(TimedBrightnessEffectConfig));
}
constexpr auto TimedBrightnessEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TimedBrightnessEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TimedBrightnessEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TimedBrightnessEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TimedBrightnessEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TimedBrightnessEffectConfig>(), &TimedBrightnessEffectConfig::ByteSizeLong,
              &TimedBrightnessEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TimedBrightnessEffectConfig, _impl_._cached_size_),
          false,
      },
      &TimedBrightnessEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TimedBrightnessEffectConfig_class_data_ =
        TimedBrightnessEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TimedBrightnessEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TimedBrightnessEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TimedBrightnessEffectConfig_class_data_.tc_table);
  return TimedBrightnessEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
TimedBrightnessEffectConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TimedBrightnessEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::TimedBrightnessEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 1 [json_name = "multFactorIncrease"];
    {PROTOBUF_FIELD_OFFSET(TimedBrightnessEffectConfig, _impl_.mult_factor_.mult_factor_increase_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 2 [json_name = "multFactorDecrease"];
    {PROTOBUF_FIELD_OFFSET(TimedBrightnessEffectConfig, _impl_.mult_factor_.mult_factor_decrease_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TimedBrightnessEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.TimedBrightnessEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mult_factor();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TimedBrightnessEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TimedBrightnessEffectConfig& this_ = static_cast<const TimedBrightnessEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TimedBrightnessEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TimedBrightnessEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.TimedBrightnessEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.mult_factor_case()) {
    case kMultFactorIncrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.mult_factor_.mult_factor_increase_, this_._impl_.mult_factor_.mult_factor_increase_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMultFactorDecrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.mult_factor_.mult_factor_decrease_, this_._impl_.mult_factor_.mult_factor_decrease_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.TimedBrightnessEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TimedBrightnessEffectConfig::ByteSizeLong(const MessageLite& base) {
  const TimedBrightnessEffectConfig& this_ = static_cast<const TimedBrightnessEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TimedBrightnessEffectConfig::ByteSizeLong() const {
  const TimedBrightnessEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.TimedBrightnessEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.mult_factor_case()) {
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 1 [json_name = "multFactorIncrease"];
    case kMultFactorIncrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_increase_);
      break;
    }
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 2 [json_name = "multFactorDecrease"];
    case kMultFactorDecrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_decrease_);
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TimedBrightnessEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TimedBrightnessEffectConfig*>(&to_msg);
  auto& from = static_cast<const TimedBrightnessEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.TimedBrightnessEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_mult_factor();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMultFactorIncrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_increase_->MergeFrom(*from._impl_.mult_factor_.mult_factor_increase_);
        }
        break;
      }
      case kMultFactorDecrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_decrease_->MergeFrom(*from._impl_.mult_factor_.mult_factor_decrease_);
        }
        break;
      }
      case MULT_FACTOR_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TimedBrightnessEffectConfig::CopyFrom(const TimedBrightnessEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.TimedBrightnessEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TimedBrightnessEffectConfig::InternalSwap(TimedBrightnessEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mult_factor_, other->_impl_.mult_factor_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TimedBrightnessEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TimedHueEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TimedHueEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TimedHueEffectConfig, _impl_._has_bits_);
};

void TimedHueEffectConfig::clear_offset_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.offset_factor_ != nullptr) _impl_.offset_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TimedHueEffectConfig::TimedHueEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TimedHueEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.TimedHueEffectConfig)
}
PROTOBUF_NDEBUG_INLINE TimedHueEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::TimedHueEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TimedHueEffectConfig::TimedHueEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TimedHueEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TimedHueEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TimedHueEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.offset_factor_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_factor_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.TimedHueEffectConfig)
}
PROTOBUF_NDEBUG_INLINE TimedHueEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TimedHueEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.offset_factor_ = {};
}
TimedHueEffectConfig::~TimedHueEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.TimedHueEffectConfig)
  SharedDtor(*this);
}
inline void TimedHueEffectConfig::SharedDtor(MessageLite& self) {
  TimedHueEffectConfig& this_ = static_cast<TimedHueEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.offset_factor_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TimedHueEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TimedHueEffectConfig(arena);
}
constexpr auto TimedHueEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TimedHueEffectConfig),
                                            alignof(TimedHueEffectConfig));
}
constexpr auto TimedHueEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TimedHueEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TimedHueEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TimedHueEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TimedHueEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TimedHueEffectConfig>(), &TimedHueEffectConfig::ByteSizeLong,
              &TimedHueEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TimedHueEffectConfig, _impl_._cached_size_),
          false,
      },
      &TimedHueEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TimedHueEffectConfig_class_data_ =
        TimedHueEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TimedHueEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TimedHueEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TimedHueEffectConfig_class_data_.tc_table);
  return TimedHueEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
TimedHueEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TimedHueEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TimedHueEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::TimedHueEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TimedHueEffectConfig, _impl_.offset_factor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    {PROTOBUF_FIELD_OFFSET(TimedHueEffectConfig, _impl_.offset_factor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TimedHueEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.TimedHueEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.offset_factor_ != nullptr);
    _impl_.offset_factor_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TimedHueEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TimedHueEffectConfig& this_ = static_cast<const TimedHueEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TimedHueEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TimedHueEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.TimedHueEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.offset_factor_, this_._impl_.offset_factor_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.TimedHueEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TimedHueEffectConfig::ByteSizeLong(const MessageLite& base) {
  const TimedHueEffectConfig& this_ = static_cast<const TimedHueEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TimedHueEffectConfig::ByteSizeLong() const {
  const TimedHueEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.TimedHueEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.offset_factor_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TimedHueEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TimedHueEffectConfig*>(&to_msg);
  auto& from = static_cast<const TimedHueEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.TimedHueEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.offset_factor_ != nullptr);
    if (_this->_impl_.offset_factor_ == nullptr) {
      _this->_impl_.offset_factor_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_factor_);
    } else {
      _this->_impl_.offset_factor_->MergeFrom(*from._impl_.offset_factor_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TimedHueEffectConfig::CopyFrom(const TimedHueEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.TimedHueEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TimedHueEffectConfig::InternalSwap(TimedHueEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.offset_factor_, other->_impl_.offset_factor_);
}

::google::protobuf::Metadata TimedHueEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TimedSaturationEffectConfig::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::TimedSaturationEffectConfig, _impl_._oneof_case_);
};

void TimedSaturationEffectConfig::set_allocated_mult_factor_increase(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_increase) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_increase) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_increase)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_increase = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_increase, submessage_arena);
    }
    set_has_mult_factor_increase();
    _impl_.mult_factor_.mult_factor_increase_ = mult_factor_increase;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.TimedSaturationEffectConfig.mult_factor_increase)
}
void TimedSaturationEffectConfig::clear_mult_factor_increase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorIncrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_increase_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
    }
    clear_has_mult_factor();
  }
}
void TimedSaturationEffectConfig::set_allocated_mult_factor_decrease(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_decrease) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_decrease) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_decrease)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_decrease = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_decrease, submessage_arena);
    }
    set_has_mult_factor_decrease();
    _impl_.mult_factor_.mult_factor_decrease_ = mult_factor_decrease;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.TimedSaturationEffectConfig.mult_factor_decrease)
}
void TimedSaturationEffectConfig::clear_mult_factor_decrease() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorDecrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_decrease_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
    }
    clear_has_mult_factor();
  }
}
TimedSaturationEffectConfig::TimedSaturationEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TimedSaturationEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.TimedSaturationEffectConfig)
}
PROTOBUF_NDEBUG_INLINE TimedSaturationEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::TimedSaturationEffectConfig& from_msg)
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

TimedSaturationEffectConfig::TimedSaturationEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TimedSaturationEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TimedSaturationEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TimedSaturationEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (mult_factor_case()) {
    case MULT_FACTOR_NOT_SET:
      break;
      case kMultFactorIncrease:
        _impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        break;
      case kMultFactorDecrease:
        _impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.TimedSaturationEffectConfig)
}
PROTOBUF_NDEBUG_INLINE TimedSaturationEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void TimedSaturationEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TimedSaturationEffectConfig::~TimedSaturationEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.TimedSaturationEffectConfig)
  SharedDtor(*this);
}
inline void TimedSaturationEffectConfig::SharedDtor(MessageLite& self) {
  TimedSaturationEffectConfig& this_ = static_cast<TimedSaturationEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_mult_factor()) {
    this_.clear_mult_factor();
  }
  this_._impl_.~Impl_();
}

void TimedSaturationEffectConfig::clear_mult_factor() {
// @@protoc_insertion_point(one_of_clear_start:kivsee.proto.render.v1.TimedSaturationEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (mult_factor_case()) {
    case kMultFactorIncrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_increase_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
      }
      break;
    }
    case kMultFactorDecrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_decrease_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
      }
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MULT_FACTOR_NOT_SET;
}


inline void* PROTOBUF_NONNULL TimedSaturationEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TimedSaturationEffectConfig(arena);
}
constexpr auto TimedSaturationEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TimedSaturationEffectConfig),
                                            alignof(TimedSaturationEffectConfig));
}
constexpr auto TimedSaturationEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TimedSaturationEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TimedSaturationEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TimedSaturationEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TimedSaturationEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TimedSaturationEffectConfig>(), &TimedSaturationEffectConfig::ByteSizeLong,
              &TimedSaturationEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TimedSaturationEffectConfig, _impl_._cached_size_),
          false,
      },
      &TimedSaturationEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TimedSaturationEffectConfig_class_data_ =
        TimedSaturationEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TimedSaturationEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TimedSaturationEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TimedSaturationEffectConfig_class_data_.tc_table);
  return TimedSaturationEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
TimedSaturationEffectConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TimedSaturationEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::TimedSaturationEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 1 [json_name = "multFactorIncrease"];
    {PROTOBUF_FIELD_OFFSET(TimedSaturationEffectConfig, _impl_.mult_factor_.mult_factor_increase_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 2 [json_name = "multFactorDecrease"];
    {PROTOBUF_FIELD_OFFSET(TimedSaturationEffectConfig, _impl_.mult_factor_.mult_factor_decrease_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TimedSaturationEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.TimedSaturationEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mult_factor();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TimedSaturationEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TimedSaturationEffectConfig& this_ = static_cast<const TimedSaturationEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TimedSaturationEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TimedSaturationEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.TimedSaturationEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.mult_factor_case()) {
    case kMultFactorIncrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.mult_factor_.mult_factor_increase_, this_._impl_.mult_factor_.mult_factor_increase_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMultFactorDecrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.mult_factor_.mult_factor_decrease_, this_._impl_.mult_factor_.mult_factor_decrease_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.TimedSaturationEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TimedSaturationEffectConfig::ByteSizeLong(const MessageLite& base) {
  const TimedSaturationEffectConfig& this_ = static_cast<const TimedSaturationEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TimedSaturationEffectConfig::ByteSizeLong() const {
  const TimedSaturationEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.TimedSaturationEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.mult_factor_case()) {
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 1 [json_name = "multFactorIncrease"];
    case kMultFactorIncrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_increase_);
      break;
    }
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 2 [json_name = "multFactorDecrease"];
    case kMultFactorDecrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_decrease_);
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TimedSaturationEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TimedSaturationEffectConfig*>(&to_msg);
  auto& from = static_cast<const TimedSaturationEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.TimedSaturationEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_mult_factor();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMultFactorIncrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_increase_->MergeFrom(*from._impl_.mult_factor_.mult_factor_increase_);
        }
        break;
      }
      case kMultFactorDecrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_decrease_->MergeFrom(*from._impl_.mult_factor_.mult_factor_decrease_);
        }
        break;
      }
      case MULT_FACTOR_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TimedSaturationEffectConfig::CopyFrom(const TimedSaturationEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.TimedSaturationEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TimedSaturationEffectConfig::InternalSwap(TimedSaturationEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mult_factor_, other->_impl_.mult_factor_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TimedSaturationEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PositionBrightnessEffectConfig::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::PositionBrightnessEffectConfig, _impl_._oneof_case_);
};

void PositionBrightnessEffectConfig::set_allocated_mult_factor_increase(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_increase) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_increase) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_increase)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_increase = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_increase, submessage_arena);
    }
    set_has_mult_factor_increase();
    _impl_.mult_factor_.mult_factor_increase_ = mult_factor_increase;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.PositionBrightnessEffectConfig.mult_factor_increase)
}
void PositionBrightnessEffectConfig::clear_mult_factor_increase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorIncrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_increase_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
    }
    clear_has_mult_factor();
  }
}
void PositionBrightnessEffectConfig::set_allocated_mult_factor_decrease(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_decrease) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_decrease) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_decrease)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_decrease = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_decrease, submessage_arena);
    }
    set_has_mult_factor_decrease();
    _impl_.mult_factor_.mult_factor_decrease_ = mult_factor_decrease;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.PositionBrightnessEffectConfig.mult_factor_decrease)
}
void PositionBrightnessEffectConfig::clear_mult_factor_decrease() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorDecrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_decrease_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
    }
    clear_has_mult_factor();
  }
}
PositionBrightnessEffectConfig::PositionBrightnessEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PositionBrightnessEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.PositionBrightnessEffectConfig)
}
PROTOBUF_NDEBUG_INLINE PositionBrightnessEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::PositionBrightnessEffectConfig& from_msg)
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

PositionBrightnessEffectConfig::PositionBrightnessEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const PositionBrightnessEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PositionBrightnessEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PositionBrightnessEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (mult_factor_case()) {
    case MULT_FACTOR_NOT_SET:
      break;
      case kMultFactorIncrease:
        _impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        break;
      case kMultFactorDecrease:
        _impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.PositionBrightnessEffectConfig)
}
PROTOBUF_NDEBUG_INLINE PositionBrightnessEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void PositionBrightnessEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PositionBrightnessEffectConfig::~PositionBrightnessEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.PositionBrightnessEffectConfig)
  SharedDtor(*this);
}
inline void PositionBrightnessEffectConfig::SharedDtor(MessageLite& self) {
  PositionBrightnessEffectConfig& this_ = static_cast<PositionBrightnessEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_mult_factor()) {
    this_.clear_mult_factor();
  }
  this_._impl_.~Impl_();
}

void PositionBrightnessEffectConfig::clear_mult_factor() {
// @@protoc_insertion_point(one_of_clear_start:kivsee.proto.render.v1.PositionBrightnessEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (mult_factor_case()) {
    case kMultFactorIncrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_increase_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
      }
      break;
    }
    case kMultFactorDecrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_decrease_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
      }
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MULT_FACTOR_NOT_SET;
}


inline void* PROTOBUF_NONNULL PositionBrightnessEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PositionBrightnessEffectConfig(arena);
}
constexpr auto PositionBrightnessEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PositionBrightnessEffectConfig),
                                            alignof(PositionBrightnessEffectConfig));
}
constexpr auto PositionBrightnessEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PositionBrightnessEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &PositionBrightnessEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PositionBrightnessEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PositionBrightnessEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PositionBrightnessEffectConfig>(), &PositionBrightnessEffectConfig::ByteSizeLong,
              &PositionBrightnessEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PositionBrightnessEffectConfig, _impl_._cached_size_),
          false,
      },
      &PositionBrightnessEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull PositionBrightnessEffectConfig_class_data_ =
        PositionBrightnessEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
PositionBrightnessEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PositionBrightnessEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PositionBrightnessEffectConfig_class_data_.tc_table);
  return PositionBrightnessEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
PositionBrightnessEffectConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    PositionBrightnessEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::PositionBrightnessEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 1 [json_name = "multFactorIncrease"];
    {PROTOBUF_FIELD_OFFSET(PositionBrightnessEffectConfig, _impl_.mult_factor_.mult_factor_increase_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 2 [json_name = "multFactorDecrease"];
    {PROTOBUF_FIELD_OFFSET(PositionBrightnessEffectConfig, _impl_.mult_factor_.mult_factor_decrease_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void PositionBrightnessEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.PositionBrightnessEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mult_factor();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL PositionBrightnessEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PositionBrightnessEffectConfig& this_ = static_cast<const PositionBrightnessEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PositionBrightnessEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PositionBrightnessEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.PositionBrightnessEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.mult_factor_case()) {
    case kMultFactorIncrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.mult_factor_.mult_factor_increase_, this_._impl_.mult_factor_.mult_factor_increase_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMultFactorDecrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.mult_factor_.mult_factor_decrease_, this_._impl_.mult_factor_.mult_factor_decrease_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.PositionBrightnessEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PositionBrightnessEffectConfig::ByteSizeLong(const MessageLite& base) {
  const PositionBrightnessEffectConfig& this_ = static_cast<const PositionBrightnessEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t PositionBrightnessEffectConfig::ByteSizeLong() const {
  const PositionBrightnessEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.PositionBrightnessEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.mult_factor_case()) {
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 1 [json_name = "multFactorIncrease"];
    case kMultFactorIncrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_increase_);
      break;
    }
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 2 [json_name = "multFactorDecrease"];
    case kMultFactorDecrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_decrease_);
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void PositionBrightnessEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PositionBrightnessEffectConfig*>(&to_msg);
  auto& from = static_cast<const PositionBrightnessEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.PositionBrightnessEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_mult_factor();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMultFactorIncrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_increase_->MergeFrom(*from._impl_.mult_factor_.mult_factor_increase_);
        }
        break;
      }
      case kMultFactorDecrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_decrease_->MergeFrom(*from._impl_.mult_factor_.mult_factor_decrease_);
        }
        break;
      }
      case MULT_FACTOR_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionBrightnessEffectConfig::CopyFrom(const PositionBrightnessEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.PositionBrightnessEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PositionBrightnessEffectConfig::InternalSwap(PositionBrightnessEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mult_factor_, other->_impl_.mult_factor_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata PositionBrightnessEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PositionHueEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<PositionHueEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PositionHueEffectConfig, _impl_._has_bits_);
};

void PositionHueEffectConfig::clear_offset_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.offset_factor_ != nullptr) _impl_.offset_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PositionHueEffectConfig::PositionHueEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PositionHueEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.PositionHueEffectConfig)
}
PROTOBUF_NDEBUG_INLINE PositionHueEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::PositionHueEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PositionHueEffectConfig::PositionHueEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const PositionHueEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PositionHueEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PositionHueEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.offset_factor_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_factor_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.PositionHueEffectConfig)
}
PROTOBUF_NDEBUG_INLINE PositionHueEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void PositionHueEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.offset_factor_ = {};
}
PositionHueEffectConfig::~PositionHueEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.PositionHueEffectConfig)
  SharedDtor(*this);
}
inline void PositionHueEffectConfig::SharedDtor(MessageLite& self) {
  PositionHueEffectConfig& this_ = static_cast<PositionHueEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.offset_factor_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL PositionHueEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PositionHueEffectConfig(arena);
}
constexpr auto PositionHueEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PositionHueEffectConfig),
                                            alignof(PositionHueEffectConfig));
}
constexpr auto PositionHueEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PositionHueEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &PositionHueEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PositionHueEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PositionHueEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PositionHueEffectConfig>(), &PositionHueEffectConfig::ByteSizeLong,
              &PositionHueEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PositionHueEffectConfig, _impl_._cached_size_),
          false,
      },
      &PositionHueEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull PositionHueEffectConfig_class_data_ =
        PositionHueEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
PositionHueEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PositionHueEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PositionHueEffectConfig_class_data_.tc_table);
  return PositionHueEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
PositionHueEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PositionHueEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    PositionHueEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::PositionHueEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PositionHueEffectConfig, _impl_.offset_factor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    {PROTOBUF_FIELD_OFFSET(PositionHueEffectConfig, _impl_.offset_factor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void PositionHueEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.PositionHueEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.offset_factor_ != nullptr);
    _impl_.offset_factor_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL PositionHueEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PositionHueEffectConfig& this_ = static_cast<const PositionHueEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PositionHueEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PositionHueEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.PositionHueEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.offset_factor_, this_._impl_.offset_factor_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.PositionHueEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PositionHueEffectConfig::ByteSizeLong(const MessageLite& base) {
  const PositionHueEffectConfig& this_ = static_cast<const PositionHueEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t PositionHueEffectConfig::ByteSizeLong() const {
  const PositionHueEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.PositionHueEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.offset_factor_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void PositionHueEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PositionHueEffectConfig*>(&to_msg);
  auto& from = static_cast<const PositionHueEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.PositionHueEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.offset_factor_ != nullptr);
    if (_this->_impl_.offset_factor_ == nullptr) {
      _this->_impl_.offset_factor_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_factor_);
    } else {
      _this->_impl_.offset_factor_->MergeFrom(*from._impl_.offset_factor_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionHueEffectConfig::CopyFrom(const PositionHueEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.PositionHueEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PositionHueEffectConfig::InternalSwap(PositionHueEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.offset_factor_, other->_impl_.offset_factor_);
}

::google::protobuf::Metadata PositionHueEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PositionSaturationEffectConfig::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::PositionSaturationEffectConfig, _impl_._oneof_case_);
};

void PositionSaturationEffectConfig::set_allocated_mult_factor_increase(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_increase) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_increase) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_increase)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_increase = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_increase, submessage_arena);
    }
    set_has_mult_factor_increase();
    _impl_.mult_factor_.mult_factor_increase_ = mult_factor_increase;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.PositionSaturationEffectConfig.mult_factor_increase)
}
void PositionSaturationEffectConfig::clear_mult_factor_increase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorIncrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_increase_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
    }
    clear_has_mult_factor();
  }
}
void PositionSaturationEffectConfig::set_allocated_mult_factor_decrease(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_decrease) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_decrease) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_decrease)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_decrease = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_decrease, submessage_arena);
    }
    set_has_mult_factor_decrease();
    _impl_.mult_factor_.mult_factor_decrease_ = mult_factor_decrease;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.PositionSaturationEffectConfig.mult_factor_decrease)
}
void PositionSaturationEffectConfig::clear_mult_factor_decrease() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorDecrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_decrease_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
    }
    clear_has_mult_factor();
  }
}
PositionSaturationEffectConfig::PositionSaturationEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PositionSaturationEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.PositionSaturationEffectConfig)
}
PROTOBUF_NDEBUG_INLINE PositionSaturationEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::PositionSaturationEffectConfig& from_msg)
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

PositionSaturationEffectConfig::PositionSaturationEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const PositionSaturationEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PositionSaturationEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PositionSaturationEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (mult_factor_case()) {
    case MULT_FACTOR_NOT_SET:
      break;
      case kMultFactorIncrease:
        _impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        break;
      case kMultFactorDecrease:
        _impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.PositionSaturationEffectConfig)
}
PROTOBUF_NDEBUG_INLINE PositionSaturationEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : mult_factor_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void PositionSaturationEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PositionSaturationEffectConfig::~PositionSaturationEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.PositionSaturationEffectConfig)
  SharedDtor(*this);
}
inline void PositionSaturationEffectConfig::SharedDtor(MessageLite& self) {
  PositionSaturationEffectConfig& this_ = static_cast<PositionSaturationEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_mult_factor()) {
    this_.clear_mult_factor();
  }
  this_._impl_.~Impl_();
}

void PositionSaturationEffectConfig::clear_mult_factor() {
// @@protoc_insertion_point(one_of_clear_start:kivsee.proto.render.v1.PositionSaturationEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (mult_factor_case()) {
    case kMultFactorIncrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_increase_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
      }
      break;
    }
    case kMultFactorDecrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_decrease_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
      }
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MULT_FACTOR_NOT_SET;
}


inline void* PROTOBUF_NONNULL PositionSaturationEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PositionSaturationEffectConfig(arena);
}
constexpr auto PositionSaturationEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PositionSaturationEffectConfig),
                                            alignof(PositionSaturationEffectConfig));
}
constexpr auto PositionSaturationEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PositionSaturationEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &PositionSaturationEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PositionSaturationEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PositionSaturationEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PositionSaturationEffectConfig>(), &PositionSaturationEffectConfig::ByteSizeLong,
              &PositionSaturationEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PositionSaturationEffectConfig, _impl_._cached_size_),
          false,
      },
      &PositionSaturationEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull PositionSaturationEffectConfig_class_data_ =
        PositionSaturationEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
PositionSaturationEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PositionSaturationEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PositionSaturationEffectConfig_class_data_.tc_table);
  return PositionSaturationEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
PositionSaturationEffectConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    PositionSaturationEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::PositionSaturationEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 1 [json_name = "multFactorIncrease"];
    {PROTOBUF_FIELD_OFFSET(PositionSaturationEffectConfig, _impl_.mult_factor_.mult_factor_increase_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 2 [json_name = "multFactorDecrease"];
    {PROTOBUF_FIELD_OFFSET(PositionSaturationEffectConfig, _impl_.mult_factor_.mult_factor_decrease_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void PositionSaturationEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.PositionSaturationEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mult_factor();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL PositionSaturationEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PositionSaturationEffectConfig& this_ = static_cast<const PositionSaturationEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PositionSaturationEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PositionSaturationEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.PositionSaturationEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.mult_factor_case()) {
    case kMultFactorIncrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.mult_factor_.mult_factor_increase_, this_._impl_.mult_factor_.mult_factor_increase_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMultFactorDecrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.mult_factor_.mult_factor_decrease_, this_._impl_.mult_factor_.mult_factor_decrease_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.PositionSaturationEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PositionSaturationEffectConfig::ByteSizeLong(const MessageLite& base) {
  const PositionSaturationEffectConfig& this_ = static_cast<const PositionSaturationEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t PositionSaturationEffectConfig::ByteSizeLong() const {
  const PositionSaturationEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.PositionSaturationEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.mult_factor_case()) {
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 1 [json_name = "multFactorIncrease"];
    case kMultFactorIncrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_increase_);
      break;
    }
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 2 [json_name = "multFactorDecrease"];
    case kMultFactorDecrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_decrease_);
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void PositionSaturationEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PositionSaturationEffectConfig*>(&to_msg);
  auto& from = static_cast<const PositionSaturationEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.PositionSaturationEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_mult_factor();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMultFactorIncrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_increase_->MergeFrom(*from._impl_.mult_factor_.mult_factor_increase_);
        }
        break;
      }
      case kMultFactorDecrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_decrease_->MergeFrom(*from._impl_.mult_factor_.mult_factor_decrease_);
        }
        break;
      }
      case MULT_FACTOR_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionSaturationEffectConfig::CopyFrom(const PositionSaturationEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.PositionSaturationEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PositionSaturationEffectConfig::InternalSwap(PositionSaturationEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mult_factor_, other->_impl_.mult_factor_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata PositionSaturationEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SnakeBrightnessEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SnakeBrightnessEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeBrightnessEffectConfig, _impl_._oneof_case_);
};

void SnakeBrightnessEffectConfig::clear_head() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.head_ != nullptr) _impl_.head_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SnakeBrightnessEffectConfig::clear_tail_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tail_length_ != nullptr) _impl_.tail_length_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SnakeBrightnessEffectConfig::set_allocated_mult_factor_increase(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_increase) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_increase) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_increase)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_increase = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_increase, submessage_arena);
    }
    set_has_mult_factor_increase();
    _impl_.mult_factor_.mult_factor_increase_ = mult_factor_increase;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.SnakeBrightnessEffectConfig.mult_factor_increase)
}
void SnakeBrightnessEffectConfig::clear_mult_factor_increase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorIncrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_increase_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
    }
    clear_has_mult_factor();
  }
}
void SnakeBrightnessEffectConfig::set_allocated_mult_factor_decrease(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_decrease) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_decrease) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_decrease)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_decrease = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_decrease, submessage_arena);
    }
    set_has_mult_factor_decrease();
    _impl_.mult_factor_.mult_factor_decrease_ = mult_factor_decrease;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.SnakeBrightnessEffectConfig.mult_factor_decrease)
}
void SnakeBrightnessEffectConfig::clear_mult_factor_decrease() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorDecrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_decrease_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
    }
    clear_has_mult_factor();
  }
}
SnakeBrightnessEffectConfig::SnakeBrightnessEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SnakeBrightnessEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.SnakeBrightnessEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SnakeBrightnessEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::SnakeBrightnessEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mult_factor_{},
        _oneof_case_{from._oneof_case_[0]} {}

SnakeBrightnessEffectConfig::SnakeBrightnessEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SnakeBrightnessEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SnakeBrightnessEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SnakeBrightnessEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.head_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.head_)
                : nullptr;
  _impl_.tail_length_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tail_length_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cyclic_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, cyclic_),
           offsetof(Impl_, repeat_num_) -
               offsetof(Impl_, cyclic_) +
               sizeof(Impl_::repeat_num_));
  switch (mult_factor_case()) {
    case MULT_FACTOR_NOT_SET:
      break;
      case kMultFactorIncrease:
        _impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        break;
      case kMultFactorDecrease:
        _impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.SnakeBrightnessEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SnakeBrightnessEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        mult_factor_{},
        _oneof_case_{} {}

inline void SnakeBrightnessEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, head_),
           0,
           offsetof(Impl_, repeat_num_) -
               offsetof(Impl_, head_) +
               sizeof(Impl_::repeat_num_));
}
SnakeBrightnessEffectConfig::~SnakeBrightnessEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.SnakeBrightnessEffectConfig)
  SharedDtor(*this);
}
inline void SnakeBrightnessEffectConfig::SharedDtor(MessageLite& self) {
  SnakeBrightnessEffectConfig& this_ = static_cast<SnakeBrightnessEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.head_;
  delete this_._impl_.tail_length_;
  if (this_.has_mult_factor()) {
    this_.clear_mult_factor();
  }
  this_._impl_.~Impl_();
}

void SnakeBrightnessEffectConfig::clear_mult_factor() {
// @@protoc_insertion_point(one_of_clear_start:kivsee.proto.render.v1.SnakeBrightnessEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (mult_factor_case()) {
    case kMultFactorIncrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_increase_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
      }
      break;
    }
    case kMultFactorDecrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_decrease_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
      }
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MULT_FACTOR_NOT_SET;
}


inline void* PROTOBUF_NONNULL SnakeBrightnessEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SnakeBrightnessEffectConfig(arena);
}
constexpr auto SnakeBrightnessEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SnakeBrightnessEffectConfig),
                                            alignof(SnakeBrightnessEffectConfig));
}
constexpr auto SnakeBrightnessEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SnakeBrightnessEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SnakeBrightnessEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SnakeBrightnessEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SnakeBrightnessEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SnakeBrightnessEffectConfig>(), &SnakeBrightnessEffectConfig::ByteSizeLong,
              &SnakeBrightnessEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_._cached_size_),
          false,
      },
      &SnakeBrightnessEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SnakeBrightnessEffectConfig_class_data_ =
        SnakeBrightnessEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SnakeBrightnessEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SnakeBrightnessEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SnakeBrightnessEffectConfig_class_data_.tc_table);
  return SnakeBrightnessEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 6, 4, 0, 2>
SnakeBrightnessEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SnakeBrightnessEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SnakeBrightnessEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float repeat_num = 4 [json_name = "repeatNum"];
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.repeat_num_)}},
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.head_)}},
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.tail_length_)}},
    // bool cyclic = 3 [json_name = "cyclic"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SnakeBrightnessEffectConfig, _impl_.cyclic_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.cyclic_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    {PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.head_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    {PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.tail_length_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool cyclic = 3 [json_name = "cyclic"];
    {PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.cyclic_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // float repeat_num = 4 [json_name = "repeatNum"];
    {PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.repeat_num_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 5 [json_name = "multFactorIncrease"];
    {PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.mult_factor_.mult_factor_increase_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 6 [json_name = "multFactorDecrease"];
    {PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.mult_factor_.mult_factor_decrease_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SnakeBrightnessEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.SnakeBrightnessEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.head_ != nullptr);
      _impl_.head_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.tail_length_ != nullptr);
      _impl_.tail_length_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000000cu) != 0) {
    ::memset(&_impl_.cyclic_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.repeat_num_) -
        reinterpret_cast<char*>(&_impl_.cyclic_)) + sizeof(_impl_.repeat_num_));
  }
  clear_mult_factor();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SnakeBrightnessEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SnakeBrightnessEffectConfig& this_ = static_cast<const SnakeBrightnessEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SnakeBrightnessEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SnakeBrightnessEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.SnakeBrightnessEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.head_, this_._impl_.head_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.tail_length_, this_._impl_.tail_length_->GetCachedSize(), target,
        stream);
  }

  // bool cyclic = 3 [json_name = "cyclic"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (this_._internal_cyclic() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_cyclic(), target);
    }
  }

  // float repeat_num = 4 [json_name = "repeatNum"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_num()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          4, this_._internal_repeat_num(), target);
    }
  }

  switch (this_.mult_factor_case()) {
    case kMultFactorIncrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.mult_factor_.mult_factor_increase_, this_._impl_.mult_factor_.mult_factor_increase_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMultFactorDecrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.mult_factor_.mult_factor_decrease_, this_._impl_.mult_factor_.mult_factor_decrease_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.SnakeBrightnessEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SnakeBrightnessEffectConfig::ByteSizeLong(const MessageLite& base) {
  const SnakeBrightnessEffectConfig& this_ = static_cast<const SnakeBrightnessEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SnakeBrightnessEffectConfig::ByteSizeLong() const {
  const SnakeBrightnessEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.SnakeBrightnessEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.head_);
    }
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tail_length_);
    }
    // bool cyclic = 3 [json_name = "cyclic"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_cyclic() != 0) {
        total_size += 2;
      }
    }
    // float repeat_num = 4 [json_name = "repeatNum"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_num()) != 0) {
        total_size += 5;
      }
    }
  }
  switch (this_.mult_factor_case()) {
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 5 [json_name = "multFactorIncrease"];
    case kMultFactorIncrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_increase_);
      break;
    }
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 6 [json_name = "multFactorDecrease"];
    case kMultFactorDecrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_decrease_);
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SnakeBrightnessEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SnakeBrightnessEffectConfig*>(&to_msg);
  auto& from = static_cast<const SnakeBrightnessEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.SnakeBrightnessEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.head_ != nullptr);
      if (_this->_impl_.head_ == nullptr) {
        _this->_impl_.head_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.head_);
      } else {
        _this->_impl_.head_->MergeFrom(*from._impl_.head_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.tail_length_ != nullptr);
      if (_this->_impl_.tail_length_ == nullptr) {
        _this->_impl_.tail_length_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tail_length_);
      } else {
        _this->_impl_.tail_length_->MergeFrom(*from._impl_.tail_length_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_cyclic() != 0) {
        _this->_impl_.cyclic_ = from._impl_.cyclic_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_repeat_num()) != 0) {
        _this->_impl_.repeat_num_ = from._impl_.repeat_num_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_mult_factor();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMultFactorIncrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_increase_->MergeFrom(*from._impl_.mult_factor_.mult_factor_increase_);
        }
        break;
      }
      case kMultFactorDecrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_decrease_->MergeFrom(*from._impl_.mult_factor_.mult_factor_decrease_);
        }
        break;
      }
      case MULT_FACTOR_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SnakeBrightnessEffectConfig::CopyFrom(const SnakeBrightnessEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.SnakeBrightnessEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SnakeBrightnessEffectConfig::InternalSwap(SnakeBrightnessEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.repeat_num_)
      + sizeof(SnakeBrightnessEffectConfig::_impl_.repeat_num_)
      - PROTOBUF_FIELD_OFFSET(SnakeBrightnessEffectConfig, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
  swap(_impl_.mult_factor_, other->_impl_.mult_factor_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata SnakeBrightnessEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SnakeHueEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SnakeHueEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_._has_bits_);
};

void SnakeHueEffectConfig::clear_head() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.head_ != nullptr) _impl_.head_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SnakeHueEffectConfig::clear_tail_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tail_length_ != nullptr) _impl_.tail_length_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SnakeHueEffectConfig::clear_offset_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.offset_factor_ != nullptr) _impl_.offset_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
SnakeHueEffectConfig::SnakeHueEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SnakeHueEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.SnakeHueEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SnakeHueEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::SnakeHueEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SnakeHueEffectConfig::SnakeHueEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SnakeHueEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SnakeHueEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SnakeHueEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.head_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.head_)
                : nullptr;
  _impl_.tail_length_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tail_length_)
                : nullptr;
  _impl_.offset_factor_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_factor_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cyclic_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, cyclic_),
           offsetof(Impl_, repeat_num_) -
               offsetof(Impl_, cyclic_) +
               sizeof(Impl_::repeat_num_));

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.SnakeHueEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SnakeHueEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SnakeHueEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, head_),
           0,
           offsetof(Impl_, repeat_num_) -
               offsetof(Impl_, head_) +
               sizeof(Impl_::repeat_num_));
}
SnakeHueEffectConfig::~SnakeHueEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.SnakeHueEffectConfig)
  SharedDtor(*this);
}
inline void SnakeHueEffectConfig::SharedDtor(MessageLite& self) {
  SnakeHueEffectConfig& this_ = static_cast<SnakeHueEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.head_;
  delete this_._impl_.tail_length_;
  delete this_._impl_.offset_factor_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SnakeHueEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SnakeHueEffectConfig(arena);
}
constexpr auto SnakeHueEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SnakeHueEffectConfig),
                                            alignof(SnakeHueEffectConfig));
}
constexpr auto SnakeHueEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SnakeHueEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SnakeHueEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SnakeHueEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SnakeHueEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SnakeHueEffectConfig>(), &SnakeHueEffectConfig::ByteSizeLong,
              &SnakeHueEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_._cached_size_),
          false,
      },
      &SnakeHueEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SnakeHueEffectConfig_class_data_ =
        SnakeHueEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SnakeHueEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SnakeHueEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SnakeHueEffectConfig_class_data_.tc_table);
  return SnakeHueEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2>
SnakeHueEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SnakeHueEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SnakeHueEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.head_)}},
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.tail_length_)}},
    // bool cyclic = 3 [json_name = "cyclic"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SnakeHueEffectConfig, _impl_.cyclic_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.cyclic_)}},
    // float repeat_num = 4 [json_name = "repeatNum"];
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.repeat_num_)}},
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 5 [json_name = "offsetFactor"];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.offset_factor_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    {PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.head_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    {PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.tail_length_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool cyclic = 3 [json_name = "cyclic"];
    {PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.cyclic_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // float repeat_num = 4 [json_name = "repeatNum"];
    {PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.repeat_num_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 5 [json_name = "offsetFactor"];
    {PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.offset_factor_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SnakeHueEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.SnakeHueEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.head_ != nullptr);
      _impl_.head_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.tail_length_ != nullptr);
      _impl_.tail_length_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.offset_factor_ != nullptr);
      _impl_.offset_factor_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000018u) != 0) {
    ::memset(&_impl_.cyclic_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.repeat_num_) -
        reinterpret_cast<char*>(&_impl_.cyclic_)) + sizeof(_impl_.repeat_num_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SnakeHueEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SnakeHueEffectConfig& this_ = static_cast<const SnakeHueEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SnakeHueEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SnakeHueEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.SnakeHueEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.head_, this_._impl_.head_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.tail_length_, this_._impl_.tail_length_->GetCachedSize(), target,
        stream);
  }

  // bool cyclic = 3 [json_name = "cyclic"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (this_._internal_cyclic() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_cyclic(), target);
    }
  }

  // float repeat_num = 4 [json_name = "repeatNum"];
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_num()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          4, this_._internal_repeat_num(), target);
    }
  }

  // .kivsee.proto.render.v1.FloatFunction offset_factor = 5 [json_name = "offsetFactor"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.offset_factor_, this_._impl_.offset_factor_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.SnakeHueEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SnakeHueEffectConfig::ByteSizeLong(const MessageLite& base) {
  const SnakeHueEffectConfig& this_ = static_cast<const SnakeHueEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SnakeHueEffectConfig::ByteSizeLong() const {
  const SnakeHueEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.SnakeHueEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.head_);
    }
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tail_length_);
    }
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 5 [json_name = "offsetFactor"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.offset_factor_);
    }
    // bool cyclic = 3 [json_name = "cyclic"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_cyclic() != 0) {
        total_size += 2;
      }
    }
    // float repeat_num = 4 [json_name = "repeatNum"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_num()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SnakeHueEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SnakeHueEffectConfig*>(&to_msg);
  auto& from = static_cast<const SnakeHueEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.SnakeHueEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.head_ != nullptr);
      if (_this->_impl_.head_ == nullptr) {
        _this->_impl_.head_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.head_);
      } else {
        _this->_impl_.head_->MergeFrom(*from._impl_.head_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.tail_length_ != nullptr);
      if (_this->_impl_.tail_length_ == nullptr) {
        _this->_impl_.tail_length_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tail_length_);
      } else {
        _this->_impl_.tail_length_->MergeFrom(*from._impl_.tail_length_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.offset_factor_ != nullptr);
      if (_this->_impl_.offset_factor_ == nullptr) {
        _this->_impl_.offset_factor_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_factor_);
      } else {
        _this->_impl_.offset_factor_->MergeFrom(*from._impl_.offset_factor_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_cyclic() != 0) {
        _this->_impl_.cyclic_ = from._impl_.cyclic_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_repeat_num()) != 0) {
        _this->_impl_.repeat_num_ = from._impl_.repeat_num_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SnakeHueEffectConfig::CopyFrom(const SnakeHueEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.SnakeHueEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SnakeHueEffectConfig::InternalSwap(SnakeHueEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.repeat_num_)
      + sizeof(SnakeHueEffectConfig::_impl_.repeat_num_)
      - PROTOBUF_FIELD_OFFSET(SnakeHueEffectConfig, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::google::protobuf::Metadata SnakeHueEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SnakeSaturationEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SnakeSaturationEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeSaturationEffectConfig, _impl_._oneof_case_);
};

void SnakeSaturationEffectConfig::clear_head() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.head_ != nullptr) _impl_.head_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SnakeSaturationEffectConfig::clear_tail_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tail_length_ != nullptr) _impl_.tail_length_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SnakeSaturationEffectConfig::set_allocated_mult_factor_increase(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_increase) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_increase) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_increase)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_increase = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_increase, submessage_arena);
    }
    set_has_mult_factor_increase();
    _impl_.mult_factor_.mult_factor_increase_ = mult_factor_increase;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.SnakeSaturationEffectConfig.mult_factor_increase)
}
void SnakeSaturationEffectConfig::clear_mult_factor_increase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorIncrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_increase_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
    }
    clear_has_mult_factor();
  }
}
void SnakeSaturationEffectConfig::set_allocated_mult_factor_decrease(::kivsee::proto::render::v1::FloatFunction* PROTOBUF_NULLABLE mult_factor_decrease) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_mult_factor();
  if (mult_factor_decrease) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(mult_factor_decrease)->GetArena();
    if (message_arena != submessage_arena) {
      mult_factor_decrease = ::google::protobuf::internal::GetOwnedMessage(message_arena, mult_factor_decrease, submessage_arena);
    }
    set_has_mult_factor_decrease();
    _impl_.mult_factor_.mult_factor_decrease_ = mult_factor_decrease;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.SnakeSaturationEffectConfig.mult_factor_decrease)
}
void SnakeSaturationEffectConfig::clear_mult_factor_decrease() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mult_factor_case() == kMultFactorDecrease) {
    if (GetArena() == nullptr) {
      delete _impl_.mult_factor_.mult_factor_decrease_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
    }
    clear_has_mult_factor();
  }
}
SnakeSaturationEffectConfig::SnakeSaturationEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SnakeSaturationEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.SnakeSaturationEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SnakeSaturationEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::SnakeSaturationEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mult_factor_{},
        _oneof_case_{from._oneof_case_[0]} {}

SnakeSaturationEffectConfig::SnakeSaturationEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SnakeSaturationEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SnakeSaturationEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SnakeSaturationEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.head_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.head_)
                : nullptr;
  _impl_.tail_length_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tail_length_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cyclic_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, cyclic_),
           offsetof(Impl_, repeat_num_) -
               offsetof(Impl_, cyclic_) +
               sizeof(Impl_::repeat_num_));
  switch (mult_factor_case()) {
    case MULT_FACTOR_NOT_SET:
      break;
      case kMultFactorIncrease:
        _impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        break;
      case kMultFactorDecrease:
        _impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.SnakeSaturationEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SnakeSaturationEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        mult_factor_{},
        _oneof_case_{} {}

inline void SnakeSaturationEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, head_),
           0,
           offsetof(Impl_, repeat_num_) -
               offsetof(Impl_, head_) +
               sizeof(Impl_::repeat_num_));
}
SnakeSaturationEffectConfig::~SnakeSaturationEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.SnakeSaturationEffectConfig)
  SharedDtor(*this);
}
inline void SnakeSaturationEffectConfig::SharedDtor(MessageLite& self) {
  SnakeSaturationEffectConfig& this_ = static_cast<SnakeSaturationEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.head_;
  delete this_._impl_.tail_length_;
  if (this_.has_mult_factor()) {
    this_.clear_mult_factor();
  }
  this_._impl_.~Impl_();
}

void SnakeSaturationEffectConfig::clear_mult_factor() {
// @@protoc_insertion_point(one_of_clear_start:kivsee.proto.render.v1.SnakeSaturationEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (mult_factor_case()) {
    case kMultFactorIncrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_increase_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_increase_);
      }
      break;
    }
    case kMultFactorDecrease: {
      if (GetArena() == nullptr) {
        delete _impl_.mult_factor_.mult_factor_decrease_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mult_factor_.mult_factor_decrease_);
      }
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MULT_FACTOR_NOT_SET;
}


inline void* PROTOBUF_NONNULL SnakeSaturationEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SnakeSaturationEffectConfig(arena);
}
constexpr auto SnakeSaturationEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SnakeSaturationEffectConfig),
                                            alignof(SnakeSaturationEffectConfig));
}
constexpr auto SnakeSaturationEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SnakeSaturationEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SnakeSaturationEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SnakeSaturationEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SnakeSaturationEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SnakeSaturationEffectConfig>(), &SnakeSaturationEffectConfig::ByteSizeLong,
              &SnakeSaturationEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_._cached_size_),
          false,
      },
      &SnakeSaturationEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SnakeSaturationEffectConfig_class_data_ =
        SnakeSaturationEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SnakeSaturationEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SnakeSaturationEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SnakeSaturationEffectConfig_class_data_.tc_table);
  return SnakeSaturationEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 6, 4, 0, 2>
SnakeSaturationEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SnakeSaturationEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SnakeSaturationEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float repeat_num = 4 [json_name = "repeatNum"];
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.repeat_num_)}},
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.head_)}},
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.tail_length_)}},
    // bool cyclic = 3 [json_name = "cyclic"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SnakeSaturationEffectConfig, _impl_.cyclic_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.cyclic_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    {PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.head_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    {PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.tail_length_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool cyclic = 3 [json_name = "cyclic"];
    {PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.cyclic_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // float repeat_num = 4 [json_name = "repeatNum"];
    {PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.repeat_num_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 5 [json_name = "multFactorIncrease"];
    {PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.mult_factor_.mult_factor_increase_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 6 [json_name = "multFactorDecrease"];
    {PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.mult_factor_.mult_factor_decrease_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SnakeSaturationEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.SnakeSaturationEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.head_ != nullptr);
      _impl_.head_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.tail_length_ != nullptr);
      _impl_.tail_length_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000000cu) != 0) {
    ::memset(&_impl_.cyclic_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.repeat_num_) -
        reinterpret_cast<char*>(&_impl_.cyclic_)) + sizeof(_impl_.repeat_num_));
  }
  clear_mult_factor();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SnakeSaturationEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SnakeSaturationEffectConfig& this_ = static_cast<const SnakeSaturationEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SnakeSaturationEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SnakeSaturationEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.SnakeSaturationEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.head_, this_._impl_.head_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.tail_length_, this_._impl_.tail_length_->GetCachedSize(), target,
        stream);
  }

  // bool cyclic = 3 [json_name = "cyclic"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (this_._internal_cyclic() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_cyclic(), target);
    }
  }

  // float repeat_num = 4 [json_name = "repeatNum"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_num()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          4, this_._internal_repeat_num(), target);
    }
  }

  switch (this_.mult_factor_case()) {
    case kMultFactorIncrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.mult_factor_.mult_factor_increase_, this_._impl_.mult_factor_.mult_factor_increase_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMultFactorDecrease: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.mult_factor_.mult_factor_decrease_, this_._impl_.mult_factor_.mult_factor_decrease_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.SnakeSaturationEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SnakeSaturationEffectConfig::ByteSizeLong(const MessageLite& base) {
  const SnakeSaturationEffectConfig& this_ = static_cast<const SnakeSaturationEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SnakeSaturationEffectConfig::ByteSizeLong() const {
  const SnakeSaturationEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.SnakeSaturationEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.head_);
    }
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tail_length_);
    }
    // bool cyclic = 3 [json_name = "cyclic"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_cyclic() != 0) {
        total_size += 2;
      }
    }
    // float repeat_num = 4 [json_name = "repeatNum"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_num()) != 0) {
        total_size += 5;
      }
    }
  }
  switch (this_.mult_factor_case()) {
    // .kivsee.proto.render.v1.FloatFunction mult_factor_increase = 5 [json_name = "multFactorIncrease"];
    case kMultFactorIncrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_increase_);
      break;
    }
    // .kivsee.proto.render.v1.FloatFunction mult_factor_decrease = 6 [json_name = "multFactorDecrease"];
    case kMultFactorDecrease: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_.mult_factor_decrease_);
      break;
    }
    case MULT_FACTOR_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SnakeSaturationEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SnakeSaturationEffectConfig*>(&to_msg);
  auto& from = static_cast<const SnakeSaturationEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.SnakeSaturationEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.head_ != nullptr);
      if (_this->_impl_.head_ == nullptr) {
        _this->_impl_.head_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.head_);
      } else {
        _this->_impl_.head_->MergeFrom(*from._impl_.head_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.tail_length_ != nullptr);
      if (_this->_impl_.tail_length_ == nullptr) {
        _this->_impl_.tail_length_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tail_length_);
      } else {
        _this->_impl_.tail_length_->MergeFrom(*from._impl_.tail_length_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_cyclic() != 0) {
        _this->_impl_.cyclic_ = from._impl_.cyclic_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_repeat_num()) != 0) {
        _this->_impl_.repeat_num_ = from._impl_.repeat_num_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_mult_factor();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMultFactorIncrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_increase_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_increase_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_increase_->MergeFrom(*from._impl_.mult_factor_.mult_factor_increase_);
        }
        break;
      }
      case kMultFactorDecrease: {
        if (oneof_needs_init) {
          _this->_impl_.mult_factor_.mult_factor_decrease_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_.mult_factor_decrease_);
        } else {
          _this->_impl_.mult_factor_.mult_factor_decrease_->MergeFrom(*from._impl_.mult_factor_.mult_factor_decrease_);
        }
        break;
      }
      case MULT_FACTOR_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SnakeSaturationEffectConfig::CopyFrom(const SnakeSaturationEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.SnakeSaturationEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SnakeSaturationEffectConfig::InternalSwap(SnakeSaturationEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.repeat_num_)
      + sizeof(SnakeSaturationEffectConfig::_impl_.repeat_num_)
      - PROTOBUF_FIELD_OFFSET(SnakeSaturationEffectConfig, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
  swap(_impl_.mult_factor_, other->_impl_.mult_factor_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata SnakeSaturationEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<EffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_._has_bits_);
};

EffectConfig::EffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.EffectConfig)
}
PROTOBUF_NDEBUG_INLINE EffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::EffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        segments_(arena, from.segments_) {}

EffectConfig::EffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const EffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_),
           offsetof(Impl_, repeat_end_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::repeat_end_));

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.EffectConfig)
}
PROTOBUF_NDEBUG_INLINE EffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        segments_(arena) {}

inline void EffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           0,
           offsetof(Impl_, repeat_end_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::repeat_end_));
}
EffectConfig::~EffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.EffectConfig)
  SharedDtor(*this);
}
inline void EffectConfig::SharedDtor(MessageLite& self) {
  EffectConfig& this_ = static_cast<EffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.segments_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL EffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EffectConfig(arena);
}
constexpr auto EffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EffectConfig),
                                            alignof(EffectConfig));
}
constexpr auto EffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EffectConfig>(), &EffectConfig::ByteSizeLong,
              &EffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_._cached_size_),
          false,
      },
      &EffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull EffectConfig_class_data_ =
        EffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
EffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EffectConfig_class_data_.tc_table);
  return EffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 52, 2>
EffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    EffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::EffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 start_time = 1 [json_name = "startTime"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EffectConfig, _impl_.start_time_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.start_time_)}},
    // uint32 end_time = 2 [json_name = "endTime"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EffectConfig, _impl_.end_time_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.end_time_)}},
    // string segments = 3 [json_name = "segments"];
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.segments_)}},
    // float repeat_num = 4 [json_name = "repeatNum"];
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_num_)}},
    // float repeat_start = 5 [json_name = "repeatStart"];
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_start_)}},
    // float repeat_end = 6 [json_name = "repeatEnd"];
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_end_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 start_time = 1 [json_name = "startTime"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.start_time_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 end_time = 2 [json_name = "endTime"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.end_time_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // string segments = 3 [json_name = "segments"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.segments_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float repeat_num = 4 [json_name = "repeatNum"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_num_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float repeat_start = 5 [json_name = "repeatStart"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_start_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float repeat_end = 6 [json_name = "repeatEnd"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_end_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\43\0\0\10\0\0\0\0"
    "kivsee.proto.render.v1.EffectConfig"
    "segments"
  }},
};
PROTOBUF_NOINLINE void EffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.EffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.segments_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000003eu) != 0) {
    ::memset(&_impl_.start_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.repeat_end_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.repeat_end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EffectConfig& this_ = static_cast<const EffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.EffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 start_time = 1 [json_name = "startTime"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_start_time() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_start_time(), target);
    }
  }

  // uint32 end_time = 2 [json_name = "endTime"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_end_time() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_end_time(), target);
    }
  }

  // string segments = 3 [json_name = "segments"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_segments().empty()) {
      const ::std::string& _s = this_._internal_segments();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kivsee.proto.render.v1.EffectConfig.segments");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // float repeat_num = 4 [json_name = "repeatNum"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_num()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          4, this_._internal_repeat_num(), target);
    }
  }

  // float repeat_start = 5 [json_name = "repeatStart"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_start()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          5, this_._internal_repeat_start(), target);
    }
  }

  // float repeat_end = 6 [json_name = "repeatEnd"];
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_end()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          6, this_._internal_repeat_end(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.EffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EffectConfig::ByteSizeLong(const MessageLite& base) {
  const EffectConfig& this_ = static_cast<const EffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EffectConfig::ByteSizeLong() const {
  const EffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.EffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string segments = 3 [json_name = "segments"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_segments().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_segments());
      }
    }
    // uint32 start_time = 1 [json_name = "startTime"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_start_time() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_start_time());
      }
    }
    // uint32 end_time = 2 [json_name = "endTime"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_end_time() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_end_time());
      }
    }
    // float repeat_num = 4 [json_name = "repeatNum"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_num()) != 0) {
        total_size += 5;
      }
    }
    // float repeat_start = 5 [json_name = "repeatStart"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_start()) != 0) {
        total_size += 5;
      }
    }
    // float repeat_end = 6 [json_name = "repeatEnd"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_end()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EffectConfig*>(&to_msg);
  auto& from = static_cast<const EffectConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.EffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_segments().empty()) {
        _this->_internal_set_segments(from._internal_segments());
      } else {
        if (_this->_impl_.segments_.IsDefault()) {
          _this->_internal_set_segments("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_start_time() != 0) {
        _this->_impl_.start_time_ = from._impl_.start_time_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_end_time() != 0) {
        _this->_impl_.end_time_ = from._impl_.end_time_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_repeat_num()) != 0) {
        _this->_impl_.repeat_num_ = from._impl_.repeat_num_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_repeat_start()) != 0) {
        _this->_impl_.repeat_start_ = from._impl_.repeat_start_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_repeat_end()) != 0) {
        _this->_impl_.repeat_end_ = from._impl_.repeat_end_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EffectConfig::CopyFrom(const EffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.EffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EffectConfig::InternalSwap(EffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.segments_, &other->_impl_.segments_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_end_)
      + sizeof(EffectConfig::_impl_.repeat_end_)
      - PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::google::protobuf::Metadata EffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EffectProto::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<EffectProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EffectProto, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectProto, _impl_._oneof_case_);
};

void EffectProto::set_allocated_const_color(::kivsee::proto::render::v1::ConstColorEffectConfig* PROTOBUF_NULLABLE const_color) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (const_color) {
    ::google::protobuf::Arena* submessage_arena = const_color->GetArena();
    if (message_arena != submessage_arena) {
      const_color = ::google::protobuf::internal::GetOwnedMessage(message_arena, const_color, submessage_arena);
    }
    set_has_const_color();
    _impl_.effect_.const_color_ = const_color;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.const_color)
}
void EffectProto::set_allocated_rainbow(::kivsee::proto::render::v1::RainbowEffectConfig* PROTOBUF_NULLABLE rainbow) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (rainbow) {
    ::google::protobuf::Arena* submessage_arena = rainbow->GetArena();
    if (message_arena != submessage_arena) {
      rainbow = ::google::protobuf::internal::GetOwnedMessage(message_arena, rainbow, submessage_arena);
    }
    set_has_rainbow();
    _impl_.effect_.rainbow_ = rainbow;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.rainbow)
}
void EffectProto::set_allocated_brightness(::kivsee::proto::render::v1::BrightnessEffectConfig* PROTOBUF_NULLABLE brightness) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (brightness) {
    ::google::protobuf::Arena* submessage_arena = brightness->GetArena();
    if (message_arena != submessage_arena) {
      brightness = ::google::protobuf::internal::GetOwnedMessage(message_arena, brightness, submessage_arena);
    }
    set_has_brightness();
    _impl_.effect_.brightness_ = brightness;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.brightness)
}
void EffectProto::set_allocated_hue(::kivsee::proto::render::v1::HueEffectConfig* PROTOBUF_NULLABLE hue) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (hue) {
    ::google::protobuf::Arena* submessage_arena = hue->GetArena();
    if (message_arena != submessage_arena) {
      hue = ::google::protobuf::internal::GetOwnedMessage(message_arena, hue, submessage_arena);
    }
    set_has_hue();
    _impl_.effect_.hue_ = hue;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.hue)
}
void EffectProto::set_allocated_saturation(::kivsee::proto::render::v1::SaturationEffectConfig* PROTOBUF_NULLABLE saturation) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (saturation) {
    ::google::protobuf::Arena* submessage_arena = saturation->GetArena();
    if (message_arena != submessage_arena) {
      saturation = ::google::protobuf::internal::GetOwnedMessage(message_arena, saturation, submessage_arena);
    }
    set_has_saturation();
    _impl_.effect_.saturation_ = saturation;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.saturation)
}
void EffectProto::set_allocated_snake(::kivsee::proto::render::v1::SnakeEffectConfig* PROTOBUF_NULLABLE snake) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (snake) {
    ::google::protobuf::Arena* submessage_arena = snake->GetArena();
    if (message_arena != submessage_arena) {
      snake = ::google::protobuf::internal::GetOwnedMessage(message_arena, snake, submessage_arena);
    }
    set_has_snake();
    _impl_.effect_.snake_ = snake;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.snake)
}
void EffectProto::set_allocated_timed_brightness(::kivsee::proto::render::v1::TimedBrightnessEffectConfig* PROTOBUF_NULLABLE timed_brightness) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (timed_brightness) {
    ::google::protobuf::Arena* submessage_arena = timed_brightness->GetArena();
    if (message_arena != submessage_arena) {
      timed_brightness = ::google::protobuf::internal::GetOwnedMessage(message_arena, timed_brightness, submessage_arena);
    }
    set_has_timed_brightness();
    _impl_.effect_.timed_brightness_ = timed_brightness;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.timed_brightness)
}
void EffectProto::set_allocated_timed_hue(::kivsee::proto::render::v1::TimedHueEffectConfig* PROTOBUF_NULLABLE timed_hue) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (timed_hue) {
    ::google::protobuf::Arena* submessage_arena = timed_hue->GetArena();
    if (message_arena != submessage_arena) {
      timed_hue = ::google::protobuf::internal::GetOwnedMessage(message_arena, timed_hue, submessage_arena);
    }
    set_has_timed_hue();
    _impl_.effect_.timed_hue_ = timed_hue;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.timed_hue)
}
void EffectProto::set_allocated_timed_saturation(::kivsee::proto::render::v1::TimedSaturationEffectConfig* PROTOBUF_NULLABLE timed_saturation) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (timed_saturation) {
    ::google::protobuf::Arena* submessage_arena = timed_saturation->GetArena();
    if (message_arena != submessage_arena) {
      timed_saturation = ::google::protobuf::internal::GetOwnedMessage(message_arena, timed_saturation, submessage_arena);
    }
    set_has_timed_saturation();
    _impl_.effect_.timed_saturation_ = timed_saturation;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.timed_saturation)
}
void EffectProto::set_allocated_position_brightness(::kivsee::proto::render::v1::PositionBrightnessEffectConfig* PROTOBUF_NULLABLE position_brightness) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (position_brightness) {
    ::google::protobuf::Arena* submessage_arena = position_brightness->GetArena();
    if (message_arena != submessage_arena) {
      position_brightness = ::google::protobuf::internal::GetOwnedMessage(message_arena, position_brightness, submessage_arena);
    }
    set_has_position_brightness();
    _impl_.effect_.position_brightness_ = position_brightness;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.position_brightness)
}
void EffectProto::set_allocated_position_hue(::kivsee::proto::render::v1::PositionHueEffectConfig* PROTOBUF_NULLABLE position_hue) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (position_hue) {
    ::google::protobuf::Arena* submessage_arena = position_hue->GetArena();
    if (message_arena != submessage_arena) {
      position_hue = ::google::protobuf::internal::GetOwnedMessage(message_arena, position_hue, submessage_arena);
    }
    set_has_position_hue();
    _impl_.effect_.position_hue_ = position_hue;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.position_hue)
}
void EffectProto::set_allocated_position_saturation(::kivsee::proto::render::v1::PositionSaturationEffectConfig* PROTOBUF_NULLABLE position_saturation) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (position_saturation) {
    ::google::protobuf::Arena* submessage_arena = position_saturation->GetArena();
    if (message_arena != submessage_arena) {
      position_saturation = ::google::protobuf::internal::GetOwnedMessage(message_arena, position_saturation, submessage_arena);
    }
    set_has_position_saturation();
    _impl_.effect_.position_saturation_ = position_saturation;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.position_saturation)
}
void EffectProto::set_allocated_snake_brightness(::kivsee::proto::render::v1::SnakeBrightnessEffectConfig* PROTOBUF_NULLABLE snake_brightness) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (snake_brightness) {
    ::google::protobuf::Arena* submessage_arena = snake_brightness->GetArena();
    if (message_arena != submessage_arena) {
      snake_brightness = ::google::protobuf::internal::GetOwnedMessage(message_arena, snake_brightness, submessage_arena);
    }
    set_has_snake_brightness();
    _impl_.effect_.snake_brightness_ = snake_brightness;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.snake_brightness)
}
void EffectProto::set_allocated_snake_hue(::kivsee::proto::render::v1::SnakeHueEffectConfig* PROTOBUF_NULLABLE snake_hue) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (snake_hue) {
    ::google::protobuf::Arena* submessage_arena = snake_hue->GetArena();
    if (message_arena != submessage_arena) {
      snake_hue = ::google::protobuf::internal::GetOwnedMessage(message_arena, snake_hue, submessage_arena);
    }
    set_has_snake_hue();
    _impl_.effect_.snake_hue_ = snake_hue;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.snake_hue)
}
void EffectProto::set_allocated_snake_saturation(::kivsee::proto::render::v1::SnakeSaturationEffectConfig* PROTOBUF_NULLABLE snake_saturation) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (snake_saturation) {
    ::google::protobuf::Arena* submessage_arena = snake_saturation->GetArena();
    if (message_arena != submessage_arena) {
      snake_saturation = ::google::protobuf::internal::GetOwnedMessage(message_arena, snake_saturation, submessage_arena);
    }
    set_has_snake_saturation();
    _impl_.effect_.snake_saturation_ = snake_saturation;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.snake_saturation)
}
EffectProto::EffectProto(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EffectProto_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.EffectProto)
}
PROTOBUF_NDEBUG_INLINE EffectProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::EffectProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        effect_{},
        _oneof_case_{from._oneof_case_[0]} {}

EffectProto::EffectProto(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const EffectProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EffectProto_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EffectProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.effect_config_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_config_)
                : nullptr;
  switch (effect_case()) {
    case EFFECT_NOT_SET:
      break;
      case kConstColor:
        _impl_.effect_.const_color_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.const_color_);
        break;
      case kRainbow:
        _impl_.effect_.rainbow_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.rainbow_);
        break;
      case kBrightness:
        _impl_.effect_.brightness_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.brightness_);
        break;
      case kHue:
        _impl_.effect_.hue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.hue_);
        break;
      case kSaturation:
        _impl_.effect_.saturation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.saturation_);
        break;
      case kSnake:
        _impl_.effect_.snake_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.snake_);
        break;
      case kTimedBrightness:
        _impl_.effect_.timed_brightness_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.timed_brightness_);
        break;
      case kTimedHue:
        _impl_.effect_.timed_hue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.timed_hue_);
        break;
      case kTimedSaturation:
        _impl_.effect_.timed_saturation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.timed_saturation_);
        break;
      case kPositionBrightness:
        _impl_.effect_.position_brightness_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.position_brightness_);
        break;
      case kPositionHue:
        _impl_.effect_.position_hue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.position_hue_);
        break;
      case kPositionSaturation:
        _impl_.effect_.position_saturation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.position_saturation_);
        break;
      case kSnakeBrightness:
        _impl_.effect_.snake_brightness_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.snake_brightness_);
        break;
      case kSnakeHue:
        _impl_.effect_.snake_hue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.snake_hue_);
        break;
      case kSnakeSaturation:
        _impl_.effect_.snake_saturation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.snake_saturation_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.EffectProto)
}
PROTOBUF_NDEBUG_INLINE EffectProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        effect_{},
        _oneof_case_{} {}

inline void EffectProto::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.effect_config_ = {};
}
EffectProto::~EffectProto() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.EffectProto)
  SharedDtor(*this);
}
inline void EffectProto::SharedDtor(MessageLite& self) {
  EffectProto& this_ = static_cast<EffectProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.effect_config_;
  if (this_.has_effect()) {
    this_.clear_effect();
  }
  this_._impl_.~Impl_();
}

void EffectProto::clear_effect() {
// @@protoc_insertion_point(one_of_clear_start:kivsee.proto.render.v1.EffectProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (effect_case()) {
    case kConstColor: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.const_color_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.const_color_);
      }
      break;
    }
    case kRainbow: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.rainbow_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.rainbow_);
      }
      break;
    }
    case kBrightness: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.brightness_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.brightness_);
      }
      break;
    }
    case kHue: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.hue_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.hue_);
      }
      break;
    }
    case kSaturation: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.saturation_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.saturation_);
      }
      break;
    }
    case kSnake: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.snake_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.snake_);
      }
      break;
    }
    case kTimedBrightness: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.timed_brightness_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.timed_brightness_);
      }
      break;
    }
    case kTimedHue: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.timed_hue_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.timed_hue_);
      }
      break;
    }
    case kTimedSaturation: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.timed_saturation_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.timed_saturation_);
      }
      break;
    }
    case kPositionBrightness: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.position_brightness_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.position_brightness_);
      }
      break;
    }
    case kPositionHue: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.position_hue_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.position_hue_);
      }
      break;
    }
    case kPositionSaturation: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.position_saturation_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.position_saturation_);
      }
      break;
    }
    case kSnakeBrightness: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.snake_brightness_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.snake_brightness_);
      }
      break;
    }
    case kSnakeHue: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.snake_hue_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.snake_hue_);
      }
      break;
    }
    case kSnakeSaturation: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.snake_saturation_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.snake_saturation_);
      }
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EFFECT_NOT_SET;
}


inline void* PROTOBUF_NONNULL EffectProto::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EffectProto(arena);
}
constexpr auto EffectProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EffectProto),
                                            alignof(EffectProto));
}
constexpr auto EffectProto::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EffectProto_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EffectProto::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EffectProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EffectProto::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EffectProto>(), &EffectProto::ByteSizeLong,
              &EffectProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EffectProto, _impl_._cached_size_),
          false,
      },
      &EffectProto::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull EffectProto_class_data_ =
        EffectProto::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
EffectProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EffectProto_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EffectProto_class_data_.tc_table);
  return EffectProto_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 16, 16, 0, 2>
EffectProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EffectProto, _impl_._has_bits_),
    0, // no _extensions_
    16, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    16,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    EffectProto_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::EffectProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.EffectConfig effect_config = 1 [json_name = "effectConfig"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.EffectConfig effect_config = 1 [json_name = "effectConfig"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.ConstColorEffectConfig const_color = 2 [json_name = "constColor"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.const_color_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.RainbowEffectConfig rainbow = 3 [json_name = "rainbow"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.rainbow_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.BrightnessEffectConfig brightness = 4 [json_name = "brightness"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.brightness_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.HueEffectConfig hue = 5 [json_name = "hue"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.hue_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.SaturationEffectConfig saturation = 6 [json_name = "saturation"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.saturation_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.SnakeEffectConfig snake = 7 [json_name = "snake"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.snake_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.TimedBrightnessEffectConfig timed_brightness = 8 [json_name = "timedBrightness"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.timed_brightness_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.TimedHueEffectConfig timed_hue = 9 [json_name = "timedHue"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.timed_hue_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.TimedSaturationEffectConfig timed_saturation = 10 [json_name = "timedSaturation"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.timed_saturation_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.PositionBrightnessEffectConfig position_brightness = 11 [json_name = "positionBrightness"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.position_brightness_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.PositionHueEffectConfig position_hue = 12 [json_name = "positionHue"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.position_hue_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.PositionSaturationEffectConfig position_saturation = 13 [json_name = "positionSaturation"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.position_saturation_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.SnakeBrightnessEffectConfig snake_brightness = 14 [json_name = "snakeBrightness"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.snake_brightness_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.SnakeHueEffectConfig snake_hue = 15 [json_name = "snakeHue"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.snake_hue_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.SnakeSaturationEffectConfig snake_saturation = 16 [json_name = "snakeSaturation"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.snake_saturation_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::EffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::ConstColorEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::RainbowEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::BrightnessEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::HueEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SaturationEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SnakeEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::TimedBrightnessEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::TimedHueEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::TimedSaturationEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::PositionBrightnessEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::PositionHueEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::PositionSaturationEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SnakeBrightnessEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SnakeHueEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SnakeSaturationEffectConfig>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void EffectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.EffectProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.effect_config_ != nullptr);
    _impl_.effect_config_->Clear();
  }
  clear_effect();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EffectProto::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EffectProto& this_ = static_cast<const EffectProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EffectProto::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EffectProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.EffectProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.EffectConfig effect_config = 1 [json_name = "effectConfig"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.effect_config_, this_._impl_.effect_config_->GetCachedSize(), target,
        stream);
  }

  switch (this_.effect_case()) {
    case kConstColor: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.effect_.const_color_, this_._impl_.effect_.const_color_->GetCachedSize(), target,
          stream);
      break;
    }
    case kRainbow: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.effect_.rainbow_, this_._impl_.effect_.rainbow_->GetCachedSize(), target,
          stream);
      break;
    }
    case kBrightness: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.effect_.brightness_, this_._impl_.effect_.brightness_->GetCachedSize(), target,
          stream);
      break;
    }
    case kHue: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.effect_.hue_, this_._impl_.effect_.hue_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSaturation: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.effect_.saturation_, this_._impl_.effect_.saturation_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSnake: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.effect_.snake_, this_._impl_.effect_.snake_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTimedBrightness: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *this_._impl_.effect_.timed_brightness_, this_._impl_.effect_.timed_brightness_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTimedHue: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, *this_._impl_.effect_.timed_hue_, this_._impl_.effect_.timed_hue_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTimedSaturation: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, *this_._impl_.effect_.timed_saturation_, this_._impl_.effect_.timed_saturation_->GetCachedSize(), target,
          stream);
      break;
    }
    case kPositionBrightness: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, *this_._impl_.effect_.position_brightness_, this_._impl_.effect_.position_brightness_->GetCachedSize(), target,
          stream);
      break;
    }
    case kPositionHue: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          12, *this_._impl_.effect_.position_hue_, this_._impl_.effect_.position_hue_->GetCachedSize(), target,
          stream);
      break;
    }
    case kPositionSaturation: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          13, *this_._impl_.effect_.position_saturation_, this_._impl_.effect_.position_saturation_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSnakeBrightness: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          14, *this_._impl_.effect_.snake_brightness_, this_._impl_.effect_.snake_brightness_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSnakeHue: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          15, *this_._impl_.effect_.snake_hue_, this_._impl_.effect_.snake_hue_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSnakeSaturation: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          16, *this_._impl_.effect_.snake_saturation_, this_._impl_.effect_.snake_saturation_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.EffectProto)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EffectProto::ByteSizeLong(const MessageLite& base) {
  const EffectProto& this_ = static_cast<const EffectProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EffectProto::ByteSizeLong() const {
  const EffectProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.EffectProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.EffectConfig effect_config = 1 [json_name = "effectConfig"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_config_);
    }
  }
  switch (this_.effect_case()) {
    // .kivsee.proto.render.v1.ConstColorEffectConfig const_color = 2 [json_name = "constColor"];
    case kConstColor: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.const_color_);
      break;
    }
    // .kivsee.proto.render.v1.RainbowEffectConfig rainbow = 3 [json_name = "rainbow"];
    case kRainbow: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.rainbow_);
      break;
    }
    // .kivsee.proto.render.v1.BrightnessEffectConfig brightness = 4 [json_name = "brightness"];
    case kBrightness: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.brightness_);
      break;
    }
    // .kivsee.proto.render.v1.HueEffectConfig hue = 5 [json_name = "hue"];
    case kHue: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.hue_);
      break;
    }
    // .kivsee.proto.render.v1.SaturationEffectConfig saturation = 6 [json_name = "saturation"];
    case kSaturation: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.saturation_);
      break;
    }
    // .kivsee.proto.render.v1.SnakeEffectConfig snake = 7 [json_name = "snake"];
    case kSnake: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.snake_);
      break;
    }
    // .kivsee.proto.render.v1.TimedBrightnessEffectConfig timed_brightness = 8 [json_name = "timedBrightness"];
    case kTimedBrightness: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.timed_brightness_);
      break;
    }
    // .kivsee.proto.render.v1.TimedHueEffectConfig timed_hue = 9 [json_name = "timedHue"];
    case kTimedHue: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.timed_hue_);
      break;
    }
    // .kivsee.proto.render.v1.TimedSaturationEffectConfig timed_saturation = 10 [json_name = "timedSaturation"];
    case kTimedSaturation: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.timed_saturation_);
      break;
    }
    // .kivsee.proto.render.v1.PositionBrightnessEffectConfig position_brightness = 11 [json_name = "positionBrightness"];
    case kPositionBrightness: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.position_brightness_);
      break;
    }
    // .kivsee.proto.render.v1.PositionHueEffectConfig position_hue = 12 [json_name = "positionHue"];
    case kPositionHue: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.position_hue_);
      break;
    }
    // .kivsee.proto.render.v1.PositionSaturationEffectConfig position_saturation = 13 [json_name = "positionSaturation"];
    case kPositionSaturation: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.position_saturation_);
      break;
    }
    // .kivsee.proto.render.v1.SnakeBrightnessEffectConfig snake_brightness = 14 [json_name = "snakeBrightness"];
    case kSnakeBrightness: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.snake_brightness_);
      break;
    }
    // .kivsee.proto.render.v1.SnakeHueEffectConfig snake_hue = 15 [json_name = "snakeHue"];
    case kSnakeHue: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.snake_hue_);
      break;
    }
    // .kivsee.proto.render.v1.SnakeSaturationEffectConfig snake_saturation = 16 [json_name = "snakeSaturation"];
    case kSnakeSaturation: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.snake_saturation_);
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EffectProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EffectProto*>(&to_msg);
  auto& from = static_cast<const EffectProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.EffectProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.effect_config_ != nullptr);
    if (_this->_impl_.effect_config_ == nullptr) {
      _this->_impl_.effect_config_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_config_);
    } else {
      _this->_impl_.effect_config_->MergeFrom(*from._impl_.effect_config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_effect();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kConstColor: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.const_color_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.const_color_);
        } else {
          _this->_impl_.effect_.const_color_->MergeFrom(*from._impl_.effect_.const_color_);
        }
        break;
      }
      case kRainbow: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.rainbow_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.rainbow_);
        } else {
          _this->_impl_.effect_.rainbow_->MergeFrom(*from._impl_.effect_.rainbow_);
        }
        break;
      }
      case kBrightness: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.brightness_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.brightness_);
        } else {
          _this->_impl_.effect_.brightness_->MergeFrom(*from._impl_.effect_.brightness_);
        }
        break;
      }
      case kHue: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.hue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.hue_);
        } else {
          _this->_impl_.effect_.hue_->MergeFrom(*from._impl_.effect_.hue_);
        }
        break;
      }
      case kSaturation: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.saturation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.saturation_);
        } else {
          _this->_impl_.effect_.saturation_->MergeFrom(*from._impl_.effect_.saturation_);
        }
        break;
      }
      case kSnake: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.snake_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.snake_);
        } else {
          _this->_impl_.effect_.snake_->MergeFrom(*from._impl_.effect_.snake_);
        }
        break;
      }
      case kTimedBrightness: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.timed_brightness_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.timed_brightness_);
        } else {
          _this->_impl_.effect_.timed_brightness_->MergeFrom(*from._impl_.effect_.timed_brightness_);
        }
        break;
      }
      case kTimedHue: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.timed_hue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.timed_hue_);
        } else {
          _this->_impl_.effect_.timed_hue_->MergeFrom(*from._impl_.effect_.timed_hue_);
        }
        break;
      }
      case kTimedSaturation: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.timed_saturation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.timed_saturation_);
        } else {
          _this->_impl_.effect_.timed_saturation_->MergeFrom(*from._impl_.effect_.timed_saturation_);
        }
        break;
      }
      case kPositionBrightness: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.position_brightness_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.position_brightness_);
        } else {
          _this->_impl_.effect_.position_brightness_->MergeFrom(*from._impl_.effect_.position_brightness_);
        }
        break;
      }
      case kPositionHue: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.position_hue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.position_hue_);
        } else {
          _this->_impl_.effect_.position_hue_->MergeFrom(*from._impl_.effect_.position_hue_);
        }
        break;
      }
      case kPositionSaturation: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.position_saturation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.position_saturation_);
        } else {
          _this->_impl_.effect_.position_saturation_->MergeFrom(*from._impl_.effect_.position_saturation_);
        }
        break;
      }
      case kSnakeBrightness: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.snake_brightness_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.snake_brightness_);
        } else {
          _this->_impl_.effect_.snake_brightness_->MergeFrom(*from._impl_.effect_.snake_brightness_);
        }
        break;
      }
      case kSnakeHue: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.snake_hue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.snake_hue_);
        } else {
          _this->_impl_.effect_.snake_hue_->MergeFrom(*from._impl_.effect_.snake_hue_);
        }
        break;
      }
      case kSnakeSaturation: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.snake_saturation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.snake_saturation_);
        } else {
          _this->_impl_.effect_.snake_saturation_->MergeFrom(*from._impl_.effect_.snake_saturation_);
        }
        break;
      }
      case EFFECT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EffectProto::CopyFrom(const EffectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.EffectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EffectProto::InternalSwap(EffectProto* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.effect_config_, other->_impl_.effect_config_);
  swap(_impl_.effect_, other->_impl_.effect_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata EffectProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AnimationProto::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AnimationProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_._has_bits_);
};

AnimationProto::AnimationProto(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AnimationProto_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.AnimationProto)
}
PROTOBUF_NDEBUG_INLINE AnimationProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::AnimationProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        effects_{visibility, arena, from.effects_} {}

AnimationProto::AnimationProto(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AnimationProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AnimationProto_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AnimationProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_ms_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, duration_ms_),
           offsetof(Impl_, num_repeats_) -
               offsetof(Impl_, duration_ms_) +
               sizeof(Impl_::num_repeats_));

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.AnimationProto)
}
PROTOBUF_NDEBUG_INLINE AnimationProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        effects_{visibility, arena} {}

inline void AnimationProto::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_ms_),
           0,
           offsetof(Impl_, num_repeats_) -
               offsetof(Impl_, duration_ms_) +
               sizeof(Impl_::num_repeats_));
}
AnimationProto::~AnimationProto() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.AnimationProto)
  SharedDtor(*this);
}
inline void AnimationProto::SharedDtor(MessageLite& self) {
  AnimationProto& this_ = static_cast<AnimationProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AnimationProto::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AnimationProto(arena);
}
constexpr auto AnimationProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.effects_) +
          decltype(AnimationProto::_impl_.effects_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AnimationProto), alignof(AnimationProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AnimationProto::PlacementNew_,
                                 sizeof(AnimationProto),
                                 alignof(AnimationProto));
  }
}
constexpr auto AnimationProto::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AnimationProto_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AnimationProto::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AnimationProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AnimationProto::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AnimationProto>(), &AnimationProto::ByteSizeLong,
              &AnimationProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_._cached_size_),
          false,
      },
      &AnimationProto::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AnimationProto_class_data_ =
        AnimationProto::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AnimationProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AnimationProto_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AnimationProto_class_data_.tc_table);
  return AnimationProto_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2>
AnimationProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AnimationProto_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::AnimationProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .kivsee.proto.render.v1.EffectProto effects = 1 [json_name = "effects"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.effects_)}},
    // uint32 duration_ms = 2 [json_name = "durationMs"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AnimationProto, _impl_.duration_ms_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.duration_ms_)}},
    // uint32 num_repeats = 3 [json_name = "numRepeats"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AnimationProto, _impl_.num_repeats_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.num_repeats_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .kivsee.proto.render.v1.EffectProto effects = 1 [json_name = "effects"];
    {PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.effects_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 duration_ms = 2 [json_name = "durationMs"];
    {PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.duration_ms_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_repeats = 3 [json_name = "numRepeats"];
    {PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.num_repeats_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::EffectProto>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AnimationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.AnimationProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effects_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.duration_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_repeats_) -
        reinterpret_cast<char*>(&_impl_.duration_ms_)) + sizeof(_impl_.num_repeats_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AnimationProto::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AnimationProto& this_ = static_cast<const AnimationProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AnimationProto::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AnimationProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.AnimationProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .kivsee.proto.render.v1.EffectProto effects = 1 [json_name = "effects"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_effects_size());
       i < n; i++) {
    const auto& repfield = this_._internal_effects().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // uint32 duration_ms = 2 [json_name = "durationMs"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_duration_ms() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_duration_ms(), target);
    }
  }

  // uint32 num_repeats = 3 [json_name = "numRepeats"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_num_repeats() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_num_repeats(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.AnimationProto)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AnimationProto::ByteSizeLong(const MessageLite& base) {
  const AnimationProto& this_ = static_cast<const AnimationProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AnimationProto::ByteSizeLong() const {
  const AnimationProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.AnimationProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .kivsee.proto.render.v1.EffectProto effects = 1 [json_name = "effects"];
    {
      total_size += 1UL * this_._internal_effects_size();
      for (const auto& msg : this_._internal_effects()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // uint32 duration_ms = 2 [json_name = "durationMs"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_duration_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_duration_ms());
      }
    }
    // uint32 num_repeats = 3 [json_name = "numRepeats"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_num_repeats() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_repeats());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AnimationProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AnimationProto*>(&to_msg);
  auto& from = static_cast<const AnimationProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.AnimationProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_effects()->MergeFrom(
      from._internal_effects());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_duration_ms() != 0) {
        _this->_impl_.duration_ms_ = from._impl_.duration_ms_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_num_repeats() != 0) {
        _this->_impl_.num_repeats_ = from._impl_.num_repeats_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationProto::CopyFrom(const AnimationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.AnimationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AnimationProto::InternalSwap(AnimationProto* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.effects_.InternalSwap(&other->_impl_.effects_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.num_repeats_)
      + sizeof(AnimationProto::_impl_.num_repeats_)
      - PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.duration_ms_)>(
          reinterpret_cast<char*>(&_impl_.duration_ms_),
          reinterpret_cast<char*>(&other->_impl_.duration_ms_));
}

::google::protobuf::Metadata AnimationProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace render
}  // namespace proto
}  // namespace kivsee
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
