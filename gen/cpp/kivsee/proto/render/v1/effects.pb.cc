// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kivsee/proto/render/v1/effects.proto
// Protobuf C++ Version: 6.31.0

#include "kivsee/proto/render/v1/effects.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kivsee {
namespace proto {
namespace render {
namespace v1 {

inline constexpr HSV::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hue_{0},
        sat_{0},
        val_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HSV::HSV(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(HSV_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HSVDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HSVDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HSVDefaultTypeInternal() {}
  union {
    HSV _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HSVDefaultTypeInternal _HSV_default_instance_;

inline constexpr EffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        segments_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_time_{0u},
        end_time_{0u},
        repeat_num_{0},
        repeat_start_{0},
        repeat_end_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EffectConfig::EffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EffectConfigDefaultTypeInternal() {}
  union {
    EffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EffectConfigDefaultTypeInternal _EffectConfig_default_instance_;

inline constexpr ConstColorEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ConstColorEffectConfig::ConstColorEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConstColorEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConstColorEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConstColorEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConstColorEffectConfigDefaultTypeInternal() {}
  union {
    ConstColorEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConstColorEffectConfigDefaultTypeInternal _ConstColorEffectConfig_default_instance_;

inline constexpr SnakeEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        head_{nullptr},
        tail_length_{nullptr},
        cyclic_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SnakeEffectConfig::SnakeEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SnakeEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SnakeEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnakeEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnakeEffectConfigDefaultTypeInternal() {}
  union {
    SnakeEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnakeEffectConfigDefaultTypeInternal _SnakeEffectConfig_default_instance_;

inline constexpr SegmentEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        start_{nullptr},
        end_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SegmentEffectConfig::SegmentEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SegmentEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SegmentEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentEffectConfigDefaultTypeInternal() {}
  union {
    SegmentEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentEffectConfigDefaultTypeInternal _SegmentEffectConfig_default_instance_;

inline constexpr SaturationEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mult_factor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SaturationEffectConfig::SaturationEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SaturationEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SaturationEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaturationEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaturationEffectConfigDefaultTypeInternal() {}
  union {
    SaturationEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaturationEffectConfigDefaultTypeInternal _SaturationEffectConfig_default_instance_;

inline constexpr RainbowEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hue_start_{nullptr},
        hue_end_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RainbowEffectConfig::RainbowEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RainbowEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RainbowEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RainbowEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RainbowEffectConfigDefaultTypeInternal() {}
  union {
    RainbowEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RainbowEffectConfigDefaultTypeInternal _RainbowEffectConfig_default_instance_;

inline constexpr HueEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        offset_factor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HueEffectConfig::HueEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(HueEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HueEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HueEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HueEffectConfigDefaultTypeInternal() {}
  union {
    HueEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HueEffectConfigDefaultTypeInternal _HueEffectConfig_default_instance_;

inline constexpr GlitterEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        intensity_{nullptr},
        sat_mult_factor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GlitterEffectConfig::GlitterEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(GlitterEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GlitterEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlitterEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlitterEffectConfigDefaultTypeInternal() {}
  union {
    GlitterEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlitterEffectConfigDefaultTypeInternal _GlitterEffectConfig_default_instance_;

inline constexpr BrightnessEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mult_factor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BrightnessEffectConfig::BrightnessEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(BrightnessEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BrightnessEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrightnessEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrightnessEffectConfigDefaultTypeInternal() {}
  union {
    BrightnessEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrightnessEffectConfigDefaultTypeInternal _BrightnessEffectConfig_default_instance_;

inline constexpr AlternateEffectConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hue_offset_{nullptr},
        sat_mult_{nullptr},
        brightness_mult_{nullptr},
        numberofpixels_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR AlternateEffectConfig::AlternateEffectConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AlternateEffectConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AlternateEffectConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlternateEffectConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlternateEffectConfigDefaultTypeInternal() {}
  union {
    AlternateEffectConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlternateEffectConfigDefaultTypeInternal _AlternateEffectConfig_default_instance_;

inline constexpr EffectProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        effect_config_{nullptr},
        effect_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR EffectProto::EffectProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EffectProto_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EffectProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EffectProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EffectProtoDefaultTypeInternal() {}
  union {
    EffectProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EffectProtoDefaultTypeInternal _EffectProto_default_instance_;

inline constexpr AnimationProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        effects_{},
        duration_ms_{0u},
        num_repeats_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR AnimationProto::AnimationProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AnimationProto_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AnimationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimationProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimationProtoDefaultTypeInternal() {}
  union {
    AnimationProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimationProtoDefaultTypeInternal _AnimationProto_default_instance_;
}  // namespace v1
}  // namespace render
}  // namespace proto
}  // namespace kivsee
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_kivsee_2fproto_2frender_2fv1_2feffects_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_kivsee_2fproto_2frender_2fv1_2feffects_2eproto = nullptr;
const ::uint32_t
    TableStruct_kivsee_2fproto_2frender_2fv1_2feffects_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HSV, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HSV, _impl_.hue_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HSV, _impl_.sat_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HSV, _impl_.val_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::ConstColorEffectConfig, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::ConstColorEffectConfig, _impl_.color_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::RainbowEffectConfig, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::RainbowEffectConfig, _impl_.hue_start_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::RainbowEffectConfig, _impl_.hue_end_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::BrightnessEffectConfig, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::BrightnessEffectConfig, _impl_.mult_factor_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HueEffectConfig, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::HueEffectConfig, _impl_.offset_factor_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SaturationEffectConfig, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SaturationEffectConfig, _impl_.mult_factor_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeEffectConfig, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeEffectConfig, _impl_.head_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeEffectConfig, _impl_.tail_length_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SnakeEffectConfig, _impl_.cyclic_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SegmentEffectConfig, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SegmentEffectConfig, _impl_.start_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::SegmentEffectConfig, _impl_.end_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::GlitterEffectConfig, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::GlitterEffectConfig, _impl_.intensity_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::GlitterEffectConfig, _impl_.sat_mult_factor_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AlternateEffectConfig, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AlternateEffectConfig, _impl_.numberofpixels_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AlternateEffectConfig, _impl_.hue_offset_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AlternateEffectConfig, _impl_.sat_mult_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AlternateEffectConfig, _impl_.brightness_mult_),
        3,
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.end_time_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.segments_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.repeat_num_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.repeat_start_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectConfig, _impl_.repeat_end_),
        1,
        2,
        0,
        3,
        4,
        5,
        0x085, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectProto, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectProto, _impl_._oneof_case_[0]),
        12, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectProto, _impl_.effect_config_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectProto, _impl_.effect_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AnimationProto, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AnimationProto, _impl_.effects_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AnimationProto, _impl_.duration_ms_),
        PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::AnimationProto, _impl_.num_repeats_),
        ~0u,
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::kivsee::proto::render::v1::HSV)},
        {9, sizeof(::kivsee::proto::render::v1::ConstColorEffectConfig)},
        {14, sizeof(::kivsee::proto::render::v1::RainbowEffectConfig)},
        {21, sizeof(::kivsee::proto::render::v1::BrightnessEffectConfig)},
        {26, sizeof(::kivsee::proto::render::v1::HueEffectConfig)},
        {31, sizeof(::kivsee::proto::render::v1::SaturationEffectConfig)},
        {36, sizeof(::kivsee::proto::render::v1::SnakeEffectConfig)},
        {45, sizeof(::kivsee::proto::render::v1::SegmentEffectConfig)},
        {52, sizeof(::kivsee::proto::render::v1::GlitterEffectConfig)},
        {59, sizeof(::kivsee::proto::render::v1::AlternateEffectConfig)},
        {70, sizeof(::kivsee::proto::render::v1::EffectConfig)},
        {85, sizeof(::kivsee::proto::render::v1::EffectProto)},
        {104, sizeof(::kivsee::proto::render::v1::AnimationProto)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::kivsee::proto::render::v1::_HSV_default_instance_._instance,
    &::kivsee::proto::render::v1::_ConstColorEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_RainbowEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_BrightnessEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_HueEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_SaturationEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_SnakeEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_SegmentEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_GlitterEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_AlternateEffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_EffectConfig_default_instance_._instance,
    &::kivsee::proto::render::v1::_EffectProto_default_instance_._instance,
    &::kivsee::proto::render::v1::_AnimationProto_default_instance_._instance,
};
const char descriptor_table_protodef_kivsee_2fproto_2frender_2fv1_2feffects_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n$kivsee/proto/render/v1/effects.proto\022\026"
    "kivsee.proto.render.v1\032&kivsee/proto/ren"
    "der/v1/functions.proto\";\n\003HSV\022\020\n\003hue\030\001 \001"
    "(\002R\003hue\022\020\n\003sat\030\002 \001(\002R\003sat\022\020\n\003val\030\003 \001(\002R\003"
    "val\"K\n\026ConstColorEffectConfig\0221\n\005color\030\001"
    " \001(\0132\033.kivsee.proto.render.v1.HSVR\005color"
    "\"\231\001\n\023RainbowEffectConfig\022B\n\thue_start\030\001 "
    "\001(\0132%.kivsee.proto.render.v1.FloatFuncti"
    "onR\010hueStart\022>\n\007hue_end\030\002 \001(\0132%.kivsee.p"
    "roto.render.v1.FloatFunctionR\006hueEnd\"`\n\026"
    "BrightnessEffectConfig\022F\n\013mult_factor\030\001 "
    "\001(\0132%.kivsee.proto.render.v1.FloatFuncti"
    "onR\nmultFactor\"]\n\017HueEffectConfig\022J\n\roff"
    "set_factor\030\001 \001(\0132%.kivsee.proto.render.v"
    "1.FloatFunctionR\014offsetFactor\"`\n\026Saturat"
    "ionEffectConfig\022F\n\013mult_factor\030\001 \001(\0132%.k"
    "ivsee.proto.render.v1.FloatFunctionR\nmul"
    "tFactor\"\256\001\n\021SnakeEffectConfig\0229\n\004head\030\001 "
    "\001(\0132%.kivsee.proto.render.v1.FloatFuncti"
    "onR\004head\022F\n\013tail_length\030\002 \001(\0132%.kivsee.p"
    "roto.render.v1.FloatFunctionR\ntailLength"
    "\022\026\n\006cyclic\030\003 \001(\010R\006cyclic\"\213\001\n\023SegmentEffe"
    "ctConfig\022;\n\005start\030\001 \001(\0132%.kivsee.proto.r"
    "ender.v1.FloatFunctionR\005start\0227\n\003end\030\002 \001"
    "(\0132%.kivsee.proto.render.v1.FloatFunctio"
    "nR\003end\"\251\001\n\023GlitterEffectConfig\022C\n\tintens"
    "ity\030\001 \001(\0132%.kivsee.proto.render.v1.Float"
    "FunctionR\tintensity\022M\n\017sat_mult_factor\030\002"
    " \001(\0132%.kivsee.proto.render.v1.FloatFunct"
    "ionR\rsatMultFactor\"\227\002\n\025AlternateEffectCo"
    "nfig\022&\n\016numberOfPixels\030\001 \001(\rR\016numberOfPi"
    "xels\022D\n\nhue_offset\030\002 \001(\0132%.kivsee.proto."
    "render.v1.FloatFunctionR\thueOffset\022@\n\010sa"
    "t_mult\030\003 \001(\0132%.kivsee.proto.render.v1.Fl"
    "oatFunctionR\007satMult\022N\n\017brightness_mult\030"
    "\004 \001(\0132%.kivsee.proto.render.v1.FloatFunc"
    "tionR\016brightnessMult\"\305\001\n\014EffectConfig\022\035\n"
    "\nstart_time\030\001 \001(\rR\tstartTime\022\031\n\010end_time"
    "\030\002 \001(\rR\007endTime\022\032\n\010segments\030\003 \001(\tR\010segme"
    "nts\022\035\n\nrepeat_num\030\004 \001(\002R\trepeatNum\022!\n\014re"
    "peat_start\030\005 \001(\002R\013repeatStart\022\035\n\nrepeat_"
    "end\030\006 \001(\002R\trepeatEnd\"\242\004\n\013EffectProto\022I\n\r"
    "effect_config\030\001 \001(\0132$.kivsee.proto.rende"
    "r.v1.EffectConfigR\014effectConfig\022Q\n\013const"
    "_color\030\002 \001(\0132..kivsee.proto.render.v1.Co"
    "nstColorEffectConfigH\000R\nconstColor\022G\n\007ra"
    "inbow\030\003 \001(\0132+.kivsee.proto.render.v1.Rai"
    "nbowEffectConfigH\000R\007rainbow\022P\n\nbrightnes"
    "s\030\004 \001(\0132..kivsee.proto.render.v1.Brightn"
    "essEffectConfigH\000R\nbrightness\022;\n\003hue\030\005 \001"
    "(\0132\'.kivsee.proto.render.v1.HueEffectCon"
    "figH\000R\003hue\022P\n\nsaturation\030\006 \001(\0132..kivsee."
    "proto.render.v1.SaturationEffectConfigH\000"
    "R\nsaturation\022A\n\005snake\030\007 \001(\0132).kivsee.pro"
    "to.render.v1.SnakeEffectConfigH\000R\005snakeB"
    "\010\n\006effect\"\221\001\n\016AnimationProto\022=\n\007effects\030"
    "\001 \003(\0132#.kivsee.proto.render.v1.EffectPro"
    "toR\007effects\022\037\n\013duration_ms\030\002 \001(\rR\ndurati"
    "onMs\022\037\n\013num_repeats\030\003 \001(\rR\nnumRepeatsb\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto_deps[1] = {
        &::descriptor_table_kivsee_2fproto_2frender_2fv1_2ffunctions_2eproto,
};
static ::absl::once_flag descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto = {
    false,
    false,
    2365,
    descriptor_table_protodef_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
    "kivsee/proto/render/v1/effects.proto",
    &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto_once,
    descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto_deps,
    1,
    13,
    schemas,
    file_default_instances,
    TableStruct_kivsee_2fproto_2frender_2fv1_2feffects_2eproto::offsets,
    file_level_enum_descriptors_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
    file_level_service_descriptors_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
};
namespace kivsee {
namespace proto {
namespace render {
namespace v1 {
// ===================================================================

class HSV::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<HSV>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HSV, _impl_._has_bits_);
};

HSV::HSV(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HSV_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.HSV)
}
HSV::HSV(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HSV& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HSV_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE HSV::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void HSV::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, hue_),
           0,
           offsetof(Impl_, val_) -
               offsetof(Impl_, hue_) +
               sizeof(Impl_::val_));
}
HSV::~HSV() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.HSV)
  SharedDtor(*this);
}
inline void HSV::SharedDtor(MessageLite& self) {
  HSV& this_ = static_cast<HSV&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL HSV::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) HSV(arena);
}
constexpr auto HSV::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(HSV),
                                            alignof(HSV));
}
constexpr auto HSV::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_HSV_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &HSV::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<HSV>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &HSV::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<HSV>(), &HSV::ByteSizeLong,
              &HSV::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(HSV, _impl_._cached_size_),
          false,
      },
      &HSV::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull HSV_class_data_ =
        HSV::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
HSV::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&HSV_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(HSV_class_data_.tc_table);
  return HSV_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
HSV::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HSV, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    HSV_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::HSV>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float hue = 1 [json_name = "hue"];
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(HSV, _impl_.hue_)}},
    // float sat = 2 [json_name = "sat"];
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(HSV, _impl_.sat_)}},
    // float val = 3 [json_name = "val"];
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(HSV, _impl_.val_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float hue = 1 [json_name = "hue"];
    {PROTOBUF_FIELD_OFFSET(HSV, _impl_.hue_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float sat = 2 [json_name = "sat"];
    {PROTOBUF_FIELD_OFFSET(HSV, _impl_.sat_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float val = 3 [json_name = "val"];
    {PROTOBUF_FIELD_OFFSET(HSV, _impl_.val_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void HSV::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.HSV)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.hue_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.val_) -
        reinterpret_cast<char*>(&_impl_.hue_)) + sizeof(_impl_.val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL HSV::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const HSV& this_ = static_cast<const HSV&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL HSV::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const HSV& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.HSV)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float hue = 1 [json_name = "hue"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_hue()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          1, this_._internal_hue(), target);
    }
  }

  // float sat = 2 [json_name = "sat"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_sat()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          2, this_._internal_sat(), target);
    }
  }

  // float val = 3 [json_name = "val"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_val()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          3, this_._internal_val(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.HSV)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t HSV::ByteSizeLong(const MessageLite& base) {
  const HSV& this_ = static_cast<const HSV&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t HSV::ByteSizeLong() const {
  const HSV& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.HSV)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // float hue = 1 [json_name = "hue"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_hue()) != 0) {
        total_size += 5;
      }
    }
    // float sat = 2 [json_name = "sat"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_sat()) != 0) {
        total_size += 5;
      }
    }
    // float val = 3 [json_name = "val"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_val()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void HSV::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HSV*>(&to_msg);
  auto& from = static_cast<const HSV&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.HSV)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_hue()) != 0) {
        _this->_impl_.hue_ = from._impl_.hue_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_sat()) != 0) {
        _this->_impl_.sat_ = from._impl_.sat_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_val()) != 0) {
        _this->_impl_.val_ = from._impl_.val_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HSV::CopyFrom(const HSV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.HSV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HSV::InternalSwap(HSV* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HSV, _impl_.val_)
      + sizeof(HSV::_impl_.val_)
      - PROTOBUF_FIELD_OFFSET(HSV, _impl_.hue_)>(
          reinterpret_cast<char*>(&_impl_.hue_),
          reinterpret_cast<char*>(&other->_impl_.hue_));
}

::google::protobuf::Metadata HSV::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConstColorEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ConstColorEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConstColorEffectConfig, _impl_._has_bits_);
};

ConstColorEffectConfig::ConstColorEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConstColorEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.ConstColorEffectConfig)
}
PROTOBUF_NDEBUG_INLINE ConstColorEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::ConstColorEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ConstColorEffectConfig::ConstColorEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConstColorEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConstColorEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConstColorEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.color_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.color_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.ConstColorEffectConfig)
}
PROTOBUF_NDEBUG_INLINE ConstColorEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void ConstColorEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.color_ = {};
}
ConstColorEffectConfig::~ConstColorEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.ConstColorEffectConfig)
  SharedDtor(*this);
}
inline void ConstColorEffectConfig::SharedDtor(MessageLite& self) {
  ConstColorEffectConfig& this_ = static_cast<ConstColorEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.color_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConstColorEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConstColorEffectConfig(arena);
}
constexpr auto ConstColorEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ConstColorEffectConfig),
                                            alignof(ConstColorEffectConfig));
}
constexpr auto ConstColorEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConstColorEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConstColorEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConstColorEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConstColorEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConstColorEffectConfig>(), &ConstColorEffectConfig::ByteSizeLong,
              &ConstColorEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConstColorEffectConfig, _impl_._cached_size_),
          false,
      },
      &ConstColorEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ConstColorEffectConfig_class_data_ =
        ConstColorEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ConstColorEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConstColorEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConstColorEffectConfig_class_data_.tc_table);
  return ConstColorEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ConstColorEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConstColorEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ConstColorEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::ConstColorEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.HSV color = 1 [json_name = "color"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConstColorEffectConfig, _impl_.color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.HSV color = 1 [json_name = "color"];
    {PROTOBUF_FIELD_OFFSET(ConstColorEffectConfig, _impl_.color_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::HSV>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ConstColorEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.ConstColorEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.color_ != nullptr);
    _impl_.color_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConstColorEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConstColorEffectConfig& this_ = static_cast<const ConstColorEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConstColorEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConstColorEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.ConstColorEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.HSV color = 1 [json_name = "color"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.color_, this_._impl_.color_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.ConstColorEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConstColorEffectConfig::ByteSizeLong(const MessageLite& base) {
  const ConstColorEffectConfig& this_ = static_cast<const ConstColorEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConstColorEffectConfig::ByteSizeLong() const {
  const ConstColorEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.ConstColorEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.HSV color = 1 [json_name = "color"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.color_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConstColorEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConstColorEffectConfig*>(&to_msg);
  auto& from = static_cast<const ConstColorEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.ConstColorEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.color_ != nullptr);
    if (_this->_impl_.color_ == nullptr) {
      _this->_impl_.color_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.color_);
    } else {
      _this->_impl_.color_->MergeFrom(*from._impl_.color_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConstColorEffectConfig::CopyFrom(const ConstColorEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.ConstColorEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConstColorEffectConfig::InternalSwap(ConstColorEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.color_, other->_impl_.color_);
}

::google::protobuf::Metadata ConstColorEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RainbowEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RainbowEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_._has_bits_);
};

void RainbowEffectConfig::clear_hue_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hue_start_ != nullptr) _impl_.hue_start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RainbowEffectConfig::clear_hue_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hue_end_ != nullptr) _impl_.hue_end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RainbowEffectConfig::RainbowEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RainbowEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.RainbowEffectConfig)
}
PROTOBUF_NDEBUG_INLINE RainbowEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::RainbowEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RainbowEffectConfig::RainbowEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RainbowEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RainbowEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RainbowEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.hue_start_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hue_start_)
                : nullptr;
  _impl_.hue_end_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hue_end_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.RainbowEffectConfig)
}
PROTOBUF_NDEBUG_INLINE RainbowEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RainbowEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, hue_start_),
           0,
           offsetof(Impl_, hue_end_) -
               offsetof(Impl_, hue_start_) +
               sizeof(Impl_::hue_end_));
}
RainbowEffectConfig::~RainbowEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.RainbowEffectConfig)
  SharedDtor(*this);
}
inline void RainbowEffectConfig::SharedDtor(MessageLite& self) {
  RainbowEffectConfig& this_ = static_cast<RainbowEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.hue_start_;
  delete this_._impl_.hue_end_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RainbowEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RainbowEffectConfig(arena);
}
constexpr auto RainbowEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RainbowEffectConfig),
                                            alignof(RainbowEffectConfig));
}
constexpr auto RainbowEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RainbowEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RainbowEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RainbowEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RainbowEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RainbowEffectConfig>(), &RainbowEffectConfig::ByteSizeLong,
              &RainbowEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_._cached_size_),
          false,
      },
      &RainbowEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RainbowEffectConfig_class_data_ =
        RainbowEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RainbowEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RainbowEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RainbowEffectConfig_class_data_.tc_table);
  return RainbowEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
RainbowEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RainbowEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::RainbowEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction hue_end = 2 [json_name = "hueEnd"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_end_)}},
    // .kivsee.proto.render.v1.FloatFunction hue_start = 1 [json_name = "hueStart"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_start_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction hue_start = 1 [json_name = "hueStart"];
    {PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_start_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction hue_end = 2 [json_name = "hueEnd"];
    {PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_end_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RainbowEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.RainbowEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.hue_start_ != nullptr);
      _impl_.hue_start_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.hue_end_ != nullptr);
      _impl_.hue_end_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RainbowEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RainbowEffectConfig& this_ = static_cast<const RainbowEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RainbowEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RainbowEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.RainbowEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction hue_start = 1 [json_name = "hueStart"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.hue_start_, this_._impl_.hue_start_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction hue_end = 2 [json_name = "hueEnd"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.hue_end_, this_._impl_.hue_end_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.RainbowEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RainbowEffectConfig::ByteSizeLong(const MessageLite& base) {
  const RainbowEffectConfig& this_ = static_cast<const RainbowEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RainbowEffectConfig::ByteSizeLong() const {
  const RainbowEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.RainbowEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .kivsee.proto.render.v1.FloatFunction hue_start = 1 [json_name = "hueStart"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hue_start_);
    }
    // .kivsee.proto.render.v1.FloatFunction hue_end = 2 [json_name = "hueEnd"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hue_end_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RainbowEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RainbowEffectConfig*>(&to_msg);
  auto& from = static_cast<const RainbowEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.RainbowEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.hue_start_ != nullptr);
      if (_this->_impl_.hue_start_ == nullptr) {
        _this->_impl_.hue_start_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hue_start_);
      } else {
        _this->_impl_.hue_start_->MergeFrom(*from._impl_.hue_start_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.hue_end_ != nullptr);
      if (_this->_impl_.hue_end_ == nullptr) {
        _this->_impl_.hue_end_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hue_end_);
      } else {
        _this->_impl_.hue_end_->MergeFrom(*from._impl_.hue_end_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RainbowEffectConfig::CopyFrom(const RainbowEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.RainbowEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RainbowEffectConfig::InternalSwap(RainbowEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_end_)
      + sizeof(RainbowEffectConfig::_impl_.hue_end_)
      - PROTOBUF_FIELD_OFFSET(RainbowEffectConfig, _impl_.hue_start_)>(
          reinterpret_cast<char*>(&_impl_.hue_start_),
          reinterpret_cast<char*>(&other->_impl_.hue_start_));
}

::google::protobuf::Metadata RainbowEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BrightnessEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<BrightnessEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BrightnessEffectConfig, _impl_._has_bits_);
};

void BrightnessEffectConfig::clear_mult_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mult_factor_ != nullptr) _impl_.mult_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BrightnessEffectConfig::BrightnessEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BrightnessEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.BrightnessEffectConfig)
}
PROTOBUF_NDEBUG_INLINE BrightnessEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::BrightnessEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BrightnessEffectConfig::BrightnessEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const BrightnessEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BrightnessEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BrightnessEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.mult_factor_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.BrightnessEffectConfig)
}
PROTOBUF_NDEBUG_INLINE BrightnessEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void BrightnessEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mult_factor_ = {};
}
BrightnessEffectConfig::~BrightnessEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.BrightnessEffectConfig)
  SharedDtor(*this);
}
inline void BrightnessEffectConfig::SharedDtor(MessageLite& self) {
  BrightnessEffectConfig& this_ = static_cast<BrightnessEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.mult_factor_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL BrightnessEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) BrightnessEffectConfig(arena);
}
constexpr auto BrightnessEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(BrightnessEffectConfig),
                                            alignof(BrightnessEffectConfig));
}
constexpr auto BrightnessEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_BrightnessEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &BrightnessEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<BrightnessEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &BrightnessEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<BrightnessEffectConfig>(), &BrightnessEffectConfig::ByteSizeLong,
              &BrightnessEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(BrightnessEffectConfig, _impl_._cached_size_),
          false,
      },
      &BrightnessEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull BrightnessEffectConfig_class_data_ =
        BrightnessEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
BrightnessEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&BrightnessEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(BrightnessEffectConfig_class_data_.tc_table);
  return BrightnessEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
BrightnessEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BrightnessEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    BrightnessEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::BrightnessEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BrightnessEffectConfig, _impl_.mult_factor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    {PROTOBUF_FIELD_OFFSET(BrightnessEffectConfig, _impl_.mult_factor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void BrightnessEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.BrightnessEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.mult_factor_ != nullptr);
    _impl_.mult_factor_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL BrightnessEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const BrightnessEffectConfig& this_ = static_cast<const BrightnessEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL BrightnessEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const BrightnessEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.BrightnessEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.mult_factor_, this_._impl_.mult_factor_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.BrightnessEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t BrightnessEffectConfig::ByteSizeLong(const MessageLite& base) {
  const BrightnessEffectConfig& this_ = static_cast<const BrightnessEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t BrightnessEffectConfig::ByteSizeLong() const {
  const BrightnessEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.BrightnessEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void BrightnessEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BrightnessEffectConfig*>(&to_msg);
  auto& from = static_cast<const BrightnessEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.BrightnessEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.mult_factor_ != nullptr);
    if (_this->_impl_.mult_factor_ == nullptr) {
      _this->_impl_.mult_factor_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_);
    } else {
      _this->_impl_.mult_factor_->MergeFrom(*from._impl_.mult_factor_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BrightnessEffectConfig::CopyFrom(const BrightnessEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.BrightnessEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BrightnessEffectConfig::InternalSwap(BrightnessEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mult_factor_, other->_impl_.mult_factor_);
}

::google::protobuf::Metadata BrightnessEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HueEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<HueEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HueEffectConfig, _impl_._has_bits_);
};

void HueEffectConfig::clear_offset_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.offset_factor_ != nullptr) _impl_.offset_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HueEffectConfig::HueEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HueEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.HueEffectConfig)
}
PROTOBUF_NDEBUG_INLINE HueEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::HueEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HueEffectConfig::HueEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const HueEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HueEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HueEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.offset_factor_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_factor_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.HueEffectConfig)
}
PROTOBUF_NDEBUG_INLINE HueEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void HueEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.offset_factor_ = {};
}
HueEffectConfig::~HueEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.HueEffectConfig)
  SharedDtor(*this);
}
inline void HueEffectConfig::SharedDtor(MessageLite& self) {
  HueEffectConfig& this_ = static_cast<HueEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.offset_factor_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL HueEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) HueEffectConfig(arena);
}
constexpr auto HueEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(HueEffectConfig),
                                            alignof(HueEffectConfig));
}
constexpr auto HueEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_HueEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &HueEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<HueEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &HueEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<HueEffectConfig>(), &HueEffectConfig::ByteSizeLong,
              &HueEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(HueEffectConfig, _impl_._cached_size_),
          false,
      },
      &HueEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull HueEffectConfig_class_data_ =
        HueEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
HueEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&HueEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(HueEffectConfig_class_data_.tc_table);
  return HueEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
HueEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HueEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    HueEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::HueEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HueEffectConfig, _impl_.offset_factor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    {PROTOBUF_FIELD_OFFSET(HueEffectConfig, _impl_.offset_factor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void HueEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.HueEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.offset_factor_ != nullptr);
    _impl_.offset_factor_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL HueEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const HueEffectConfig& this_ = static_cast<const HueEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL HueEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const HueEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.HueEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.offset_factor_, this_._impl_.offset_factor_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.HueEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t HueEffectConfig::ByteSizeLong(const MessageLite& base) {
  const HueEffectConfig& this_ = static_cast<const HueEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t HueEffectConfig::ByteSizeLong() const {
  const HueEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.HueEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.FloatFunction offset_factor = 1 [json_name = "offsetFactor"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.offset_factor_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void HueEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HueEffectConfig*>(&to_msg);
  auto& from = static_cast<const HueEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.HueEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.offset_factor_ != nullptr);
    if (_this->_impl_.offset_factor_ == nullptr) {
      _this->_impl_.offset_factor_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_factor_);
    } else {
      _this->_impl_.offset_factor_->MergeFrom(*from._impl_.offset_factor_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HueEffectConfig::CopyFrom(const HueEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.HueEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HueEffectConfig::InternalSwap(HueEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.offset_factor_, other->_impl_.offset_factor_);
}

::google::protobuf::Metadata HueEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SaturationEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SaturationEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SaturationEffectConfig, _impl_._has_bits_);
};

void SaturationEffectConfig::clear_mult_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mult_factor_ != nullptr) _impl_.mult_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SaturationEffectConfig::SaturationEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SaturationEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.SaturationEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SaturationEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::SaturationEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SaturationEffectConfig::SaturationEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SaturationEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SaturationEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SaturationEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.mult_factor_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.SaturationEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SaturationEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SaturationEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mult_factor_ = {};
}
SaturationEffectConfig::~SaturationEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.SaturationEffectConfig)
  SharedDtor(*this);
}
inline void SaturationEffectConfig::SharedDtor(MessageLite& self) {
  SaturationEffectConfig& this_ = static_cast<SaturationEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.mult_factor_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SaturationEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SaturationEffectConfig(arena);
}
constexpr auto SaturationEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SaturationEffectConfig),
                                            alignof(SaturationEffectConfig));
}
constexpr auto SaturationEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SaturationEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SaturationEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SaturationEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SaturationEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SaturationEffectConfig>(), &SaturationEffectConfig::ByteSizeLong,
              &SaturationEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SaturationEffectConfig, _impl_._cached_size_),
          false,
      },
      &SaturationEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SaturationEffectConfig_class_data_ =
        SaturationEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SaturationEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SaturationEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SaturationEffectConfig_class_data_.tc_table);
  return SaturationEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
SaturationEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SaturationEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SaturationEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SaturationEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SaturationEffectConfig, _impl_.mult_factor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    {PROTOBUF_FIELD_OFFSET(SaturationEffectConfig, _impl_.mult_factor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SaturationEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.SaturationEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.mult_factor_ != nullptr);
    _impl_.mult_factor_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SaturationEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SaturationEffectConfig& this_ = static_cast<const SaturationEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SaturationEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SaturationEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.SaturationEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.mult_factor_, this_._impl_.mult_factor_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.SaturationEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SaturationEffectConfig::ByteSizeLong(const MessageLite& base) {
  const SaturationEffectConfig& this_ = static_cast<const SaturationEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SaturationEffectConfig::ByteSizeLong() const {
  const SaturationEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.SaturationEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.FloatFunction mult_factor = 1 [json_name = "multFactor"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mult_factor_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SaturationEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SaturationEffectConfig*>(&to_msg);
  auto& from = static_cast<const SaturationEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.SaturationEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.mult_factor_ != nullptr);
    if (_this->_impl_.mult_factor_ == nullptr) {
      _this->_impl_.mult_factor_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mult_factor_);
    } else {
      _this->_impl_.mult_factor_->MergeFrom(*from._impl_.mult_factor_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SaturationEffectConfig::CopyFrom(const SaturationEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.SaturationEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SaturationEffectConfig::InternalSwap(SaturationEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mult_factor_, other->_impl_.mult_factor_);
}

::google::protobuf::Metadata SaturationEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SnakeEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SnakeEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_._has_bits_);
};

void SnakeEffectConfig::clear_head() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.head_ != nullptr) _impl_.head_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SnakeEffectConfig::clear_tail_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tail_length_ != nullptr) _impl_.tail_length_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SnakeEffectConfig::SnakeEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SnakeEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.SnakeEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SnakeEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::SnakeEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SnakeEffectConfig::SnakeEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SnakeEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SnakeEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SnakeEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.head_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.head_)
                : nullptr;
  _impl_.tail_length_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tail_length_)
                : nullptr;
  _impl_.cyclic_ = from._impl_.cyclic_;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.SnakeEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SnakeEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SnakeEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, head_),
           0,
           offsetof(Impl_, cyclic_) -
               offsetof(Impl_, head_) +
               sizeof(Impl_::cyclic_));
}
SnakeEffectConfig::~SnakeEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.SnakeEffectConfig)
  SharedDtor(*this);
}
inline void SnakeEffectConfig::SharedDtor(MessageLite& self) {
  SnakeEffectConfig& this_ = static_cast<SnakeEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.head_;
  delete this_._impl_.tail_length_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SnakeEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SnakeEffectConfig(arena);
}
constexpr auto SnakeEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SnakeEffectConfig),
                                            alignof(SnakeEffectConfig));
}
constexpr auto SnakeEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SnakeEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SnakeEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SnakeEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SnakeEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SnakeEffectConfig>(), &SnakeEffectConfig::ByteSizeLong,
              &SnakeEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_._cached_size_),
          false,
      },
      &SnakeEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SnakeEffectConfig_class_data_ =
        SnakeEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SnakeEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SnakeEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SnakeEffectConfig_class_data_.tc_table);
  return SnakeEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2>
SnakeEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SnakeEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SnakeEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.head_)}},
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.tail_length_)}},
    // bool cyclic = 3 [json_name = "cyclic"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SnakeEffectConfig, _impl_.cyclic_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.cyclic_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    {PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.head_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    {PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.tail_length_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool cyclic = 3 [json_name = "cyclic"];
    {PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.cyclic_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SnakeEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.SnakeEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.head_ != nullptr);
      _impl_.head_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.tail_length_ != nullptr);
      _impl_.tail_length_->Clear();
    }
  }
  _impl_.cyclic_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SnakeEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SnakeEffectConfig& this_ = static_cast<const SnakeEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SnakeEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SnakeEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.SnakeEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.head_, this_._impl_.head_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.tail_length_, this_._impl_.tail_length_->GetCachedSize(), target,
        stream);
  }

  // bool cyclic = 3 [json_name = "cyclic"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (this_._internal_cyclic() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_cyclic(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.SnakeEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SnakeEffectConfig::ByteSizeLong(const MessageLite& base) {
  const SnakeEffectConfig& this_ = static_cast<const SnakeEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SnakeEffectConfig::ByteSizeLong() const {
  const SnakeEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.SnakeEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .kivsee.proto.render.v1.FloatFunction head = 1 [json_name = "head"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.head_);
    }
    // .kivsee.proto.render.v1.FloatFunction tail_length = 2 [json_name = "tailLength"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tail_length_);
    }
    // bool cyclic = 3 [json_name = "cyclic"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_cyclic() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SnakeEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SnakeEffectConfig*>(&to_msg);
  auto& from = static_cast<const SnakeEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.SnakeEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.head_ != nullptr);
      if (_this->_impl_.head_ == nullptr) {
        _this->_impl_.head_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.head_);
      } else {
        _this->_impl_.head_->MergeFrom(*from._impl_.head_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.tail_length_ != nullptr);
      if (_this->_impl_.tail_length_ == nullptr) {
        _this->_impl_.tail_length_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tail_length_);
      } else {
        _this->_impl_.tail_length_->MergeFrom(*from._impl_.tail_length_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_cyclic() != 0) {
        _this->_impl_.cyclic_ = from._impl_.cyclic_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SnakeEffectConfig::CopyFrom(const SnakeEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.SnakeEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SnakeEffectConfig::InternalSwap(SnakeEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.cyclic_)
      + sizeof(SnakeEffectConfig::_impl_.cyclic_)
      - PROTOBUF_FIELD_OFFSET(SnakeEffectConfig, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::google::protobuf::Metadata SnakeEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SegmentEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SegmentEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, _impl_._has_bits_);
};

void SegmentEffectConfig::clear_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_ != nullptr) _impl_.start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SegmentEffectConfig::clear_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_ != nullptr) _impl_.end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SegmentEffectConfig::SegmentEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SegmentEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.SegmentEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SegmentEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::SegmentEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SegmentEffectConfig::SegmentEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SegmentEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SegmentEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SegmentEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.start_)
                : nullptr;
  _impl_.end_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.end_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.SegmentEffectConfig)
}
PROTOBUF_NDEBUG_INLINE SegmentEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SegmentEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_),
           0,
           offsetof(Impl_, end_) -
               offsetof(Impl_, start_) +
               sizeof(Impl_::end_));
}
SegmentEffectConfig::~SegmentEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.SegmentEffectConfig)
  SharedDtor(*this);
}
inline void SegmentEffectConfig::SharedDtor(MessageLite& self) {
  SegmentEffectConfig& this_ = static_cast<SegmentEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.start_;
  delete this_._impl_.end_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SegmentEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SegmentEffectConfig(arena);
}
constexpr auto SegmentEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SegmentEffectConfig),
                                            alignof(SegmentEffectConfig));
}
constexpr auto SegmentEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SegmentEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SegmentEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SegmentEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SegmentEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SegmentEffectConfig>(), &SegmentEffectConfig::ByteSizeLong,
              &SegmentEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, _impl_._cached_size_),
          false,
      },
      &SegmentEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SegmentEffectConfig_class_data_ =
        SegmentEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SegmentEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SegmentEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SegmentEffectConfig_class_data_.tc_table);
  return SegmentEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
SegmentEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SegmentEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SegmentEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction end = 2 [json_name = "end"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, _impl_.end_)}},
    // .kivsee.proto.render.v1.FloatFunction start = 1 [json_name = "start"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, _impl_.start_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction start = 1 [json_name = "start"];
    {PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, _impl_.start_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction end = 2 [json_name = "end"];
    {PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, _impl_.end_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SegmentEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.SegmentEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SegmentEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SegmentEffectConfig& this_ = static_cast<const SegmentEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SegmentEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SegmentEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.SegmentEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction start = 1 [json_name = "start"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.start_, this_._impl_.start_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction end = 2 [json_name = "end"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.end_, this_._impl_.end_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.SegmentEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SegmentEffectConfig::ByteSizeLong(const MessageLite& base) {
  const SegmentEffectConfig& this_ = static_cast<const SegmentEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SegmentEffectConfig::ByteSizeLong() const {
  const SegmentEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.SegmentEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .kivsee.proto.render.v1.FloatFunction start = 1 [json_name = "start"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_);
    }
    // .kivsee.proto.render.v1.FloatFunction end = 2 [json_name = "end"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.end_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SegmentEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SegmentEffectConfig*>(&to_msg);
  auto& from = static_cast<const SegmentEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.SegmentEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.start_ != nullptr);
      if (_this->_impl_.start_ == nullptr) {
        _this->_impl_.start_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.start_);
      } else {
        _this->_impl_.start_->MergeFrom(*from._impl_.start_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.end_ != nullptr);
      if (_this->_impl_.end_ == nullptr) {
        _this->_impl_.end_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.end_);
      } else {
        _this->_impl_.end_->MergeFrom(*from._impl_.end_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentEffectConfig::CopyFrom(const SegmentEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.SegmentEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SegmentEffectConfig::InternalSwap(SegmentEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, _impl_.end_)
      + sizeof(SegmentEffectConfig::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(SegmentEffectConfig, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::google::protobuf::Metadata SegmentEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GlitterEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<GlitterEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, _impl_._has_bits_);
};

void GlitterEffectConfig::clear_intensity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.intensity_ != nullptr) _impl_.intensity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GlitterEffectConfig::clear_sat_mult_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sat_mult_factor_ != nullptr) _impl_.sat_mult_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GlitterEffectConfig::GlitterEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GlitterEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.GlitterEffectConfig)
}
PROTOBUF_NDEBUG_INLINE GlitterEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::GlitterEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GlitterEffectConfig::GlitterEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const GlitterEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GlitterEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GlitterEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.intensity_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.intensity_)
                : nullptr;
  _impl_.sat_mult_factor_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sat_mult_factor_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.GlitterEffectConfig)
}
PROTOBUF_NDEBUG_INLINE GlitterEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void GlitterEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, intensity_),
           0,
           offsetof(Impl_, sat_mult_factor_) -
               offsetof(Impl_, intensity_) +
               sizeof(Impl_::sat_mult_factor_));
}
GlitterEffectConfig::~GlitterEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.GlitterEffectConfig)
  SharedDtor(*this);
}
inline void GlitterEffectConfig::SharedDtor(MessageLite& self) {
  GlitterEffectConfig& this_ = static_cast<GlitterEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.intensity_;
  delete this_._impl_.sat_mult_factor_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL GlitterEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) GlitterEffectConfig(arena);
}
constexpr auto GlitterEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GlitterEffectConfig),
                                            alignof(GlitterEffectConfig));
}
constexpr auto GlitterEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_GlitterEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &GlitterEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<GlitterEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &GlitterEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<GlitterEffectConfig>(), &GlitterEffectConfig::ByteSizeLong,
              &GlitterEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, _impl_._cached_size_),
          false,
      },
      &GlitterEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull GlitterEffectConfig_class_data_ =
        GlitterEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
GlitterEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&GlitterEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(GlitterEffectConfig_class_data_.tc_table);
  return GlitterEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
GlitterEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    GlitterEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::GlitterEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction sat_mult_factor = 2 [json_name = "satMultFactor"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, _impl_.sat_mult_factor_)}},
    // .kivsee.proto.render.v1.FloatFunction intensity = 1 [json_name = "intensity"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, _impl_.intensity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.FloatFunction intensity = 1 [json_name = "intensity"];
    {PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, _impl_.intensity_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction sat_mult_factor = 2 [json_name = "satMultFactor"];
    {PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, _impl_.sat_mult_factor_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void GlitterEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.GlitterEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.intensity_ != nullptr);
      _impl_.intensity_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.sat_mult_factor_ != nullptr);
      _impl_.sat_mult_factor_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL GlitterEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const GlitterEffectConfig& this_ = static_cast<const GlitterEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL GlitterEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const GlitterEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.GlitterEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction intensity = 1 [json_name = "intensity"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.intensity_, this_._impl_.intensity_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction sat_mult_factor = 2 [json_name = "satMultFactor"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.sat_mult_factor_, this_._impl_.sat_mult_factor_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.GlitterEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t GlitterEffectConfig::ByteSizeLong(const MessageLite& base) {
  const GlitterEffectConfig& this_ = static_cast<const GlitterEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t GlitterEffectConfig::ByteSizeLong() const {
  const GlitterEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.GlitterEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .kivsee.proto.render.v1.FloatFunction intensity = 1 [json_name = "intensity"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.intensity_);
    }
    // .kivsee.proto.render.v1.FloatFunction sat_mult_factor = 2 [json_name = "satMultFactor"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sat_mult_factor_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void GlitterEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GlitterEffectConfig*>(&to_msg);
  auto& from = static_cast<const GlitterEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.GlitterEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.intensity_ != nullptr);
      if (_this->_impl_.intensity_ == nullptr) {
        _this->_impl_.intensity_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.intensity_);
      } else {
        _this->_impl_.intensity_->MergeFrom(*from._impl_.intensity_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.sat_mult_factor_ != nullptr);
      if (_this->_impl_.sat_mult_factor_ == nullptr) {
        _this->_impl_.sat_mult_factor_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sat_mult_factor_);
      } else {
        _this->_impl_.sat_mult_factor_->MergeFrom(*from._impl_.sat_mult_factor_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GlitterEffectConfig::CopyFrom(const GlitterEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.GlitterEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GlitterEffectConfig::InternalSwap(GlitterEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, _impl_.sat_mult_factor_)
      + sizeof(GlitterEffectConfig::_impl_.sat_mult_factor_)
      - PROTOBUF_FIELD_OFFSET(GlitterEffectConfig, _impl_.intensity_)>(
          reinterpret_cast<char*>(&_impl_.intensity_),
          reinterpret_cast<char*>(&other->_impl_.intensity_));
}

::google::protobuf::Metadata GlitterEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AlternateEffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AlternateEffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_._has_bits_);
};

void AlternateEffectConfig::clear_hue_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hue_offset_ != nullptr) _impl_.hue_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AlternateEffectConfig::clear_sat_mult() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sat_mult_ != nullptr) _impl_.sat_mult_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AlternateEffectConfig::clear_brightness_mult() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brightness_mult_ != nullptr) _impl_.brightness_mult_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AlternateEffectConfig::AlternateEffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AlternateEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.AlternateEffectConfig)
}
PROTOBUF_NDEBUG_INLINE AlternateEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::AlternateEffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AlternateEffectConfig::AlternateEffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AlternateEffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AlternateEffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AlternateEffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.hue_offset_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hue_offset_)
                : nullptr;
  _impl_.sat_mult_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sat_mult_)
                : nullptr;
  _impl_.brightness_mult_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.brightness_mult_)
                : nullptr;
  _impl_.numberofpixels_ = from._impl_.numberofpixels_;

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.AlternateEffectConfig)
}
PROTOBUF_NDEBUG_INLINE AlternateEffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void AlternateEffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, hue_offset_),
           0,
           offsetof(Impl_, numberofpixels_) -
               offsetof(Impl_, hue_offset_) +
               sizeof(Impl_::numberofpixels_));
}
AlternateEffectConfig::~AlternateEffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.AlternateEffectConfig)
  SharedDtor(*this);
}
inline void AlternateEffectConfig::SharedDtor(MessageLite& self) {
  AlternateEffectConfig& this_ = static_cast<AlternateEffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.hue_offset_;
  delete this_._impl_.sat_mult_;
  delete this_._impl_.brightness_mult_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AlternateEffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AlternateEffectConfig(arena);
}
constexpr auto AlternateEffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AlternateEffectConfig),
                                            alignof(AlternateEffectConfig));
}
constexpr auto AlternateEffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AlternateEffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AlternateEffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AlternateEffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AlternateEffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AlternateEffectConfig>(), &AlternateEffectConfig::ByteSizeLong,
              &AlternateEffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_._cached_size_),
          false,
      },
      &AlternateEffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AlternateEffectConfig_class_data_ =
        AlternateEffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AlternateEffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AlternateEffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AlternateEffectConfig_class_data_.tc_table);
  return AlternateEffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2>
AlternateEffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AlternateEffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::AlternateEffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.FloatFunction brightness_mult = 4 [json_name = "brightnessMult"];
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_.brightness_mult_)}},
    // uint32 numberOfPixels = 1 [json_name = "numberOfPixels"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AlternateEffectConfig, _impl_.numberofpixels_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_.numberofpixels_)}},
    // .kivsee.proto.render.v1.FloatFunction hue_offset = 2 [json_name = "hueOffset"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_.hue_offset_)}},
    // .kivsee.proto.render.v1.FloatFunction sat_mult = 3 [json_name = "satMult"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_.sat_mult_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 numberOfPixels = 1 [json_name = "numberOfPixels"];
    {PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_.numberofpixels_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .kivsee.proto.render.v1.FloatFunction hue_offset = 2 [json_name = "hueOffset"];
    {PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_.hue_offset_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction sat_mult = 3 [json_name = "satMult"];
    {PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_.sat_mult_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.FloatFunction brightness_mult = 4 [json_name = "brightnessMult"];
    {PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_.brightness_mult_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::FloatFunction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AlternateEffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.AlternateEffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.hue_offset_ != nullptr);
      _impl_.hue_offset_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.sat_mult_ != nullptr);
      _impl_.sat_mult_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.brightness_mult_ != nullptr);
      _impl_.brightness_mult_->Clear();
    }
  }
  _impl_.numberofpixels_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AlternateEffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AlternateEffectConfig& this_ = static_cast<const AlternateEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AlternateEffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AlternateEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.AlternateEffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 numberOfPixels = 1 [json_name = "numberOfPixels"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_numberofpixels() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_numberofpixels(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.FloatFunction hue_offset = 2 [json_name = "hueOffset"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.hue_offset_, this_._impl_.hue_offset_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction sat_mult = 3 [json_name = "satMult"];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.sat_mult_, this_._impl_.sat_mult_->GetCachedSize(), target,
        stream);
  }

  // .kivsee.proto.render.v1.FloatFunction brightness_mult = 4 [json_name = "brightnessMult"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.brightness_mult_, this_._impl_.brightness_mult_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.AlternateEffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AlternateEffectConfig::ByteSizeLong(const MessageLite& base) {
  const AlternateEffectConfig& this_ = static_cast<const AlternateEffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AlternateEffectConfig::ByteSizeLong() const {
  const AlternateEffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.AlternateEffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .kivsee.proto.render.v1.FloatFunction hue_offset = 2 [json_name = "hueOffset"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hue_offset_);
    }
    // .kivsee.proto.render.v1.FloatFunction sat_mult = 3 [json_name = "satMult"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sat_mult_);
    }
    // .kivsee.proto.render.v1.FloatFunction brightness_mult = 4 [json_name = "brightnessMult"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.brightness_mult_);
    }
    // uint32 numberOfPixels = 1 [json_name = "numberOfPixels"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_numberofpixels() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_numberofpixels());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AlternateEffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AlternateEffectConfig*>(&to_msg);
  auto& from = static_cast<const AlternateEffectConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.AlternateEffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.hue_offset_ != nullptr);
      if (_this->_impl_.hue_offset_ == nullptr) {
        _this->_impl_.hue_offset_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hue_offset_);
      } else {
        _this->_impl_.hue_offset_->MergeFrom(*from._impl_.hue_offset_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.sat_mult_ != nullptr);
      if (_this->_impl_.sat_mult_ == nullptr) {
        _this->_impl_.sat_mult_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sat_mult_);
      } else {
        _this->_impl_.sat_mult_->MergeFrom(*from._impl_.sat_mult_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.brightness_mult_ != nullptr);
      if (_this->_impl_.brightness_mult_ == nullptr) {
        _this->_impl_.brightness_mult_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.brightness_mult_);
      } else {
        _this->_impl_.brightness_mult_->MergeFrom(*from._impl_.brightness_mult_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_numberofpixels() != 0) {
        _this->_impl_.numberofpixels_ = from._impl_.numberofpixels_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AlternateEffectConfig::CopyFrom(const AlternateEffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.AlternateEffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AlternateEffectConfig::InternalSwap(AlternateEffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_.numberofpixels_)
      + sizeof(AlternateEffectConfig::_impl_.numberofpixels_)
      - PROTOBUF_FIELD_OFFSET(AlternateEffectConfig, _impl_.hue_offset_)>(
          reinterpret_cast<char*>(&_impl_.hue_offset_),
          reinterpret_cast<char*>(&other->_impl_.hue_offset_));
}

::google::protobuf::Metadata AlternateEffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EffectConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<EffectConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_._has_bits_);
};

EffectConfig::EffectConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.EffectConfig)
}
PROTOBUF_NDEBUG_INLINE EffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::EffectConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        segments_(arena, from.segments_) {}

EffectConfig::EffectConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const EffectConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EffectConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EffectConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_),
           offsetof(Impl_, repeat_end_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::repeat_end_));

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.EffectConfig)
}
PROTOBUF_NDEBUG_INLINE EffectConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        segments_(arena) {}

inline void EffectConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           0,
           offsetof(Impl_, repeat_end_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::repeat_end_));
}
EffectConfig::~EffectConfig() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.EffectConfig)
  SharedDtor(*this);
}
inline void EffectConfig::SharedDtor(MessageLite& self) {
  EffectConfig& this_ = static_cast<EffectConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.segments_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL EffectConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EffectConfig(arena);
}
constexpr auto EffectConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EffectConfig),
                                            alignof(EffectConfig));
}
constexpr auto EffectConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EffectConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EffectConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EffectConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EffectConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EffectConfig>(), &EffectConfig::ByteSizeLong,
              &EffectConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_._cached_size_),
          false,
      },
      &EffectConfig::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull EffectConfig_class_data_ =
        EffectConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
EffectConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EffectConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EffectConfig_class_data_.tc_table);
  return EffectConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 52, 2>
EffectConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    EffectConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::EffectConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 start_time = 1 [json_name = "startTime"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EffectConfig, _impl_.start_time_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.start_time_)}},
    // uint32 end_time = 2 [json_name = "endTime"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EffectConfig, _impl_.end_time_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.end_time_)}},
    // string segments = 3 [json_name = "segments"];
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.segments_)}},
    // float repeat_num = 4 [json_name = "repeatNum"];
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_num_)}},
    // float repeat_start = 5 [json_name = "repeatStart"];
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_start_)}},
    // float repeat_end = 6 [json_name = "repeatEnd"];
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_end_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 start_time = 1 [json_name = "startTime"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.start_time_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 end_time = 2 [json_name = "endTime"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.end_time_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // string segments = 3 [json_name = "segments"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.segments_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float repeat_num = 4 [json_name = "repeatNum"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_num_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float repeat_start = 5 [json_name = "repeatStart"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_start_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float repeat_end = 6 [json_name = "repeatEnd"];
    {PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_end_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\43\0\0\10\0\0\0\0"
    "kivsee.proto.render.v1.EffectConfig"
    "segments"
  }},
};
PROTOBUF_NOINLINE void EffectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.EffectConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.segments_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000003eu) != 0) {
    ::memset(&_impl_.start_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.repeat_end_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.repeat_end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EffectConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EffectConfig& this_ = static_cast<const EffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EffectConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.EffectConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 start_time = 1 [json_name = "startTime"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_start_time() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_start_time(), target);
    }
  }

  // uint32 end_time = 2 [json_name = "endTime"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_end_time() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_end_time(), target);
    }
  }

  // string segments = 3 [json_name = "segments"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_segments().empty()) {
      const ::std::string& _s = this_._internal_segments();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kivsee.proto.render.v1.EffectConfig.segments");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // float repeat_num = 4 [json_name = "repeatNum"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_num()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          4, this_._internal_repeat_num(), target);
    }
  }

  // float repeat_start = 5 [json_name = "repeatStart"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_start()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          5, this_._internal_repeat_start(), target);
    }
  }

  // float repeat_end = 6 [json_name = "repeatEnd"];
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_end()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          6, this_._internal_repeat_end(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.EffectConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EffectConfig::ByteSizeLong(const MessageLite& base) {
  const EffectConfig& this_ = static_cast<const EffectConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EffectConfig::ByteSizeLong() const {
  const EffectConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.EffectConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string segments = 3 [json_name = "segments"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_segments().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_segments());
      }
    }
    // uint32 start_time = 1 [json_name = "startTime"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_start_time() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_start_time());
      }
    }
    // uint32 end_time = 2 [json_name = "endTime"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_end_time() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_end_time());
      }
    }
    // float repeat_num = 4 [json_name = "repeatNum"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_num()) != 0) {
        total_size += 5;
      }
    }
    // float repeat_start = 5 [json_name = "repeatStart"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_start()) != 0) {
        total_size += 5;
      }
    }
    // float repeat_end = 6 [json_name = "repeatEnd"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_repeat_end()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EffectConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EffectConfig*>(&to_msg);
  auto& from = static_cast<const EffectConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.EffectConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_segments().empty()) {
        _this->_internal_set_segments(from._internal_segments());
      } else {
        if (_this->_impl_.segments_.IsDefault()) {
          _this->_internal_set_segments("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_start_time() != 0) {
        _this->_impl_.start_time_ = from._impl_.start_time_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_end_time() != 0) {
        _this->_impl_.end_time_ = from._impl_.end_time_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_repeat_num()) != 0) {
        _this->_impl_.repeat_num_ = from._impl_.repeat_num_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_repeat_start()) != 0) {
        _this->_impl_.repeat_start_ = from._impl_.repeat_start_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_repeat_end()) != 0) {
        _this->_impl_.repeat_end_ = from._impl_.repeat_end_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EffectConfig::CopyFrom(const EffectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.EffectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EffectConfig::InternalSwap(EffectConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.segments_, &other->_impl_.segments_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.repeat_end_)
      + sizeof(EffectConfig::_impl_.repeat_end_)
      - PROTOBUF_FIELD_OFFSET(EffectConfig, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::google::protobuf::Metadata EffectConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EffectProto::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<EffectProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EffectProto, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kivsee::proto::render::v1::EffectProto, _impl_._oneof_case_);
};

void EffectProto::set_allocated_const_color(::kivsee::proto::render::v1::ConstColorEffectConfig* PROTOBUF_NULLABLE const_color) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (const_color) {
    ::google::protobuf::Arena* submessage_arena = const_color->GetArena();
    if (message_arena != submessage_arena) {
      const_color = ::google::protobuf::internal::GetOwnedMessage(message_arena, const_color, submessage_arena);
    }
    set_has_const_color();
    _impl_.effect_.const_color_ = const_color;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.const_color)
}
void EffectProto::set_allocated_rainbow(::kivsee::proto::render::v1::RainbowEffectConfig* PROTOBUF_NULLABLE rainbow) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (rainbow) {
    ::google::protobuf::Arena* submessage_arena = rainbow->GetArena();
    if (message_arena != submessage_arena) {
      rainbow = ::google::protobuf::internal::GetOwnedMessage(message_arena, rainbow, submessage_arena);
    }
    set_has_rainbow();
    _impl_.effect_.rainbow_ = rainbow;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.rainbow)
}
void EffectProto::set_allocated_brightness(::kivsee::proto::render::v1::BrightnessEffectConfig* PROTOBUF_NULLABLE brightness) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (brightness) {
    ::google::protobuf::Arena* submessage_arena = brightness->GetArena();
    if (message_arena != submessage_arena) {
      brightness = ::google::protobuf::internal::GetOwnedMessage(message_arena, brightness, submessage_arena);
    }
    set_has_brightness();
    _impl_.effect_.brightness_ = brightness;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.brightness)
}
void EffectProto::set_allocated_hue(::kivsee::proto::render::v1::HueEffectConfig* PROTOBUF_NULLABLE hue) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (hue) {
    ::google::protobuf::Arena* submessage_arena = hue->GetArena();
    if (message_arena != submessage_arena) {
      hue = ::google::protobuf::internal::GetOwnedMessage(message_arena, hue, submessage_arena);
    }
    set_has_hue();
    _impl_.effect_.hue_ = hue;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.hue)
}
void EffectProto::set_allocated_saturation(::kivsee::proto::render::v1::SaturationEffectConfig* PROTOBUF_NULLABLE saturation) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (saturation) {
    ::google::protobuf::Arena* submessage_arena = saturation->GetArena();
    if (message_arena != submessage_arena) {
      saturation = ::google::protobuf::internal::GetOwnedMessage(message_arena, saturation, submessage_arena);
    }
    set_has_saturation();
    _impl_.effect_.saturation_ = saturation;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.saturation)
}
void EffectProto::set_allocated_snake(::kivsee::proto::render::v1::SnakeEffectConfig* PROTOBUF_NULLABLE snake) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_effect();
  if (snake) {
    ::google::protobuf::Arena* submessage_arena = snake->GetArena();
    if (message_arena != submessage_arena) {
      snake = ::google::protobuf::internal::GetOwnedMessage(message_arena, snake, submessage_arena);
    }
    set_has_snake();
    _impl_.effect_.snake_ = snake;
  }
  // @@protoc_insertion_point(field_set_allocated:kivsee.proto.render.v1.EffectProto.snake)
}
EffectProto::EffectProto(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EffectProto_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.EffectProto)
}
PROTOBUF_NDEBUG_INLINE EffectProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::EffectProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        effect_{},
        _oneof_case_{from._oneof_case_[0]} {}

EffectProto::EffectProto(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const EffectProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EffectProto_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EffectProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.effect_config_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_config_)
                : nullptr;
  switch (effect_case()) {
    case EFFECT_NOT_SET:
      break;
      case kConstColor:
        _impl_.effect_.const_color_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.const_color_);
        break;
      case kRainbow:
        _impl_.effect_.rainbow_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.rainbow_);
        break;
      case kBrightness:
        _impl_.effect_.brightness_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.brightness_);
        break;
      case kHue:
        _impl_.effect_.hue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.hue_);
        break;
      case kSaturation:
        _impl_.effect_.saturation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.saturation_);
        break;
      case kSnake:
        _impl_.effect_.snake_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.snake_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.EffectProto)
}
PROTOBUF_NDEBUG_INLINE EffectProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        effect_{},
        _oneof_case_{} {}

inline void EffectProto::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.effect_config_ = {};
}
EffectProto::~EffectProto() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.EffectProto)
  SharedDtor(*this);
}
inline void EffectProto::SharedDtor(MessageLite& self) {
  EffectProto& this_ = static_cast<EffectProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.effect_config_;
  if (this_.has_effect()) {
    this_.clear_effect();
  }
  this_._impl_.~Impl_();
}

void EffectProto::clear_effect() {
// @@protoc_insertion_point(one_of_clear_start:kivsee.proto.render.v1.EffectProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (effect_case()) {
    case kConstColor: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.const_color_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.const_color_);
      }
      break;
    }
    case kRainbow: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.rainbow_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.rainbow_);
      }
      break;
    }
    case kBrightness: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.brightness_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.brightness_);
      }
      break;
    }
    case kHue: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.hue_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.hue_);
      }
      break;
    }
    case kSaturation: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.saturation_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.saturation_);
      }
      break;
    }
    case kSnake: {
      if (GetArena() == nullptr) {
        delete _impl_.effect_.snake_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.effect_.snake_);
      }
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EFFECT_NOT_SET;
}


inline void* PROTOBUF_NONNULL EffectProto::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EffectProto(arena);
}
constexpr auto EffectProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EffectProto),
                                            alignof(EffectProto));
}
constexpr auto EffectProto::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EffectProto_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EffectProto::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EffectProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EffectProto::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EffectProto>(), &EffectProto::ByteSizeLong,
              &EffectProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EffectProto, _impl_._cached_size_),
          false,
      },
      &EffectProto::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull EffectProto_class_data_ =
        EffectProto::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
EffectProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EffectProto_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EffectProto_class_data_.tc_table);
  return EffectProto_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 7, 7, 0, 2>
EffectProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EffectProto, _impl_._has_bits_),
    0, // no _extensions_
    7, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    EffectProto_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::EffectProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kivsee.proto.render.v1.EffectConfig effect_config = 1 [json_name = "effectConfig"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kivsee.proto.render.v1.EffectConfig effect_config = 1 [json_name = "effectConfig"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.ConstColorEffectConfig const_color = 2 [json_name = "constColor"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.const_color_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.RainbowEffectConfig rainbow = 3 [json_name = "rainbow"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.rainbow_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.BrightnessEffectConfig brightness = 4 [json_name = "brightness"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.brightness_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.HueEffectConfig hue = 5 [json_name = "hue"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.hue_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.SaturationEffectConfig saturation = 6 [json_name = "saturation"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.saturation_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kivsee.proto.render.v1.SnakeEffectConfig snake = 7 [json_name = "snake"];
    {PROTOBUF_FIELD_OFFSET(EffectProto, _impl_.effect_.snake_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::EffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::ConstColorEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::RainbowEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::BrightnessEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::HueEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SaturationEffectConfig>()},
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::SnakeEffectConfig>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void EffectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.EffectProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.effect_config_ != nullptr);
    _impl_.effect_config_->Clear();
  }
  clear_effect();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EffectProto::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EffectProto& this_ = static_cast<const EffectProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EffectProto::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EffectProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.EffectProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .kivsee.proto.render.v1.EffectConfig effect_config = 1 [json_name = "effectConfig"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.effect_config_, this_._impl_.effect_config_->GetCachedSize(), target,
        stream);
  }

  switch (this_.effect_case()) {
    case kConstColor: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.effect_.const_color_, this_._impl_.effect_.const_color_->GetCachedSize(), target,
          stream);
      break;
    }
    case kRainbow: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.effect_.rainbow_, this_._impl_.effect_.rainbow_->GetCachedSize(), target,
          stream);
      break;
    }
    case kBrightness: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.effect_.brightness_, this_._impl_.effect_.brightness_->GetCachedSize(), target,
          stream);
      break;
    }
    case kHue: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.effect_.hue_, this_._impl_.effect_.hue_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSaturation: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.effect_.saturation_, this_._impl_.effect_.saturation_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSnake: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.effect_.snake_, this_._impl_.effect_.snake_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.EffectProto)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EffectProto::ByteSizeLong(const MessageLite& base) {
  const EffectProto& this_ = static_cast<const EffectProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EffectProto::ByteSizeLong() const {
  const EffectProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.EffectProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .kivsee.proto.render.v1.EffectConfig effect_config = 1 [json_name = "effectConfig"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_config_);
    }
  }
  switch (this_.effect_case()) {
    // .kivsee.proto.render.v1.ConstColorEffectConfig const_color = 2 [json_name = "constColor"];
    case kConstColor: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.const_color_);
      break;
    }
    // .kivsee.proto.render.v1.RainbowEffectConfig rainbow = 3 [json_name = "rainbow"];
    case kRainbow: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.rainbow_);
      break;
    }
    // .kivsee.proto.render.v1.BrightnessEffectConfig brightness = 4 [json_name = "brightness"];
    case kBrightness: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.brightness_);
      break;
    }
    // .kivsee.proto.render.v1.HueEffectConfig hue = 5 [json_name = "hue"];
    case kHue: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.hue_);
      break;
    }
    // .kivsee.proto.render.v1.SaturationEffectConfig saturation = 6 [json_name = "saturation"];
    case kSaturation: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.saturation_);
      break;
    }
    // .kivsee.proto.render.v1.SnakeEffectConfig snake = 7 [json_name = "snake"];
    case kSnake: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.effect_.snake_);
      break;
    }
    case EFFECT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EffectProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EffectProto*>(&to_msg);
  auto& from = static_cast<const EffectProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.EffectProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.effect_config_ != nullptr);
    if (_this->_impl_.effect_config_ == nullptr) {
      _this->_impl_.effect_config_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_config_);
    } else {
      _this->_impl_.effect_config_->MergeFrom(*from._impl_.effect_config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_effect();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kConstColor: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.const_color_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.const_color_);
        } else {
          _this->_impl_.effect_.const_color_->MergeFrom(*from._impl_.effect_.const_color_);
        }
        break;
      }
      case kRainbow: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.rainbow_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.rainbow_);
        } else {
          _this->_impl_.effect_.rainbow_->MergeFrom(*from._impl_.effect_.rainbow_);
        }
        break;
      }
      case kBrightness: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.brightness_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.brightness_);
        } else {
          _this->_impl_.effect_.brightness_->MergeFrom(*from._impl_.effect_.brightness_);
        }
        break;
      }
      case kHue: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.hue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.hue_);
        } else {
          _this->_impl_.effect_.hue_->MergeFrom(*from._impl_.effect_.hue_);
        }
        break;
      }
      case kSaturation: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.saturation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.saturation_);
        } else {
          _this->_impl_.effect_.saturation_->MergeFrom(*from._impl_.effect_.saturation_);
        }
        break;
      }
      case kSnake: {
        if (oneof_needs_init) {
          _this->_impl_.effect_.snake_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.effect_.snake_);
        } else {
          _this->_impl_.effect_.snake_->MergeFrom(*from._impl_.effect_.snake_);
        }
        break;
      }
      case EFFECT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EffectProto::CopyFrom(const EffectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.EffectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EffectProto::InternalSwap(EffectProto* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.effect_config_, other->_impl_.effect_config_);
  swap(_impl_.effect_, other->_impl_.effect_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata EffectProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AnimationProto::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AnimationProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_._has_bits_);
};

AnimationProto::AnimationProto(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AnimationProto_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kivsee.proto.render.v1.AnimationProto)
}
PROTOBUF_NDEBUG_INLINE AnimationProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::kivsee::proto::render::v1::AnimationProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        effects_{visibility, arena, from.effects_} {}

AnimationProto::AnimationProto(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AnimationProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AnimationProto_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AnimationProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_ms_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, duration_ms_),
           offsetof(Impl_, num_repeats_) -
               offsetof(Impl_, duration_ms_) +
               sizeof(Impl_::num_repeats_));

  // @@protoc_insertion_point(copy_constructor:kivsee.proto.render.v1.AnimationProto)
}
PROTOBUF_NDEBUG_INLINE AnimationProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        effects_{visibility, arena} {}

inline void AnimationProto::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_ms_),
           0,
           offsetof(Impl_, num_repeats_) -
               offsetof(Impl_, duration_ms_) +
               sizeof(Impl_::num_repeats_));
}
AnimationProto::~AnimationProto() {
  // @@protoc_insertion_point(destructor:kivsee.proto.render.v1.AnimationProto)
  SharedDtor(*this);
}
inline void AnimationProto::SharedDtor(MessageLite& self) {
  AnimationProto& this_ = static_cast<AnimationProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AnimationProto::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AnimationProto(arena);
}
constexpr auto AnimationProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.effects_) +
          decltype(AnimationProto::_impl_.effects_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AnimationProto), alignof(AnimationProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AnimationProto::PlacementNew_,
                                 sizeof(AnimationProto),
                                 alignof(AnimationProto));
  }
}
constexpr auto AnimationProto::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AnimationProto_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AnimationProto::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AnimationProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AnimationProto::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AnimationProto>(), &AnimationProto::ByteSizeLong,
              &AnimationProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_._cached_size_),
          false,
      },
      &AnimationProto::kDescriptorMethods,
      &descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AnimationProto_class_data_ =
        AnimationProto::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AnimationProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AnimationProto_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AnimationProto_class_data_.tc_table);
  return AnimationProto_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2>
AnimationProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AnimationProto_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::AnimationProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .kivsee.proto.render.v1.EffectProto effects = 1 [json_name = "effects"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.effects_)}},
    // uint32 duration_ms = 2 [json_name = "durationMs"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AnimationProto, _impl_.duration_ms_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.duration_ms_)}},
    // uint32 num_repeats = 3 [json_name = "numRepeats"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AnimationProto, _impl_.num_repeats_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.num_repeats_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .kivsee.proto.render.v1.EffectProto effects = 1 [json_name = "effects"];
    {PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.effects_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 duration_ms = 2 [json_name = "durationMs"];
    {PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.duration_ms_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_repeats = 3 [json_name = "numRepeats"];
    {PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.num_repeats_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::kivsee::proto::render::v1::EffectProto>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AnimationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:kivsee.proto.render.v1.AnimationProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effects_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.duration_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_repeats_) -
        reinterpret_cast<char*>(&_impl_.duration_ms_)) + sizeof(_impl_.num_repeats_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AnimationProto::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AnimationProto& this_ = static_cast<const AnimationProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AnimationProto::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AnimationProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:kivsee.proto.render.v1.AnimationProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .kivsee.proto.render.v1.EffectProto effects = 1 [json_name = "effects"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_effects_size());
       i < n; i++) {
    const auto& repfield = this_._internal_effects().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // uint32 duration_ms = 2 [json_name = "durationMs"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_duration_ms() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_duration_ms(), target);
    }
  }

  // uint32 num_repeats = 3 [json_name = "numRepeats"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_num_repeats() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_num_repeats(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kivsee.proto.render.v1.AnimationProto)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AnimationProto::ByteSizeLong(const MessageLite& base) {
  const AnimationProto& this_ = static_cast<const AnimationProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AnimationProto::ByteSizeLong() const {
  const AnimationProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:kivsee.proto.render.v1.AnimationProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .kivsee.proto.render.v1.EffectProto effects = 1 [json_name = "effects"];
    {
      total_size += 1UL * this_._internal_effects_size();
      for (const auto& msg : this_._internal_effects()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // uint32 duration_ms = 2 [json_name = "durationMs"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_duration_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_duration_ms());
      }
    }
    // uint32 num_repeats = 3 [json_name = "numRepeats"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_num_repeats() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_repeats());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AnimationProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AnimationProto*>(&to_msg);
  auto& from = static_cast<const AnimationProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kivsee.proto.render.v1.AnimationProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_effects()->MergeFrom(
      from._internal_effects());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_duration_ms() != 0) {
        _this->_impl_.duration_ms_ = from._impl_.duration_ms_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_num_repeats() != 0) {
        _this->_impl_.num_repeats_ = from._impl_.num_repeats_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationProto::CopyFrom(const AnimationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kivsee.proto.render.v1.AnimationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AnimationProto::InternalSwap(AnimationProto* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.effects_.InternalSwap(&other->_impl_.effects_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.num_repeats_)
      + sizeof(AnimationProto::_impl_.num_repeats_)
      - PROTOBUF_FIELD_OFFSET(AnimationProto, _impl_.duration_ms_)>(
          reinterpret_cast<char*>(&_impl_.duration_ms_),
          reinterpret_cast<char*>(&other->_impl_.duration_ms_));
}

::google::protobuf::Metadata AnimationProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace render
}  // namespace proto
}  // namespace kivsee
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_kivsee_2fproto_2frender_2fv1_2feffects_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
